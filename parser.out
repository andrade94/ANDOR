Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    AND
    FALSE
    NOT
    OR

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     empty -> <empty>
Rule 2     PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL
Rule 3     PROGRAMAB -> FUNCION PROGRAMAB
Rule 4     PROGRAMAB -> empty
Rule 5     PROGRAMAZ -> GLOBALES
Rule 6     PROGRAMAZ -> empty
Rule 7     GLOBALES -> GLOBAL GLOBALEZ END
Rule 8     GLOBALEZ -> VART GLOBALEZ
Rule 9     GLOBALEZ -> empty
Rule 10    VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR
Rule 11    VART -> DATA_TIPOS ID addVariable
Rule 12    VART -> ARR ID addVariable
Rule 13    ESTATUTO -> EXPRE
Rule 14    ESTATUTO -> CONDICION
Rule 15    ESTATUTO -> CICLO
Rule 16    ESTATUTO -> ACCION
Rule 17    ESTATUTO -> VART
Rule 18    ESTATUTO -> LLAMADA_FUNCION
Rule 19    ESTATUTO -> IMPRIMIR
Rule 20    BLOQUE -> ESTATUTO BLOQUE
Rule 21    BLOQUE -> empty
Rule 22    DATA_TIPOS -> INT addDataType
Rule 23    DATA_TIPOS -> BOOLEAN addDataType
Rule 24    DATA_TIPOS -> CHAR addDataType
Rule 25    DATA_TIPOS -> STRING addDataType
Rule 26    DATA_TIPOS -> FLOAT addDataType
Rule 27    DATA_TIPOS -> VOID addDataType saveVoid
Rule 28    ASOP -> PLUS
Rule 29    ASOP -> MINUS
Rule 30    MDOP -> MULT
Rule 31    MDOP -> DIVI
Rule 32    ARR -> DATA_TIPOS LBRA ICTE RBRA
Rule 33    LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR
Rule 34    LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
Rule 35    LLAMADA_FUNCIONP -> empty
Rule 36    LLAMADA_FUNCIONZ -> COMMA
Rule 37    LLAMADA_FUNCIONZ -> empty
Rule 38    PRINCIPAL -> MAIN LPAR RPAR changeLocalScope BLOQUE END
Rule 39    CICLO -> WHILEF
Rule 40    CICLO -> FORZ
Rule 41    WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END
Rule 42    FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
Rule 43    CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
Rule 44    CONDICIONP -> ELSE BLOQUE
Rule 45    CONDICIONP -> empty
Rule 46    RELOP -> LESSTH
Rule 47    RELOP -> GREATERTH
Rule 48    RELOP -> SEQUAL
Rule 49    RELOP -> NOTEQ
Rule 50    RELOP -> LESSEQTH
Rule 51    RELOP -> GREATEREQTH
Rule 52    EXPRE -> EXT EXPREZ
Rule 53    EXPREZ -> EQUAL EXT
Rule 54    EXPREZ -> empty
Rule 55    EXT -> EXP EXT_W_RELOP
Rule 56    EXT_W_RELOP -> RELOP EXT
Rule 57    EXT_W_RELOP -> empty
Rule 58    EXP -> TERMINO EXP_W_SIGN
Rule 59    EXP_W_SIGN -> ASOP EXP
Rule 60    EXP_W_SIGN -> empty
Rule 61    TERMINO -> FAC TERMINO_W_SIGN
Rule 62    TERMINO_W_SIGN -> MDOP TERMINO
Rule 63    TERMINO_W_SIGN -> empty
Rule 64    VAR_CTE -> ICTE
Rule 65    VAR_CTE -> FCTE
Rule 66    IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA
Rule 67    IMPRIMIRZ -> EXPRE
Rule 68    IMPRIMIRZ -> SCTE
Rule 69    FAC -> LPAR EXPRE RPAR
Rule 70    FAC -> VAR_CTE
Rule 71    FAC -> LBRA EXPRE RPAR
Rule 72    FAC -> ID FACT
Rule 73    FACT -> LBRA EXPRE RBRA
Rule 74    FACT -> LPAR EXPRE RPAR
Rule 75    FACT -> empty
Rule 76    FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope
Rule 77    ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR
Rule 78    VAR_FUN -> LPAR VAR_FUNP RPAR
Rule 79    VAR_FUNP -> DATA_TIPOS ID addArg VAR_FUNZ
Rule 80    VAR_FUNP -> empty
Rule 81    VAR_FUNZ -> COMMA VAR_FUNP
Rule 82    VAR_FUNZ -> empty
Rule 83    DIBUJA -> DEFINIRPOSICION
Rule 84    DIBUJA -> DEFINIRCOLOR
Rule 85    DIBUJA -> DERECHO
Rule 86    DIBUJA -> REVERSA
Rule 87    DIBUJA -> IZQUIERDA
Rule 88    DIBUJA -> DERECHA
Rule 89    DIBUJA -> VELOCIDAD
Rule 90    DIBUJA -> BORRAR
Rule 91    DIBUJA -> MOSTRAR
Rule 92    DIBUJA -> OCULTAR
Rule 93    DIBUJA -> CIRCULO
Rule 94    DIBUJA -> DEFINIRX
Rule 95    DIBUJA -> DEFINIRY
Rule 96    DIBUJA -> ARCO
Rule 97    DIBUJA -> GROSOR
Rule 98    changeGlobalScope -> empty
Rule 99    changeLocalScope -> empty
Rule 100   addDataType -> empty
Rule 101   addVariable -> <empty>
Rule 102   saveVoid -> <empty>
Rule 103   saveFunc -> <empty>
Rule 104   addArg -> <empty>

Terminals, with rules where they appear

AND                  : 
ARCO                 : 96
BOOLEAN              : 23
BORRAR               : 90
CHAR                 : 24
CIRCULO              : 93
COMMA                : 36 42 42 81
DEFINE               : 76
DEFINIRCOLOR         : 84
DEFINIRPOSICION      : 83
DEFINIRX             : 94
DEFINIRY             : 95
DERECHA              : 88
DERECHO              : 85
DIVI                 : 31
DRAW                 : 10
DRAWI                : 10
ELSE                 : 44
END                  : 7 38 41 42 43 76
EQUAL                : 10 53
FALSE                : 
FCTE                 : 65
FLOAT                : 26
FOR                  : 42
GLOBAL               : 7
GREATEREQTH          : 51
GREATERTH            : 47
GROSOR               : 97
ICTE                 : 32 42 42 42 64
ID                   : 10 11 12 33 72 76 77 79
IF                   : 43
INT                  : 22
IZQUIERDA            : 87
LBRA                 : 32 66 71 73
LESSEQTH             : 50
LESSTH               : 46
LPAR                 : 10 33 38 41 42 43 69 74 77 78
MAIN                 : 38
MINUS                : 29
MOSTRAR              : 91
MULT                 : 30
NEW                  : 10
NOT                  : 
NOTEQ                : 49
OCULTAR              : 92
OR                   : 
PLUS                 : 28
POINT                : 77
PRINT                : 66
RBRA                 : 32 66 73
RETURN               : 76
REVERSA              : 86
RPAR                 : 10 33 38 41 42 43 69 71 74 77 78
SCTE                 : 68
SEQUAL               : 48
STRING               : 25
TRUE                 : 
VELOCIDAD            : 89
VOID                 : 27
WHILE                : 41
error                : 

Nonterminals, with rules where they appear

ACCION               : 16
ARR                  : 12
ASOP                 : 59
BLOQUE               : 20 38 41 42 43 44 76
CICLO                : 15
CONDICION            : 14
CONDICIONP           : 43
DATA_TIPOS           : 11 32 76 79
DIBUJA               : 77
ESTATUTO             : 20
EXP                  : 55 59
EXPRE                : 13 34 41 43 67 69 71 73 74 76
EXPREZ               : 52
EXP_W_SIGN           : 58
EXT                  : 52 53 56
EXT_W_RELOP          : 55
FAC                  : 61
FACT                 : 72
FORZ                 : 40
FUNCION              : 3
GLOBALES             : 5
GLOBALEZ             : 7 8
IMPRIMIR             : 19
IMPRIMIRZ            : 66
LLAMADA_FUNCION      : 18
LLAMADA_FUNCIONP     : 33 34
LLAMADA_FUNCIONZ     : 34
MDOP                 : 62
PRINCIPAL            : 2
PROGRAMA             : 0
PROGRAMAB            : 2 3
PROGRAMAZ            : 2
RELOP                : 56
TERMINO              : 58 62
TERMINO_W_SIGN       : 61
VART                 : 8 17
VAR_CTE              : 70 77
VAR_FUN              : 76
VAR_FUNP             : 78 81
VAR_FUNZ             : 79
WHILEF               : 39
addArg               : 79
addDataType          : 22 23 24 25 26 27
addVariable          : 11 12
changeGlobalScope    : 76
changeLocalScope     : 38 76
empty                : 4 6 9 21 35 37 45 54 57 60 63 75 80 82 98 99 100
saveFunc             : 76
saveVoid             : 27

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (2) PROGRAMA -> . PROGRAMAZ PROGRAMAB PRINCIPAL
    (5) PROGRAMAZ -> . GLOBALES
    (6) PROGRAMAZ -> . empty
    (7) GLOBALES -> . GLOBAL GLOBALEZ END
    (1) empty -> .

    GLOBAL          shift and go to state 2
    MAIN            reduce using rule 1 (empty -> .)
    DEFINE          reduce using rule 1 (empty -> .)

    PROGRAMAZ                      shift and go to state 1
    PROGRAMA                       shift and go to state 3
    GLOBALES                       shift and go to state 4
    empty                          shift and go to state 5

state 1

    (2) PROGRAMA -> PROGRAMAZ . PROGRAMAB PRINCIPAL
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (76) FUNCION -> . changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope
    (1) empty -> .
    (99) changeLocalScope -> . empty

    MAIN            reduce using rule 1 (empty -> .)
    DEFINE          reduce using rule 1 (empty -> .)

    changeLocalScope               shift and go to state 6
    PROGRAMAB                      shift and go to state 7
    empty                          shift and go to state 8
    FUNCION                        shift and go to state 9

state 2

    (7) GLOBALES -> GLOBAL . GLOBALEZ END
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 15
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 18
    DATA_TIPOS                     shift and go to state 17
    GLOBALEZ                       shift and go to state 13
    empty                          shift and go to state 14

state 3

    (0) S' -> PROGRAMA .



state 4

    (5) PROGRAMAZ -> GLOBALES .

    MAIN            reduce using rule 5 (PROGRAMAZ -> GLOBALES .)
    DEFINE          reduce using rule 5 (PROGRAMAZ -> GLOBALES .)


state 5

    (6) PROGRAMAZ -> empty .

    MAIN            reduce using rule 6 (PROGRAMAZ -> empty .)
    DEFINE          reduce using rule 6 (PROGRAMAZ -> empty .)


state 6

    (76) FUNCION -> changeLocalScope . DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope

    DEFINE          shift and go to state 22


state 7

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB . PRINCIPAL
    (38) PRINCIPAL -> . MAIN LPAR RPAR changeLocalScope BLOQUE END

    MAIN            shift and go to state 23

    PRINCIPAL                      shift and go to state 24

state 8

    (4) PROGRAMAB -> empty .
    (99) changeLocalScope -> empty .

    MAIN            reduce using rule 4 (PROGRAMAB -> empty .)
    DEFINE          reduce using rule 99 (changeLocalScope -> empty .)


state 9

    (3) PROGRAMAB -> FUNCION . PROGRAMAB
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (76) FUNCION -> . changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope
    (1) empty -> .
    (99) changeLocalScope -> . empty

    MAIN            reduce using rule 1 (empty -> .)
    DEFINE          reduce using rule 1 (empty -> .)

    changeLocalScope               shift and go to state 6
    PROGRAMAB                      shift and go to state 25
    empty                          shift and go to state 8
    FUNCION                        shift and go to state 9

state 10

    (8) GLOBALEZ -> VART . GLOBALEZ
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 15
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 18
    DATA_TIPOS                     shift and go to state 17
    GLOBALEZ                       shift and go to state 26
    empty                          shift and go to state 14

state 11

    (27) DATA_TIPOS -> VOID . addDataType saveVoid
    (100) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 27
    empty                          shift and go to state 28

state 12

    (24) DATA_TIPOS -> CHAR . addDataType
    (100) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 29
    empty                          shift and go to state 28

state 13

    (7) GLOBALES -> GLOBAL GLOBALEZ . END

    END             shift and go to state 30


state 14

    (9) GLOBALEZ -> empty .

    END             reduce using rule 9 (GLOBALEZ -> empty .)


state 15

    (10) VART -> DRAW . ID EQUAL NEW DRAWI LPAR RPAR

    ID              shift and go to state 31


state 16

    (25) DATA_TIPOS -> STRING . addDataType
    (100) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 32
    empty                          shift and go to state 28

state 17

    (11) VART -> DATA_TIPOS . ID addVariable
    (32) ARR -> DATA_TIPOS . LBRA ICTE RBRA

    ID              shift and go to state 34
    LBRA            shift and go to state 33


state 18

    (12) VART -> ARR . ID addVariable

    ID              shift and go to state 35


state 19

    (22) DATA_TIPOS -> INT . addDataType
    (100) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 36
    empty                          shift and go to state 28

state 20

    (26) DATA_TIPOS -> FLOAT . addDataType
    (100) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 37
    empty                          shift and go to state 28

state 21

    (23) DATA_TIPOS -> BOOLEAN . addDataType
    (100) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 38
    empty                          shift and go to state 28

state 22

    (76) FUNCION -> changeLocalScope DEFINE . DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11

    DATA_TIPOS                     shift and go to state 39

state 23

    (38) PRINCIPAL -> MAIN . LPAR RPAR changeLocalScope BLOQUE END

    LPAR            shift and go to state 40


state 24

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .)


state 25

    (3) PROGRAMAB -> FUNCION PROGRAMAB .

    MAIN            reduce using rule 3 (PROGRAMAB -> FUNCION PROGRAMAB .)


state 26

    (8) GLOBALEZ -> VART GLOBALEZ .

    END             reduce using rule 8 (GLOBALEZ -> VART GLOBALEZ .)


state 27

    (27) DATA_TIPOS -> VOID addDataType . saveVoid
    (102) saveVoid -> .

    ID              reduce using rule 102 (saveVoid -> .)
    LBRA            reduce using rule 102 (saveVoid -> .)

    saveVoid                       shift and go to state 41

state 28

    (100) addDataType -> empty .

    ID              reduce using rule 100 (addDataType -> empty .)
    LBRA            reduce using rule 100 (addDataType -> empty .)


state 29

    (24) DATA_TIPOS -> CHAR addDataType .

    ID              reduce using rule 24 (DATA_TIPOS -> CHAR addDataType .)
    LBRA            reduce using rule 24 (DATA_TIPOS -> CHAR addDataType .)


state 30

    (7) GLOBALES -> GLOBAL GLOBALEZ END .

    MAIN            reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)
    DEFINE          reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)


state 31

    (10) VART -> DRAW ID . EQUAL NEW DRAWI LPAR RPAR

    EQUAL           shift and go to state 42


state 32

    (25) DATA_TIPOS -> STRING addDataType .

    ID              reduce using rule 25 (DATA_TIPOS -> STRING addDataType .)
    LBRA            reduce using rule 25 (DATA_TIPOS -> STRING addDataType .)


state 33

    (32) ARR -> DATA_TIPOS LBRA . ICTE RBRA

    ICTE            shift and go to state 43


state 34

    (11) VART -> DATA_TIPOS ID . addVariable
    (101) addVariable -> .

    DRAW            reduce using rule 101 (addVariable -> .)
    INT             reduce using rule 101 (addVariable -> .)
    BOOLEAN         reduce using rule 101 (addVariable -> .)
    CHAR            reduce using rule 101 (addVariable -> .)
    STRING          reduce using rule 101 (addVariable -> .)
    FLOAT           reduce using rule 101 (addVariable -> .)
    VOID            reduce using rule 101 (addVariable -> .)
    END             reduce using rule 101 (addVariable -> .)
    IF              reduce using rule 101 (addVariable -> .)
    ID              reduce using rule 101 (addVariable -> .)
    PRINT           reduce using rule 101 (addVariable -> .)
    WHILE           reduce using rule 101 (addVariable -> .)
    FOR             reduce using rule 101 (addVariable -> .)
    LPAR            reduce using rule 101 (addVariable -> .)
    LBRA            reduce using rule 101 (addVariable -> .)
    ICTE            reduce using rule 101 (addVariable -> .)
    FCTE            reduce using rule 101 (addVariable -> .)
    RETURN          reduce using rule 101 (addVariable -> .)
    ELSE            reduce using rule 101 (addVariable -> .)

    addVariable                    shift and go to state 44

state 35

    (12) VART -> ARR ID . addVariable
    (101) addVariable -> .

    DRAW            reduce using rule 101 (addVariable -> .)
    INT             reduce using rule 101 (addVariable -> .)
    BOOLEAN         reduce using rule 101 (addVariable -> .)
    CHAR            reduce using rule 101 (addVariable -> .)
    STRING          reduce using rule 101 (addVariable -> .)
    FLOAT           reduce using rule 101 (addVariable -> .)
    VOID            reduce using rule 101 (addVariable -> .)
    END             reduce using rule 101 (addVariable -> .)
    IF              reduce using rule 101 (addVariable -> .)
    ID              reduce using rule 101 (addVariable -> .)
    PRINT           reduce using rule 101 (addVariable -> .)
    WHILE           reduce using rule 101 (addVariable -> .)
    FOR             reduce using rule 101 (addVariable -> .)
    LPAR            reduce using rule 101 (addVariable -> .)
    LBRA            reduce using rule 101 (addVariable -> .)
    ICTE            reduce using rule 101 (addVariable -> .)
    FCTE            reduce using rule 101 (addVariable -> .)
    RETURN          reduce using rule 101 (addVariable -> .)
    ELSE            reduce using rule 101 (addVariable -> .)

    addVariable                    shift and go to state 45

state 36

    (22) DATA_TIPOS -> INT addDataType .

    ID              reduce using rule 22 (DATA_TIPOS -> INT addDataType .)
    LBRA            reduce using rule 22 (DATA_TIPOS -> INT addDataType .)


state 37

    (26) DATA_TIPOS -> FLOAT addDataType .

    ID              reduce using rule 26 (DATA_TIPOS -> FLOAT addDataType .)
    LBRA            reduce using rule 26 (DATA_TIPOS -> FLOAT addDataType .)


state 38

    (23) DATA_TIPOS -> BOOLEAN addDataType .

    ID              reduce using rule 23 (DATA_TIPOS -> BOOLEAN addDataType .)
    LBRA            reduce using rule 23 (DATA_TIPOS -> BOOLEAN addDataType .)


state 39

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS . ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope

    ID              shift and go to state 46


state 40

    (38) PRINCIPAL -> MAIN LPAR . RPAR changeLocalScope BLOQUE END

    RPAR            shift and go to state 47


state 41

    (27) DATA_TIPOS -> VOID addDataType saveVoid .

    ID              reduce using rule 27 (DATA_TIPOS -> VOID addDataType saveVoid .)
    LBRA            reduce using rule 27 (DATA_TIPOS -> VOID addDataType saveVoid .)


state 42

    (10) VART -> DRAW ID EQUAL . NEW DRAWI LPAR RPAR

    NEW             shift and go to state 48


state 43

    (32) ARR -> DATA_TIPOS LBRA ICTE . RBRA

    RBRA            shift and go to state 49


state 44

    (11) VART -> DATA_TIPOS ID addVariable .

    IF              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ID              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    DRAW            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    PRINT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    WHILE           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FOR             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    INT             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    BOOLEAN         reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    CHAR            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    STRING          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FLOAT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    VOID            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LPAR            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LBRA            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ICTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FCTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ELSE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    END             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    RETURN          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)


state 45

    (12) VART -> ARR ID addVariable .

    IF              reduce using rule 12 (VART -> ARR ID addVariable .)
    ID              reduce using rule 12 (VART -> ARR ID addVariable .)
    DRAW            reduce using rule 12 (VART -> ARR ID addVariable .)
    PRINT           reduce using rule 12 (VART -> ARR ID addVariable .)
    WHILE           reduce using rule 12 (VART -> ARR ID addVariable .)
    FOR             reduce using rule 12 (VART -> ARR ID addVariable .)
    INT             reduce using rule 12 (VART -> ARR ID addVariable .)
    BOOLEAN         reduce using rule 12 (VART -> ARR ID addVariable .)
    CHAR            reduce using rule 12 (VART -> ARR ID addVariable .)
    STRING          reduce using rule 12 (VART -> ARR ID addVariable .)
    FLOAT           reduce using rule 12 (VART -> ARR ID addVariable .)
    VOID            reduce using rule 12 (VART -> ARR ID addVariable .)
    LPAR            reduce using rule 12 (VART -> ARR ID addVariable .)
    LBRA            reduce using rule 12 (VART -> ARR ID addVariable .)
    ICTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    FCTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    ELSE            reduce using rule 12 (VART -> ARR ID addVariable .)
    END             reduce using rule 12 (VART -> ARR ID addVariable .)
    RETURN          reduce using rule 12 (VART -> ARR ID addVariable .)


state 46

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID . saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope
    (103) saveFunc -> .

    LPAR            reduce using rule 103 (saveFunc -> .)

    saveFunc                       shift and go to state 50

state 47

    (38) PRINCIPAL -> MAIN LPAR RPAR . changeLocalScope BLOQUE END
    (99) changeLocalScope -> . empty
    (1) empty -> .

    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)

    changeLocalScope               shift and go to state 51
    empty                          shift and go to state 52

state 48

    (10) VART -> DRAW ID EQUAL NEW . DRAWI LPAR RPAR

    DRAWI           shift and go to state 53


state 49

    (32) ARR -> DATA_TIPOS LBRA ICTE RBRA .

    ID              reduce using rule 32 (ARR -> DATA_TIPOS LBRA ICTE RBRA .)


state 50

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc . VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope
    (78) VAR_FUN -> . LPAR VAR_FUNP RPAR

    LPAR            shift and go to state 54

    VAR_FUN                        shift and go to state 55

state 51

    (38) PRINCIPAL -> MAIN LPAR RPAR changeLocalScope . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (77) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (66) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (55) EXT -> . EXP EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    DRAW            shift and go to state 15
    PRINT           shift and go to state 61
    WHILE           shift and go to state 80
    FOR             shift and go to state 65
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VART                           shift and go to state 69
    CICLO                          shift and go to state 57
    EXPRE                          shift and go to state 58
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    EXP                            shift and go to state 60
    LLAMADA_FUNCION                shift and go to state 62
    ESTATUTO                       shift and go to state 64
    TERMINO                        shift and go to state 66
    FAC                            shift and go to state 78
    empty                          shift and go to state 67
    WHILEF                         shift and go to state 68
    DATA_TIPOS                     shift and go to state 17
    FORZ                           shift and go to state 70
    CONDICION                      shift and go to state 71
    IMPRIMIR                       shift and go to state 73
    BLOQUE                         shift and go to state 74
    ARR                            shift and go to state 18
    ACCION                         shift and go to state 79

state 52

    (99) changeLocalScope -> empty .

    IF              reduce using rule 99 (changeLocalScope -> empty .)
    ID              reduce using rule 99 (changeLocalScope -> empty .)
    DRAW            reduce using rule 99 (changeLocalScope -> empty .)
    PRINT           reduce using rule 99 (changeLocalScope -> empty .)
    WHILE           reduce using rule 99 (changeLocalScope -> empty .)
    FOR             reduce using rule 99 (changeLocalScope -> empty .)
    INT             reduce using rule 99 (changeLocalScope -> empty .)
    BOOLEAN         reduce using rule 99 (changeLocalScope -> empty .)
    CHAR            reduce using rule 99 (changeLocalScope -> empty .)
    STRING          reduce using rule 99 (changeLocalScope -> empty .)
    FLOAT           reduce using rule 99 (changeLocalScope -> empty .)
    VOID            reduce using rule 99 (changeLocalScope -> empty .)
    LPAR            reduce using rule 99 (changeLocalScope -> empty .)
    LBRA            reduce using rule 99 (changeLocalScope -> empty .)
    ICTE            reduce using rule 99 (changeLocalScope -> empty .)
    FCTE            reduce using rule 99 (changeLocalScope -> empty .)
    END             reduce using rule 99 (changeLocalScope -> empty .)


state 53

    (10) VART -> DRAW ID EQUAL NEW DRAWI . LPAR RPAR

    LPAR            shift and go to state 82


state 54

    (78) VAR_FUN -> LPAR . VAR_FUNP RPAR
    (79) VAR_FUNP -> . DATA_TIPOS ID addArg VAR_FUNZ
    (80) VAR_FUNP -> . empty
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (1) empty -> .

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    DATA_TIPOS                     shift and go to state 83
    VAR_FUNP                       shift and go to state 84
    empty                          shift and go to state 85

state 55

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN . BLOQUE RETURN EXPRE END changeGlobalScope
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (77) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (66) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (55) EXT -> . EXP EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    RETURN          reduce using rule 1 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    DRAW            shift and go to state 15
    PRINT           shift and go to state 61
    WHILE           shift and go to state 80
    FOR             shift and go to state 65
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VART                           shift and go to state 69
    CICLO                          shift and go to state 57
    EXPRE                          shift and go to state 58
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    EXP                            shift and go to state 60
    BLOQUE                         shift and go to state 86
    LLAMADA_FUNCION                shift and go to state 62
    ESTATUTO                       shift and go to state 64
    TERMINO                        shift and go to state 66
    FAC                            shift and go to state 78
    empty                          shift and go to state 67
    WHILEF                         shift and go to state 68
    DATA_TIPOS                     shift and go to state 17
    FORZ                           shift and go to state 70
    CONDICION                      shift and go to state 71
    IMPRIMIR                       shift and go to state 73
    ARR                            shift and go to state 18
    ACCION                         shift and go to state 79

state 56

    (69) FAC -> LPAR . EXPRE RPAR
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 87
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 57

    (15) ESTATUTO -> CICLO .

    IF              reduce using rule 15 (ESTATUTO -> CICLO .)
    ID              reduce using rule 15 (ESTATUTO -> CICLO .)
    DRAW            reduce using rule 15 (ESTATUTO -> CICLO .)
    PRINT           reduce using rule 15 (ESTATUTO -> CICLO .)
    WHILE           reduce using rule 15 (ESTATUTO -> CICLO .)
    FOR             reduce using rule 15 (ESTATUTO -> CICLO .)
    INT             reduce using rule 15 (ESTATUTO -> CICLO .)
    BOOLEAN         reduce using rule 15 (ESTATUTO -> CICLO .)
    CHAR            reduce using rule 15 (ESTATUTO -> CICLO .)
    STRING          reduce using rule 15 (ESTATUTO -> CICLO .)
    FLOAT           reduce using rule 15 (ESTATUTO -> CICLO .)
    VOID            reduce using rule 15 (ESTATUTO -> CICLO .)
    LPAR            reduce using rule 15 (ESTATUTO -> CICLO .)
    LBRA            reduce using rule 15 (ESTATUTO -> CICLO .)
    ICTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    FCTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    ELSE            reduce using rule 15 (ESTATUTO -> CICLO .)
    END             reduce using rule 15 (ESTATUTO -> CICLO .)
    RETURN          reduce using rule 15 (ESTATUTO -> CICLO .)


state 58

    (13) ESTATUTO -> EXPRE .

    IF              reduce using rule 13 (ESTATUTO -> EXPRE .)
    ID              reduce using rule 13 (ESTATUTO -> EXPRE .)
    DRAW            reduce using rule 13 (ESTATUTO -> EXPRE .)
    PRINT           reduce using rule 13 (ESTATUTO -> EXPRE .)
    WHILE           reduce using rule 13 (ESTATUTO -> EXPRE .)
    FOR             reduce using rule 13 (ESTATUTO -> EXPRE .)
    INT             reduce using rule 13 (ESTATUTO -> EXPRE .)
    BOOLEAN         reduce using rule 13 (ESTATUTO -> EXPRE .)
    CHAR            reduce using rule 13 (ESTATUTO -> EXPRE .)
    STRING          reduce using rule 13 (ESTATUTO -> EXPRE .)
    FLOAT           reduce using rule 13 (ESTATUTO -> EXPRE .)
    VOID            reduce using rule 13 (ESTATUTO -> EXPRE .)
    LPAR            reduce using rule 13 (ESTATUTO -> EXPRE .)
    LBRA            reduce using rule 13 (ESTATUTO -> EXPRE .)
    ICTE            reduce using rule 13 (ESTATUTO -> EXPRE .)
    FCTE            reduce using rule 13 (ESTATUTO -> EXPRE .)
    ELSE            reduce using rule 13 (ESTATUTO -> EXPRE .)
    END             reduce using rule 13 (ESTATUTO -> EXPRE .)
    RETURN          reduce using rule 13 (ESTATUTO -> EXPRE .)


state 59

    (52) EXPRE -> EXT . EXPREZ
    (53) EXPREZ -> . EQUAL EXT
    (54) EXPREZ -> . empty
    (1) empty -> .

    EQUAL           shift and go to state 91
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    EXPREZ                         shift and go to state 89
    empty                          shift and go to state 90

state 60

    (55) EXT -> EXP . EXT_W_RELOP
    (56) EXT_W_RELOP -> . RELOP EXT
    (57) EXT_W_RELOP -> . empty
    (46) RELOP -> . LESSTH
    (47) RELOP -> . GREATERTH
    (48) RELOP -> . SEQUAL
    (49) RELOP -> . NOTEQ
    (50) RELOP -> . LESSEQTH
    (51) RELOP -> . GREATEREQTH
    (1) empty -> .

    LESSTH          shift and go to state 99
    GREATERTH       shift and go to state 98
    SEQUAL          shift and go to state 94
    NOTEQ           shift and go to state 95
    LESSEQTH        shift and go to state 92
    GREATEREQTH     shift and go to state 97
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    EXT_W_RELOP                    shift and go to state 96
    empty                          shift and go to state 100
    RELOP                          shift and go to state 93

state 61

    (66) IMPRIMIR -> PRINT . LBRA IMPRIMIRZ RBRA

    LBRA            shift and go to state 101


state 62

    (18) ESTATUTO -> LLAMADA_FUNCION .

    IF              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ID              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    DRAW            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    PRINT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    WHILE           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FOR             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    INT             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    BOOLEAN         reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    CHAR            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    STRING          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FLOAT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    VOID            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LPAR            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LBRA            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ICTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FCTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ELSE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    END             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    RETURN          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)


state 63

    (71) FAC -> LBRA . EXPRE RPAR
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 102
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 64

    (20) BLOQUE -> ESTATUTO . BLOQUE
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (77) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (66) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (55) EXT -> . EXP EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    DRAW            shift and go to state 15
    PRINT           shift and go to state 61
    WHILE           shift and go to state 80
    FOR             shift and go to state 65
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VART                           shift and go to state 69
    CICLO                          shift and go to state 57
    EXPRE                          shift and go to state 58
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    EXP                            shift and go to state 60
    LLAMADA_FUNCION                shift and go to state 62
    ESTATUTO                       shift and go to state 64
    TERMINO                        shift and go to state 66
    FAC                            shift and go to state 78
    empty                          shift and go to state 67
    WHILEF                         shift and go to state 68
    DATA_TIPOS                     shift and go to state 17
    FORZ                           shift and go to state 70
    IMPRIMIR                       shift and go to state 73
    BLOQUE                         shift and go to state 103
    ARR                            shift and go to state 18
    ACCION                         shift and go to state 79
    CONDICION                      shift and go to state 71

state 65

    (42) FORZ -> FOR . LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    LPAR            shift and go to state 104


state 66

    (58) EXP -> TERMINO . EXP_W_SIGN
    (59) EXP_W_SIGN -> . ASOP EXP
    (60) EXP_W_SIGN -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    ASOP                           shift and go to state 105
    empty                          shift and go to state 109
    EXP_W_SIGN                     shift and go to state 106

state 67

    (21) BLOQUE -> empty .

    END             reduce using rule 21 (BLOQUE -> empty .)
    RETURN          reduce using rule 21 (BLOQUE -> empty .)
    ELSE            reduce using rule 21 (BLOQUE -> empty .)


state 68

    (39) CICLO -> WHILEF .

    IF              reduce using rule 39 (CICLO -> WHILEF .)
    ID              reduce using rule 39 (CICLO -> WHILEF .)
    DRAW            reduce using rule 39 (CICLO -> WHILEF .)
    PRINT           reduce using rule 39 (CICLO -> WHILEF .)
    WHILE           reduce using rule 39 (CICLO -> WHILEF .)
    FOR             reduce using rule 39 (CICLO -> WHILEF .)
    INT             reduce using rule 39 (CICLO -> WHILEF .)
    BOOLEAN         reduce using rule 39 (CICLO -> WHILEF .)
    CHAR            reduce using rule 39 (CICLO -> WHILEF .)
    STRING          reduce using rule 39 (CICLO -> WHILEF .)
    FLOAT           reduce using rule 39 (CICLO -> WHILEF .)
    VOID            reduce using rule 39 (CICLO -> WHILEF .)
    LPAR            reduce using rule 39 (CICLO -> WHILEF .)
    LBRA            reduce using rule 39 (CICLO -> WHILEF .)
    ICTE            reduce using rule 39 (CICLO -> WHILEF .)
    FCTE            reduce using rule 39 (CICLO -> WHILEF .)
    RETURN          reduce using rule 39 (CICLO -> WHILEF .)
    END             reduce using rule 39 (CICLO -> WHILEF .)
    ELSE            reduce using rule 39 (CICLO -> WHILEF .)


state 69

    (17) ESTATUTO -> VART .

    IF              reduce using rule 17 (ESTATUTO -> VART .)
    ID              reduce using rule 17 (ESTATUTO -> VART .)
    DRAW            reduce using rule 17 (ESTATUTO -> VART .)
    PRINT           reduce using rule 17 (ESTATUTO -> VART .)
    WHILE           reduce using rule 17 (ESTATUTO -> VART .)
    FOR             reduce using rule 17 (ESTATUTO -> VART .)
    INT             reduce using rule 17 (ESTATUTO -> VART .)
    BOOLEAN         reduce using rule 17 (ESTATUTO -> VART .)
    CHAR            reduce using rule 17 (ESTATUTO -> VART .)
    STRING          reduce using rule 17 (ESTATUTO -> VART .)
    FLOAT           reduce using rule 17 (ESTATUTO -> VART .)
    VOID            reduce using rule 17 (ESTATUTO -> VART .)
    LPAR            reduce using rule 17 (ESTATUTO -> VART .)
    LBRA            reduce using rule 17 (ESTATUTO -> VART .)
    ICTE            reduce using rule 17 (ESTATUTO -> VART .)
    FCTE            reduce using rule 17 (ESTATUTO -> VART .)
    ELSE            reduce using rule 17 (ESTATUTO -> VART .)
    END             reduce using rule 17 (ESTATUTO -> VART .)
    RETURN          reduce using rule 17 (ESTATUTO -> VART .)


state 70

    (40) CICLO -> FORZ .

    IF              reduce using rule 40 (CICLO -> FORZ .)
    ID              reduce using rule 40 (CICLO -> FORZ .)
    DRAW            reduce using rule 40 (CICLO -> FORZ .)
    PRINT           reduce using rule 40 (CICLO -> FORZ .)
    WHILE           reduce using rule 40 (CICLO -> FORZ .)
    FOR             reduce using rule 40 (CICLO -> FORZ .)
    INT             reduce using rule 40 (CICLO -> FORZ .)
    BOOLEAN         reduce using rule 40 (CICLO -> FORZ .)
    CHAR            reduce using rule 40 (CICLO -> FORZ .)
    STRING          reduce using rule 40 (CICLO -> FORZ .)
    FLOAT           reduce using rule 40 (CICLO -> FORZ .)
    VOID            reduce using rule 40 (CICLO -> FORZ .)
    LPAR            reduce using rule 40 (CICLO -> FORZ .)
    LBRA            reduce using rule 40 (CICLO -> FORZ .)
    ICTE            reduce using rule 40 (CICLO -> FORZ .)
    FCTE            reduce using rule 40 (CICLO -> FORZ .)
    RETURN          reduce using rule 40 (CICLO -> FORZ .)
    END             reduce using rule 40 (CICLO -> FORZ .)
    ELSE            reduce using rule 40 (CICLO -> FORZ .)


state 71

    (14) ESTATUTO -> CONDICION .

    IF              reduce using rule 14 (ESTATUTO -> CONDICION .)
    ID              reduce using rule 14 (ESTATUTO -> CONDICION .)
    DRAW            reduce using rule 14 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 14 (ESTATUTO -> CONDICION .)
    INT             reduce using rule 14 (ESTATUTO -> CONDICION .)
    BOOLEAN         reduce using rule 14 (ESTATUTO -> CONDICION .)
    CHAR            reduce using rule 14 (ESTATUTO -> CONDICION .)
    STRING          reduce using rule 14 (ESTATUTO -> CONDICION .)
    FLOAT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    VOID            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LPAR            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LBRA            reduce using rule 14 (ESTATUTO -> CONDICION .)
    ICTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    FCTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    ELSE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    END             reduce using rule 14 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 14 (ESTATUTO -> CONDICION .)


state 72

    (64) VAR_CTE -> ICTE .

    MULT            reduce using rule 64 (VAR_CTE -> ICTE .)
    DIVI            reduce using rule 64 (VAR_CTE -> ICTE .)
    PLUS            reduce using rule 64 (VAR_CTE -> ICTE .)
    MINUS           reduce using rule 64 (VAR_CTE -> ICTE .)
    LESSTH          reduce using rule 64 (VAR_CTE -> ICTE .)
    GREATERTH       reduce using rule 64 (VAR_CTE -> ICTE .)
    SEQUAL          reduce using rule 64 (VAR_CTE -> ICTE .)
    NOTEQ           reduce using rule 64 (VAR_CTE -> ICTE .)
    LESSEQTH        reduce using rule 64 (VAR_CTE -> ICTE .)
    GREATEREQTH     reduce using rule 64 (VAR_CTE -> ICTE .)
    EQUAL           reduce using rule 64 (VAR_CTE -> ICTE .)
    RPAR            reduce using rule 64 (VAR_CTE -> ICTE .)
    RBRA            reduce using rule 64 (VAR_CTE -> ICTE .)
    COMMA           reduce using rule 64 (VAR_CTE -> ICTE .)
    LPAR            reduce using rule 64 (VAR_CTE -> ICTE .)
    LBRA            reduce using rule 64 (VAR_CTE -> ICTE .)
    ID              reduce using rule 64 (VAR_CTE -> ICTE .)
    ICTE            reduce using rule 64 (VAR_CTE -> ICTE .)
    FCTE            reduce using rule 64 (VAR_CTE -> ICTE .)
    IF              reduce using rule 64 (VAR_CTE -> ICTE .)
    DRAW            reduce using rule 64 (VAR_CTE -> ICTE .)
    PRINT           reduce using rule 64 (VAR_CTE -> ICTE .)
    WHILE           reduce using rule 64 (VAR_CTE -> ICTE .)
    FOR             reduce using rule 64 (VAR_CTE -> ICTE .)
    INT             reduce using rule 64 (VAR_CTE -> ICTE .)
    BOOLEAN         reduce using rule 64 (VAR_CTE -> ICTE .)
    CHAR            reduce using rule 64 (VAR_CTE -> ICTE .)
    STRING          reduce using rule 64 (VAR_CTE -> ICTE .)
    FLOAT           reduce using rule 64 (VAR_CTE -> ICTE .)
    VOID            reduce using rule 64 (VAR_CTE -> ICTE .)
    END             reduce using rule 64 (VAR_CTE -> ICTE .)
    RETURN          reduce using rule 64 (VAR_CTE -> ICTE .)
    ELSE            reduce using rule 64 (VAR_CTE -> ICTE .)


state 73

    (19) ESTATUTO -> IMPRIMIR .

    IF              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ID              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    DRAW            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    PRINT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    WHILE           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FOR             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    INT             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    BOOLEAN         reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    CHAR            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    STRING          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FLOAT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    VOID            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LPAR            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LBRA            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ICTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FCTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ELSE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    END             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    RETURN          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)


state 74

    (38) PRINCIPAL -> MAIN LPAR RPAR changeLocalScope BLOQUE . END

    END             shift and go to state 110


state 75

    (70) FAC -> VAR_CTE .

    MULT            reduce using rule 70 (FAC -> VAR_CTE .)
    DIVI            reduce using rule 70 (FAC -> VAR_CTE .)
    PLUS            reduce using rule 70 (FAC -> VAR_CTE .)
    MINUS           reduce using rule 70 (FAC -> VAR_CTE .)
    LESSTH          reduce using rule 70 (FAC -> VAR_CTE .)
    GREATERTH       reduce using rule 70 (FAC -> VAR_CTE .)
    SEQUAL          reduce using rule 70 (FAC -> VAR_CTE .)
    NOTEQ           reduce using rule 70 (FAC -> VAR_CTE .)
    LESSEQTH        reduce using rule 70 (FAC -> VAR_CTE .)
    GREATEREQTH     reduce using rule 70 (FAC -> VAR_CTE .)
    EQUAL           reduce using rule 70 (FAC -> VAR_CTE .)
    RPAR            reduce using rule 70 (FAC -> VAR_CTE .)
    IF              reduce using rule 70 (FAC -> VAR_CTE .)
    ID              reduce using rule 70 (FAC -> VAR_CTE .)
    DRAW            reduce using rule 70 (FAC -> VAR_CTE .)
    PRINT           reduce using rule 70 (FAC -> VAR_CTE .)
    WHILE           reduce using rule 70 (FAC -> VAR_CTE .)
    FOR             reduce using rule 70 (FAC -> VAR_CTE .)
    INT             reduce using rule 70 (FAC -> VAR_CTE .)
    BOOLEAN         reduce using rule 70 (FAC -> VAR_CTE .)
    CHAR            reduce using rule 70 (FAC -> VAR_CTE .)
    STRING          reduce using rule 70 (FAC -> VAR_CTE .)
    FLOAT           reduce using rule 70 (FAC -> VAR_CTE .)
    VOID            reduce using rule 70 (FAC -> VAR_CTE .)
    LPAR            reduce using rule 70 (FAC -> VAR_CTE .)
    LBRA            reduce using rule 70 (FAC -> VAR_CTE .)
    ICTE            reduce using rule 70 (FAC -> VAR_CTE .)
    FCTE            reduce using rule 70 (FAC -> VAR_CTE .)
    RETURN          reduce using rule 70 (FAC -> VAR_CTE .)
    END             reduce using rule 70 (FAC -> VAR_CTE .)
    ELSE            reduce using rule 70 (FAC -> VAR_CTE .)
    RBRA            reduce using rule 70 (FAC -> VAR_CTE .)
    COMMA           reduce using rule 70 (FAC -> VAR_CTE .)


state 76

    (77) ACCION -> ID . POINT DIBUJA LPAR VAR_CTE RPAR
    (33) LLAMADA_FUNCION -> ID . LPAR LLAMADA_FUNCIONP RPAR
    (72) FAC -> ID . FACT
    (73) FACT -> . LBRA EXPRE RBRA
    (74) FACT -> . LPAR EXPRE RPAR
    (75) FACT -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for LBRA resolved as shift
    POINT           shift and go to state 113
    LPAR            shift and go to state 111
    LBRA            shift and go to state 112
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

  ! LPAR            [ reduce using rule 1 (empty -> .) ]
  ! LBRA            [ reduce using rule 1 (empty -> .) ]

    FACT                           shift and go to state 115
    empty                          shift and go to state 114

state 77

    (43) CONDICION -> IF . LPAR EXPRE RPAR BLOQUE CONDICIONP END

    LPAR            shift and go to state 116


state 78

    (61) TERMINO -> FAC . TERMINO_W_SIGN
    (62) TERMINO_W_SIGN -> . MDOP TERMINO
    (63) TERMINO_W_SIGN -> . empty
    (30) MDOP -> . MULT
    (31) MDOP -> . DIVI
    (1) empty -> .

    MULT            shift and go to state 120
    DIVI            shift and go to state 117
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    empty                          shift and go to state 121
    MDOP                           shift and go to state 118
    TERMINO_W_SIGN                 shift and go to state 119

state 79

    (16) ESTATUTO -> ACCION .

    IF              reduce using rule 16 (ESTATUTO -> ACCION .)
    ID              reduce using rule 16 (ESTATUTO -> ACCION .)
    DRAW            reduce using rule 16 (ESTATUTO -> ACCION .)
    PRINT           reduce using rule 16 (ESTATUTO -> ACCION .)
    WHILE           reduce using rule 16 (ESTATUTO -> ACCION .)
    FOR             reduce using rule 16 (ESTATUTO -> ACCION .)
    INT             reduce using rule 16 (ESTATUTO -> ACCION .)
    BOOLEAN         reduce using rule 16 (ESTATUTO -> ACCION .)
    CHAR            reduce using rule 16 (ESTATUTO -> ACCION .)
    STRING          reduce using rule 16 (ESTATUTO -> ACCION .)
    FLOAT           reduce using rule 16 (ESTATUTO -> ACCION .)
    VOID            reduce using rule 16 (ESTATUTO -> ACCION .)
    LPAR            reduce using rule 16 (ESTATUTO -> ACCION .)
    LBRA            reduce using rule 16 (ESTATUTO -> ACCION .)
    ICTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    FCTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    ELSE            reduce using rule 16 (ESTATUTO -> ACCION .)
    END             reduce using rule 16 (ESTATUTO -> ACCION .)
    RETURN          reduce using rule 16 (ESTATUTO -> ACCION .)


state 80

    (41) WHILEF -> WHILE . LPAR EXPRE RPAR BLOQUE END

    LPAR            shift and go to state 122


state 81

    (65) VAR_CTE -> FCTE .

    MULT            reduce using rule 65 (VAR_CTE -> FCTE .)
    DIVI            reduce using rule 65 (VAR_CTE -> FCTE .)
    PLUS            reduce using rule 65 (VAR_CTE -> FCTE .)
    MINUS           reduce using rule 65 (VAR_CTE -> FCTE .)
    LESSTH          reduce using rule 65 (VAR_CTE -> FCTE .)
    GREATERTH       reduce using rule 65 (VAR_CTE -> FCTE .)
    SEQUAL          reduce using rule 65 (VAR_CTE -> FCTE .)
    NOTEQ           reduce using rule 65 (VAR_CTE -> FCTE .)
    LESSEQTH        reduce using rule 65 (VAR_CTE -> FCTE .)
    GREATEREQTH     reduce using rule 65 (VAR_CTE -> FCTE .)
    EQUAL           reduce using rule 65 (VAR_CTE -> FCTE .)
    RPAR            reduce using rule 65 (VAR_CTE -> FCTE .)
    RBRA            reduce using rule 65 (VAR_CTE -> FCTE .)
    COMMA           reduce using rule 65 (VAR_CTE -> FCTE .)
    LPAR            reduce using rule 65 (VAR_CTE -> FCTE .)
    LBRA            reduce using rule 65 (VAR_CTE -> FCTE .)
    ID              reduce using rule 65 (VAR_CTE -> FCTE .)
    ICTE            reduce using rule 65 (VAR_CTE -> FCTE .)
    FCTE            reduce using rule 65 (VAR_CTE -> FCTE .)
    IF              reduce using rule 65 (VAR_CTE -> FCTE .)
    DRAW            reduce using rule 65 (VAR_CTE -> FCTE .)
    PRINT           reduce using rule 65 (VAR_CTE -> FCTE .)
    WHILE           reduce using rule 65 (VAR_CTE -> FCTE .)
    FOR             reduce using rule 65 (VAR_CTE -> FCTE .)
    INT             reduce using rule 65 (VAR_CTE -> FCTE .)
    BOOLEAN         reduce using rule 65 (VAR_CTE -> FCTE .)
    CHAR            reduce using rule 65 (VAR_CTE -> FCTE .)
    STRING          reduce using rule 65 (VAR_CTE -> FCTE .)
    FLOAT           reduce using rule 65 (VAR_CTE -> FCTE .)
    VOID            reduce using rule 65 (VAR_CTE -> FCTE .)
    END             reduce using rule 65 (VAR_CTE -> FCTE .)
    RETURN          reduce using rule 65 (VAR_CTE -> FCTE .)
    ELSE            reduce using rule 65 (VAR_CTE -> FCTE .)


state 82

    (10) VART -> DRAW ID EQUAL NEW DRAWI LPAR . RPAR

    RPAR            shift and go to state 123


state 83

    (79) VAR_FUNP -> DATA_TIPOS . ID addArg VAR_FUNZ

    ID              shift and go to state 124


state 84

    (78) VAR_FUN -> LPAR VAR_FUNP . RPAR

    RPAR            shift and go to state 125


state 85

    (80) VAR_FUNP -> empty .

    RPAR            reduce using rule 80 (VAR_FUNP -> empty .)


state 86

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE . RETURN EXPRE END changeGlobalScope

    RETURN          shift and go to state 126


state 87

    (69) FAC -> LPAR EXPRE . RPAR

    RPAR            shift and go to state 127


state 88

    (72) FAC -> ID . FACT
    (73) FACT -> . LBRA EXPRE RBRA
    (74) FACT -> . LPAR EXPRE RPAR
    (75) FACT -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for LBRA resolved as shift
    LBRA            shift and go to state 112
    LPAR            shift and go to state 128
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

  ! LPAR            [ reduce using rule 1 (empty -> .) ]
  ! LBRA            [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 114
    FACT                           shift and go to state 115

state 89

    (52) EXPRE -> EXT EXPREZ .

    RPAR            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    IF              reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    ID              reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    DRAW            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    PRINT           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    WHILE           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    FOR             reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    INT             reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    BOOLEAN         reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    CHAR            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    STRING          reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    FLOAT           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    VOID            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    LPAR            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    LBRA            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    ICTE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    FCTE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    END             reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    COMMA           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    RETURN          reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    RBRA            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    ELSE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)


state 90

    (54) EXPREZ -> empty .

    IF              reduce using rule 54 (EXPREZ -> empty .)
    ID              reduce using rule 54 (EXPREZ -> empty .)
    DRAW            reduce using rule 54 (EXPREZ -> empty .)
    PRINT           reduce using rule 54 (EXPREZ -> empty .)
    WHILE           reduce using rule 54 (EXPREZ -> empty .)
    FOR             reduce using rule 54 (EXPREZ -> empty .)
    INT             reduce using rule 54 (EXPREZ -> empty .)
    BOOLEAN         reduce using rule 54 (EXPREZ -> empty .)
    CHAR            reduce using rule 54 (EXPREZ -> empty .)
    STRING          reduce using rule 54 (EXPREZ -> empty .)
    FLOAT           reduce using rule 54 (EXPREZ -> empty .)
    VOID            reduce using rule 54 (EXPREZ -> empty .)
    LPAR            reduce using rule 54 (EXPREZ -> empty .)
    LBRA            reduce using rule 54 (EXPREZ -> empty .)
    ICTE            reduce using rule 54 (EXPREZ -> empty .)
    FCTE            reduce using rule 54 (EXPREZ -> empty .)
    END             reduce using rule 54 (EXPREZ -> empty .)
    RETURN          reduce using rule 54 (EXPREZ -> empty .)
    RPAR            reduce using rule 54 (EXPREZ -> empty .)
    ELSE            reduce using rule 54 (EXPREZ -> empty .)
    RBRA            reduce using rule 54 (EXPREZ -> empty .)
    COMMA           reduce using rule 54 (EXPREZ -> empty .)


state 91

    (53) EXPREZ -> EQUAL . EXT
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 129
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 92

    (50) RELOP -> LESSEQTH .

    LPAR            reduce using rule 50 (RELOP -> LESSEQTH .)
    LBRA            reduce using rule 50 (RELOP -> LESSEQTH .)
    ID              reduce using rule 50 (RELOP -> LESSEQTH .)
    ICTE            reduce using rule 50 (RELOP -> LESSEQTH .)
    FCTE            reduce using rule 50 (RELOP -> LESSEQTH .)


state 93

    (56) EXT_W_RELOP -> RELOP . EXT
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 130
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 94

    (48) RELOP -> SEQUAL .

    LPAR            reduce using rule 48 (RELOP -> SEQUAL .)
    LBRA            reduce using rule 48 (RELOP -> SEQUAL .)
    ID              reduce using rule 48 (RELOP -> SEQUAL .)
    ICTE            reduce using rule 48 (RELOP -> SEQUAL .)
    FCTE            reduce using rule 48 (RELOP -> SEQUAL .)


state 95

    (49) RELOP -> NOTEQ .

    LPAR            reduce using rule 49 (RELOP -> NOTEQ .)
    LBRA            reduce using rule 49 (RELOP -> NOTEQ .)
    ID              reduce using rule 49 (RELOP -> NOTEQ .)
    ICTE            reduce using rule 49 (RELOP -> NOTEQ .)
    FCTE            reduce using rule 49 (RELOP -> NOTEQ .)


state 96

    (55) EXT -> EXP EXT_W_RELOP .

    EQUAL           reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    IF              reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    ID              reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    DRAW            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    PRINT           reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    WHILE           reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    FOR             reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    INT             reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    BOOLEAN         reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    CHAR            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    STRING          reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    FLOAT           reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    VOID            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    LPAR            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    LBRA            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    ICTE            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    FCTE            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    END             reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    RETURN          reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    RPAR            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    ELSE            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    RBRA            reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)
    COMMA           reduce using rule 55 (EXT -> EXP EXT_W_RELOP .)


state 97

    (51) RELOP -> GREATEREQTH .

    LPAR            reduce using rule 51 (RELOP -> GREATEREQTH .)
    LBRA            reduce using rule 51 (RELOP -> GREATEREQTH .)
    ID              reduce using rule 51 (RELOP -> GREATEREQTH .)
    ICTE            reduce using rule 51 (RELOP -> GREATEREQTH .)
    FCTE            reduce using rule 51 (RELOP -> GREATEREQTH .)


state 98

    (47) RELOP -> GREATERTH .

    LPAR            reduce using rule 47 (RELOP -> GREATERTH .)
    LBRA            reduce using rule 47 (RELOP -> GREATERTH .)
    ID              reduce using rule 47 (RELOP -> GREATERTH .)
    ICTE            reduce using rule 47 (RELOP -> GREATERTH .)
    FCTE            reduce using rule 47 (RELOP -> GREATERTH .)


state 99

    (46) RELOP -> LESSTH .

    LPAR            reduce using rule 46 (RELOP -> LESSTH .)
    LBRA            reduce using rule 46 (RELOP -> LESSTH .)
    ID              reduce using rule 46 (RELOP -> LESSTH .)
    ICTE            reduce using rule 46 (RELOP -> LESSTH .)
    FCTE            reduce using rule 46 (RELOP -> LESSTH .)


state 100

    (57) EXT_W_RELOP -> empty .

    EQUAL           reduce using rule 57 (EXT_W_RELOP -> empty .)
    IF              reduce using rule 57 (EXT_W_RELOP -> empty .)
    ID              reduce using rule 57 (EXT_W_RELOP -> empty .)
    DRAW            reduce using rule 57 (EXT_W_RELOP -> empty .)
    PRINT           reduce using rule 57 (EXT_W_RELOP -> empty .)
    WHILE           reduce using rule 57 (EXT_W_RELOP -> empty .)
    FOR             reduce using rule 57 (EXT_W_RELOP -> empty .)
    INT             reduce using rule 57 (EXT_W_RELOP -> empty .)
    BOOLEAN         reduce using rule 57 (EXT_W_RELOP -> empty .)
    CHAR            reduce using rule 57 (EXT_W_RELOP -> empty .)
    STRING          reduce using rule 57 (EXT_W_RELOP -> empty .)
    FLOAT           reduce using rule 57 (EXT_W_RELOP -> empty .)
    VOID            reduce using rule 57 (EXT_W_RELOP -> empty .)
    LPAR            reduce using rule 57 (EXT_W_RELOP -> empty .)
    LBRA            reduce using rule 57 (EXT_W_RELOP -> empty .)
    ICTE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    FCTE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    END             reduce using rule 57 (EXT_W_RELOP -> empty .)
    RETURN          reduce using rule 57 (EXT_W_RELOP -> empty .)
    RPAR            reduce using rule 57 (EXT_W_RELOP -> empty .)
    ELSE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    RBRA            reduce using rule 57 (EXT_W_RELOP -> empty .)
    COMMA           reduce using rule 57 (EXT_W_RELOP -> empty .)


state 101

    (66) IMPRIMIR -> PRINT LBRA . IMPRIMIRZ RBRA
    (67) IMPRIMIRZ -> . EXPRE
    (68) IMPRIMIRZ -> . SCTE
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    SCTE            shift and go to state 133
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 131
    IMPRIMIRZ                      shift and go to state 132
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 102

    (71) FAC -> LBRA EXPRE . RPAR

    RPAR            shift and go to state 134


state 103

    (20) BLOQUE -> ESTATUTO BLOQUE .

    END             reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUE .)
    RETURN          reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUE .)
    ELSE            reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUE .)


state 104

    (42) FORZ -> FOR LPAR . ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 135


state 105

    (59) EXP_W_SIGN -> ASOP . EXP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VAR_CTE                        shift and go to state 75
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 136
    FAC                            shift and go to state 78

state 106

    (58) EXP -> TERMINO EXP_W_SIGN .

    LESSTH          reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    GREATERTH       reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    SEQUAL          reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    NOTEQ           reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    LESSEQTH        reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    GREATEREQTH     reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    EQUAL           reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    IF              reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    ID              reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    DRAW            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    PRINT           reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    WHILE           reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    FOR             reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    INT             reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    BOOLEAN         reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    CHAR            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    STRING          reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    FLOAT           reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    VOID            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    LPAR            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    LBRA            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    ICTE            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    FCTE            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    ELSE            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    END             reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    RPAR            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    COMMA           reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    RETURN          reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)
    RBRA            reduce using rule 58 (EXP -> TERMINO EXP_W_SIGN .)


state 107

    (28) ASOP -> PLUS .

    LPAR            reduce using rule 28 (ASOP -> PLUS .)
    LBRA            reduce using rule 28 (ASOP -> PLUS .)
    ID              reduce using rule 28 (ASOP -> PLUS .)
    ICTE            reduce using rule 28 (ASOP -> PLUS .)
    FCTE            reduce using rule 28 (ASOP -> PLUS .)


state 108

    (29) ASOP -> MINUS .

    LPAR            reduce using rule 29 (ASOP -> MINUS .)
    LBRA            reduce using rule 29 (ASOP -> MINUS .)
    ID              reduce using rule 29 (ASOP -> MINUS .)
    ICTE            reduce using rule 29 (ASOP -> MINUS .)
    FCTE            reduce using rule 29 (ASOP -> MINUS .)


state 109

    (60) EXP_W_SIGN -> empty .

    LESSTH          reduce using rule 60 (EXP_W_SIGN -> empty .)
    GREATERTH       reduce using rule 60 (EXP_W_SIGN -> empty .)
    SEQUAL          reduce using rule 60 (EXP_W_SIGN -> empty .)
    NOTEQ           reduce using rule 60 (EXP_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 60 (EXP_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 60 (EXP_W_SIGN -> empty .)
    EQUAL           reduce using rule 60 (EXP_W_SIGN -> empty .)
    IF              reduce using rule 60 (EXP_W_SIGN -> empty .)
    ID              reduce using rule 60 (EXP_W_SIGN -> empty .)
    DRAW            reduce using rule 60 (EXP_W_SIGN -> empty .)
    PRINT           reduce using rule 60 (EXP_W_SIGN -> empty .)
    WHILE           reduce using rule 60 (EXP_W_SIGN -> empty .)
    FOR             reduce using rule 60 (EXP_W_SIGN -> empty .)
    INT             reduce using rule 60 (EXP_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 60 (EXP_W_SIGN -> empty .)
    CHAR            reduce using rule 60 (EXP_W_SIGN -> empty .)
    STRING          reduce using rule 60 (EXP_W_SIGN -> empty .)
    FLOAT           reduce using rule 60 (EXP_W_SIGN -> empty .)
    VOID            reduce using rule 60 (EXP_W_SIGN -> empty .)
    LPAR            reduce using rule 60 (EXP_W_SIGN -> empty .)
    LBRA            reduce using rule 60 (EXP_W_SIGN -> empty .)
    ICTE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    FCTE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    END             reduce using rule 60 (EXP_W_SIGN -> empty .)
    RETURN          reduce using rule 60 (EXP_W_SIGN -> empty .)
    RPAR            reduce using rule 60 (EXP_W_SIGN -> empty .)
    ELSE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    RBRA            reduce using rule 60 (EXP_W_SIGN -> empty .)
    COMMA           reduce using rule 60 (EXP_W_SIGN -> empty .)


state 110

    (38) PRINCIPAL -> MAIN LPAR RPAR changeLocalScope BLOQUE END .

    $end            reduce using rule 38 (PRINCIPAL -> MAIN LPAR RPAR changeLocalScope BLOQUE END .)


state 111

    (33) LLAMADA_FUNCION -> ID LPAR . LLAMADA_FUNCIONP RPAR
    (74) FACT -> LPAR . EXPRE RPAR
    (34) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (35) LLAMADA_FUNCIONP -> . empty
    (52) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 137
    LLAMADA_FUNCIONP               shift and go to state 138
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78
    empty                          shift and go to state 139

state 112

    (73) FACT -> LBRA . EXPRE RBRA
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 140
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 113

    (77) ACCION -> ID POINT . DIBUJA LPAR VAR_CTE RPAR
    (83) DIBUJA -> . DEFINIRPOSICION
    (84) DIBUJA -> . DEFINIRCOLOR
    (85) DIBUJA -> . DERECHO
    (86) DIBUJA -> . REVERSA
    (87) DIBUJA -> . IZQUIERDA
    (88) DIBUJA -> . DERECHA
    (89) DIBUJA -> . VELOCIDAD
    (90) DIBUJA -> . BORRAR
    (91) DIBUJA -> . MOSTRAR
    (92) DIBUJA -> . OCULTAR
    (93) DIBUJA -> . CIRCULO
    (94) DIBUJA -> . DEFINIRX
    (95) DIBUJA -> . DEFINIRY
    (96) DIBUJA -> . ARCO
    (97) DIBUJA -> . GROSOR

    DEFINIRPOSICION shift and go to state 147
    DEFINIRCOLOR    shift and go to state 156
    DERECHO         shift and go to state 151
    REVERSA         shift and go to state 145
    IZQUIERDA       shift and go to state 149
    DERECHA         shift and go to state 141
    VELOCIDAD       shift and go to state 144
    BORRAR          shift and go to state 154
    MOSTRAR         shift and go to state 148
    OCULTAR         shift and go to state 146
    CIRCULO         shift and go to state 143
    DEFINIRX        shift and go to state 153
    DEFINIRY        shift and go to state 152
    ARCO            shift and go to state 142
    GROSOR          shift and go to state 155

    DIBUJA                         shift and go to state 150

state 114

    (75) FACT -> empty .

    MULT            reduce using rule 75 (FACT -> empty .)
    DIVI            reduce using rule 75 (FACT -> empty .)
    PLUS            reduce using rule 75 (FACT -> empty .)
    MINUS           reduce using rule 75 (FACT -> empty .)
    LESSTH          reduce using rule 75 (FACT -> empty .)
    GREATERTH       reduce using rule 75 (FACT -> empty .)
    SEQUAL          reduce using rule 75 (FACT -> empty .)
    NOTEQ           reduce using rule 75 (FACT -> empty .)
    LESSEQTH        reduce using rule 75 (FACT -> empty .)
    GREATEREQTH     reduce using rule 75 (FACT -> empty .)
    EQUAL           reduce using rule 75 (FACT -> empty .)
    RPAR            reduce using rule 75 (FACT -> empty .)
    IF              reduce using rule 75 (FACT -> empty .)
    ID              reduce using rule 75 (FACT -> empty .)
    DRAW            reduce using rule 75 (FACT -> empty .)
    PRINT           reduce using rule 75 (FACT -> empty .)
    WHILE           reduce using rule 75 (FACT -> empty .)
    FOR             reduce using rule 75 (FACT -> empty .)
    INT             reduce using rule 75 (FACT -> empty .)
    BOOLEAN         reduce using rule 75 (FACT -> empty .)
    CHAR            reduce using rule 75 (FACT -> empty .)
    STRING          reduce using rule 75 (FACT -> empty .)
    FLOAT           reduce using rule 75 (FACT -> empty .)
    VOID            reduce using rule 75 (FACT -> empty .)
    LPAR            reduce using rule 75 (FACT -> empty .)
    LBRA            reduce using rule 75 (FACT -> empty .)
    ICTE            reduce using rule 75 (FACT -> empty .)
    FCTE            reduce using rule 75 (FACT -> empty .)
    END             reduce using rule 75 (FACT -> empty .)
    RETURN          reduce using rule 75 (FACT -> empty .)
    ELSE            reduce using rule 75 (FACT -> empty .)
    RBRA            reduce using rule 75 (FACT -> empty .)
    COMMA           reduce using rule 75 (FACT -> empty .)


state 115

    (72) FAC -> ID FACT .

    MULT            reduce using rule 72 (FAC -> ID FACT .)
    DIVI            reduce using rule 72 (FAC -> ID FACT .)
    PLUS            reduce using rule 72 (FAC -> ID FACT .)
    MINUS           reduce using rule 72 (FAC -> ID FACT .)
    LESSTH          reduce using rule 72 (FAC -> ID FACT .)
    GREATERTH       reduce using rule 72 (FAC -> ID FACT .)
    SEQUAL          reduce using rule 72 (FAC -> ID FACT .)
    NOTEQ           reduce using rule 72 (FAC -> ID FACT .)
    LESSEQTH        reduce using rule 72 (FAC -> ID FACT .)
    GREATEREQTH     reduce using rule 72 (FAC -> ID FACT .)
    EQUAL           reduce using rule 72 (FAC -> ID FACT .)
    RPAR            reduce using rule 72 (FAC -> ID FACT .)
    IF              reduce using rule 72 (FAC -> ID FACT .)
    ID              reduce using rule 72 (FAC -> ID FACT .)
    DRAW            reduce using rule 72 (FAC -> ID FACT .)
    PRINT           reduce using rule 72 (FAC -> ID FACT .)
    WHILE           reduce using rule 72 (FAC -> ID FACT .)
    FOR             reduce using rule 72 (FAC -> ID FACT .)
    INT             reduce using rule 72 (FAC -> ID FACT .)
    BOOLEAN         reduce using rule 72 (FAC -> ID FACT .)
    CHAR            reduce using rule 72 (FAC -> ID FACT .)
    STRING          reduce using rule 72 (FAC -> ID FACT .)
    FLOAT           reduce using rule 72 (FAC -> ID FACT .)
    VOID            reduce using rule 72 (FAC -> ID FACT .)
    LPAR            reduce using rule 72 (FAC -> ID FACT .)
    LBRA            reduce using rule 72 (FAC -> ID FACT .)
    ICTE            reduce using rule 72 (FAC -> ID FACT .)
    FCTE            reduce using rule 72 (FAC -> ID FACT .)
    RETURN          reduce using rule 72 (FAC -> ID FACT .)
    END             reduce using rule 72 (FAC -> ID FACT .)
    ELSE            reduce using rule 72 (FAC -> ID FACT .)
    RBRA            reduce using rule 72 (FAC -> ID FACT .)
    COMMA           reduce using rule 72 (FAC -> ID FACT .)


state 116

    (43) CONDICION -> IF LPAR . EXPRE RPAR BLOQUE CONDICIONP END
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 157
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 117

    (31) MDOP -> DIVI .

    LPAR            reduce using rule 31 (MDOP -> DIVI .)
    LBRA            reduce using rule 31 (MDOP -> DIVI .)
    ID              reduce using rule 31 (MDOP -> DIVI .)
    ICTE            reduce using rule 31 (MDOP -> DIVI .)
    FCTE            reduce using rule 31 (MDOP -> DIVI .)


state 118

    (62) TERMINO_W_SIGN -> MDOP . TERMINO
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VAR_CTE                        shift and go to state 75
    TERMINO                        shift and go to state 158
    FAC                            shift and go to state 78

state 119

    (61) TERMINO -> FAC TERMINO_W_SIGN .

    PLUS            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    MINUS           reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    LESSTH          reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    GREATERTH       reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    SEQUAL          reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    NOTEQ           reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    LESSEQTH        reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    GREATEREQTH     reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    EQUAL           reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    RPAR            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    IF              reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    ID              reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    DRAW            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    PRINT           reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    WHILE           reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    FOR             reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    INT             reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    BOOLEAN         reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    CHAR            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    STRING          reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    FLOAT           reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    VOID            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    LPAR            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    LBRA            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    ICTE            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    FCTE            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    END             reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    RETURN          reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    ELSE            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    RBRA            reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)
    COMMA           reduce using rule 61 (TERMINO -> FAC TERMINO_W_SIGN .)


state 120

    (30) MDOP -> MULT .

    LPAR            reduce using rule 30 (MDOP -> MULT .)
    LBRA            reduce using rule 30 (MDOP -> MULT .)
    ID              reduce using rule 30 (MDOP -> MULT .)
    ICTE            reduce using rule 30 (MDOP -> MULT .)
    FCTE            reduce using rule 30 (MDOP -> MULT .)


state 121

    (63) TERMINO_W_SIGN -> empty .

    PLUS            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    MINUS           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LESSTH          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    GREATERTH       reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    SEQUAL          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    NOTEQ           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    EQUAL           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    IF              reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    ID              reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    DRAW            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    PRINT           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    WHILE           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    FOR             reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    INT             reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    CHAR            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    STRING          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    FLOAT           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    VOID            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LPAR            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LBRA            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    ICTE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    FCTE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    END             reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    RETURN          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    RPAR            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    ELSE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    RBRA            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    COMMA           reduce using rule 63 (TERMINO_W_SIGN -> empty .)


state 122

    (41) WHILEF -> WHILE LPAR . EXPRE RPAR BLOQUE END
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 159
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 123

    (10) VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .

    IF              reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    ID              reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    DRAW            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    PRINT           reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    WHILE           reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    FOR             reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    INT             reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    BOOLEAN         reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    CHAR            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    STRING          reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    FLOAT           reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    VOID            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    LPAR            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    LBRA            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    ICTE            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    FCTE            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    ELSE            reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    END             reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    RETURN          reduce using rule 10 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)


state 124

    (79) VAR_FUNP -> DATA_TIPOS ID . addArg VAR_FUNZ
    (104) addArg -> .

    COMMA           reduce using rule 104 (addArg -> .)
    RPAR            reduce using rule 104 (addArg -> .)

    addArg                         shift and go to state 160

state 125

    (78) VAR_FUN -> LPAR VAR_FUNP RPAR .

    IF              reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ID              reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    DRAW            reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    PRINT           reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    WHILE           reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FOR             reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    INT             reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    BOOLEAN         reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    CHAR            reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    STRING          reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FLOAT           reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    VOID            reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LPAR            reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LBRA            reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ICTE            reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FCTE            reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    RETURN          reduce using rule 78 (VAR_FUN -> LPAR VAR_FUNP RPAR .)


state 126

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN . EXPRE END changeGlobalScope
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 161
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 127

    (69) FAC -> LPAR EXPRE RPAR .

    MULT            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    DIVI            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    PLUS            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    MINUS           reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    LESSTH          reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    GREATERTH       reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    SEQUAL          reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    NOTEQ           reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    LESSEQTH        reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    GREATEREQTH     reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    EQUAL           reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    RPAR            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    IF              reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    ID              reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    DRAW            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    PRINT           reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    WHILE           reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    FOR             reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    INT             reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    BOOLEAN         reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    CHAR            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    STRING          reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    FLOAT           reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    VOID            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    LPAR            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    LBRA            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    ICTE            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    FCTE            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    RETURN          reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    END             reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    ELSE            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    RBRA            reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)
    COMMA           reduce using rule 69 (FAC -> LPAR EXPRE RPAR .)


state 128

    (74) FACT -> LPAR . EXPRE RPAR
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 162
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78

state 129

    (53) EXPREZ -> EQUAL EXT .

    IF              reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    ID              reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    DRAW            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    PRINT           reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    WHILE           reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    FOR             reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    INT             reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    BOOLEAN         reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    CHAR            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    STRING          reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    FLOAT           reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    VOID            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    LPAR            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    LBRA            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    ICTE            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    FCTE            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    END             reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    RETURN          reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    RPAR            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    ELSE            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    RBRA            reduce using rule 53 (EXPREZ -> EQUAL EXT .)
    COMMA           reduce using rule 53 (EXPREZ -> EQUAL EXT .)


state 130

    (56) EXT_W_RELOP -> RELOP EXT .

    EQUAL           reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    IF              reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    ID              reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    DRAW            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    PRINT           reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    WHILE           reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    FOR             reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    INT             reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    BOOLEAN         reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    CHAR            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    STRING          reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    FLOAT           reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    VOID            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    LPAR            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    LBRA            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    ICTE            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    FCTE            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    END             reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    RETURN          reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    RPAR            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    ELSE            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    RBRA            reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)
    COMMA           reduce using rule 56 (EXT_W_RELOP -> RELOP EXT .)


state 131

    (67) IMPRIMIRZ -> EXPRE .

    RBRA            reduce using rule 67 (IMPRIMIRZ -> EXPRE .)


state 132

    (66) IMPRIMIR -> PRINT LBRA IMPRIMIRZ . RBRA

    RBRA            shift and go to state 163


state 133

    (68) IMPRIMIRZ -> SCTE .

    RBRA            reduce using rule 68 (IMPRIMIRZ -> SCTE .)


state 134

    (71) FAC -> LBRA EXPRE RPAR .

    MULT            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    DIVI            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    PLUS            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    MINUS           reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    LESSTH          reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    GREATERTH       reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    SEQUAL          reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    NOTEQ           reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    LESSEQTH        reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    GREATEREQTH     reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    EQUAL           reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    RPAR            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    IF              reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    ID              reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    DRAW            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    PRINT           reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    WHILE           reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    FOR             reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    INT             reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    BOOLEAN         reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    CHAR            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    STRING          reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    FLOAT           reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    VOID            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    LPAR            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    LBRA            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    ICTE            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    FCTE            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    RETURN          reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    END             reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    ELSE            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    RBRA            reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)
    COMMA           reduce using rule 71 (FAC -> LBRA EXPRE RPAR .)


state 135

    (42) FORZ -> FOR LPAR ICTE . COMMA ICTE COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 164


state 136

    (59) EXP_W_SIGN -> ASOP EXP .

    LESSTH          reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    GREATERTH       reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    SEQUAL          reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    NOTEQ           reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    LESSEQTH        reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    GREATEREQTH     reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    EQUAL           reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    IF              reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    ID              reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    DRAW            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    PRINT           reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    WHILE           reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    FOR             reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    INT             reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    BOOLEAN         reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    CHAR            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    STRING          reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    FLOAT           reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    VOID            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    LPAR            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    LBRA            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    ICTE            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    FCTE            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    END             reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    RETURN          reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    RPAR            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    ELSE            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    RBRA            reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)
    COMMA           reduce using rule 59 (EXP_W_SIGN -> ASOP EXP .)


state 137

    (74) FACT -> LPAR EXPRE . RPAR
    (34) LLAMADA_FUNCIONP -> EXPRE . LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (36) LLAMADA_FUNCIONZ -> . COMMA
    (37) LLAMADA_FUNCIONZ -> . empty
    (1) empty -> .

  ! shift/reduce conflict for RPAR resolved as shift
    RPAR            shift and go to state 166
    COMMA           shift and go to state 167
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! RPAR            [ reduce using rule 1 (empty -> .) ]

    LLAMADA_FUNCIONZ               shift and go to state 165
    empty                          shift and go to state 168

state 138

    (33) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP . RPAR

    RPAR            shift and go to state 169


state 139

    (35) LLAMADA_FUNCIONP -> empty .

    RPAR            reduce using rule 35 (LLAMADA_FUNCIONP -> empty .)


state 140

    (73) FACT -> LBRA EXPRE . RBRA

    RBRA            shift and go to state 170


state 141

    (88) DIBUJA -> DERECHA .

    LPAR            reduce using rule 88 (DIBUJA -> DERECHA .)


state 142

    (96) DIBUJA -> ARCO .

    LPAR            reduce using rule 96 (DIBUJA -> ARCO .)


state 143

    (93) DIBUJA -> CIRCULO .

    LPAR            reduce using rule 93 (DIBUJA -> CIRCULO .)


state 144

    (89) DIBUJA -> VELOCIDAD .

    LPAR            reduce using rule 89 (DIBUJA -> VELOCIDAD .)


state 145

    (86) DIBUJA -> REVERSA .

    LPAR            reduce using rule 86 (DIBUJA -> REVERSA .)


state 146

    (92) DIBUJA -> OCULTAR .

    LPAR            reduce using rule 92 (DIBUJA -> OCULTAR .)


state 147

    (83) DIBUJA -> DEFINIRPOSICION .

    LPAR            reduce using rule 83 (DIBUJA -> DEFINIRPOSICION .)


state 148

    (91) DIBUJA -> MOSTRAR .

    LPAR            reduce using rule 91 (DIBUJA -> MOSTRAR .)


state 149

    (87) DIBUJA -> IZQUIERDA .

    LPAR            reduce using rule 87 (DIBUJA -> IZQUIERDA .)


state 150

    (77) ACCION -> ID POINT DIBUJA . LPAR VAR_CTE RPAR

    LPAR            shift and go to state 171


state 151

    (85) DIBUJA -> DERECHO .

    LPAR            reduce using rule 85 (DIBUJA -> DERECHO .)


state 152

    (95) DIBUJA -> DEFINIRY .

    LPAR            reduce using rule 95 (DIBUJA -> DEFINIRY .)


state 153

    (94) DIBUJA -> DEFINIRX .

    LPAR            reduce using rule 94 (DIBUJA -> DEFINIRX .)


state 154

    (90) DIBUJA -> BORRAR .

    LPAR            reduce using rule 90 (DIBUJA -> BORRAR .)


state 155

    (97) DIBUJA -> GROSOR .

    LPAR            reduce using rule 97 (DIBUJA -> GROSOR .)


state 156

    (84) DIBUJA -> DEFINIRCOLOR .

    LPAR            reduce using rule 84 (DIBUJA -> DEFINIRCOLOR .)


state 157

    (43) CONDICION -> IF LPAR EXPRE . RPAR BLOQUE CONDICIONP END

    RPAR            shift and go to state 172


state 158

    (62) TERMINO_W_SIGN -> MDOP TERMINO .

    PLUS            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    MINUS           reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    LESSTH          reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    GREATERTH       reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    SEQUAL          reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    NOTEQ           reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    LESSEQTH        reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    GREATEREQTH     reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    EQUAL           reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    IF              reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    ID              reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    DRAW            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    PRINT           reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    WHILE           reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    FOR             reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    INT             reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    BOOLEAN         reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    CHAR            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    STRING          reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    FLOAT           reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    VOID            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    LPAR            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    LBRA            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    ICTE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    FCTE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    END             reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    RETURN          reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    RPAR            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    ELSE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    RBRA            reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)
    COMMA           reduce using rule 62 (TERMINO_W_SIGN -> MDOP TERMINO .)


state 159

    (41) WHILEF -> WHILE LPAR EXPRE . RPAR BLOQUE END

    RPAR            shift and go to state 173


state 160

    (79) VAR_FUNP -> DATA_TIPOS ID addArg . VAR_FUNZ
    (81) VAR_FUNZ -> . COMMA VAR_FUNP
    (82) VAR_FUNZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 175
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 176
    VAR_FUNZ                       shift and go to state 174

state 161

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE . END changeGlobalScope

    END             shift and go to state 177


state 162

    (74) FACT -> LPAR EXPRE . RPAR

    RPAR            shift and go to state 166


state 163

    (66) IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .

    IF              reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ID              reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    DRAW            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    PRINT           reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    WHILE           reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FOR             reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    INT             reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    BOOLEAN         reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    CHAR            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    STRING          reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FLOAT           reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    VOID            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    LPAR            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    LBRA            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ICTE            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FCTE            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    RETURN          reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ELSE            reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    END             reduce using rule 66 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)


state 164

    (42) FORZ -> FOR LPAR ICTE COMMA . ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 178


state 165

    (34) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ . LLAMADA_FUNCIONP
    (34) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (35) LLAMADA_FUNCIONP -> . empty
    (52) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (55) EXT -> . EXP EXT_W_RELOP
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ID              shift and go to state 88
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    EXPRE                          shift and go to state 179
    LLAMADA_FUNCIONP               shift and go to state 180
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    TERMINO                        shift and go to state 66
    EXP                            shift and go to state 60
    FAC                            shift and go to state 78
    empty                          shift and go to state 139

state 166

    (74) FACT -> LPAR EXPRE RPAR .

    MULT            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    DIVI            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    PLUS            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    MINUS           reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    LESSTH          reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    GREATERTH       reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    SEQUAL          reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    NOTEQ           reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    LESSEQTH        reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    GREATEREQTH     reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    EQUAL           reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    RPAR            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    IF              reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    ID              reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    DRAW            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    PRINT           reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    WHILE           reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    FOR             reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    INT             reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    BOOLEAN         reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    CHAR            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    STRING          reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    FLOAT           reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    VOID            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    LPAR            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    LBRA            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    ICTE            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    FCTE            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    END             reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    RETURN          reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    ELSE            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    RBRA            reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)
    COMMA           reduce using rule 74 (FACT -> LPAR EXPRE RPAR .)


state 167

    (36) LLAMADA_FUNCIONZ -> COMMA .

    LPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    LBRA            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    ID              reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    ICTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    FCTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    RPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)


state 168

    (37) LLAMADA_FUNCIONZ -> empty .

    LPAR            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    LBRA            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    ID              reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    ICTE            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    FCTE            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    RPAR            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)


state 169

    (33) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .

    IF              reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ID              reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    DRAW            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    PRINT           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    WHILE           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FOR             reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    INT             reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    BOOLEAN         reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    CHAR            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    STRING          reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FLOAT           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    VOID            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LPAR            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LBRA            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ICTE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FCTE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    END             reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    RETURN          reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ELSE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)


state 170

    (73) FACT -> LBRA EXPRE RBRA .

    MULT            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    DIVI            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    PLUS            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    MINUS           reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    LESSTH          reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    GREATERTH       reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    SEQUAL          reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    NOTEQ           reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    LESSEQTH        reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    GREATEREQTH     reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    EQUAL           reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    RPAR            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    IF              reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    ID              reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    DRAW            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    PRINT           reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    WHILE           reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    FOR             reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    INT             reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    BOOLEAN         reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    CHAR            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    STRING          reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    FLOAT           reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    VOID            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    LPAR            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    LBRA            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    ICTE            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    FCTE            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    END             reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    RETURN          reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    ELSE            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    RBRA            reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)
    COMMA           reduce using rule 73 (FACT -> LBRA EXPRE RBRA .)


state 171

    (77) ACCION -> ID POINT DIBUJA LPAR . VAR_CTE RPAR
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VAR_CTE                        shift and go to state 181

state 172

    (43) CONDICION -> IF LPAR EXPRE RPAR . BLOQUE CONDICIONP END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (77) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (66) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (55) EXT -> . EXP EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    ELSE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    DRAW            shift and go to state 15
    PRINT           shift and go to state 61
    WHILE           shift and go to state 80
    FOR             shift and go to state 65
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VART                           shift and go to state 69
    CICLO                          shift and go to state 57
    EXPRE                          shift and go to state 58
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    EXP                            shift and go to state 60
    LLAMADA_FUNCION                shift and go to state 62
    ESTATUTO                       shift and go to state 64
    TERMINO                        shift and go to state 66
    FAC                            shift and go to state 78
    empty                          shift and go to state 67
    WHILEF                         shift and go to state 68
    DATA_TIPOS                     shift and go to state 17
    FORZ                           shift and go to state 70
    IMPRIMIR                       shift and go to state 73
    BLOQUE                         shift and go to state 182
    ARR                            shift and go to state 18
    ACCION                         shift and go to state 79
    CONDICION                      shift and go to state 71

state 173

    (41) WHILEF -> WHILE LPAR EXPRE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (77) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (66) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (55) EXT -> . EXP EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    DRAW            shift and go to state 15
    PRINT           shift and go to state 61
    WHILE           shift and go to state 80
    FOR             shift and go to state 65
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VART                           shift and go to state 69
    CICLO                          shift and go to state 57
    EXPRE                          shift and go to state 58
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    EXP                            shift and go to state 60
    LLAMADA_FUNCION                shift and go to state 62
    ESTATUTO                       shift and go to state 64
    TERMINO                        shift and go to state 66
    FAC                            shift and go to state 78
    empty                          shift and go to state 67
    WHILEF                         shift and go to state 68
    DATA_TIPOS                     shift and go to state 17
    FORZ                           shift and go to state 70
    IMPRIMIR                       shift and go to state 73
    BLOQUE                         shift and go to state 183
    ARR                            shift and go to state 18
    ACCION                         shift and go to state 79
    CONDICION                      shift and go to state 71

state 174

    (79) VAR_FUNP -> DATA_TIPOS ID addArg VAR_FUNZ .

    RPAR            reduce using rule 79 (VAR_FUNP -> DATA_TIPOS ID addArg VAR_FUNZ .)


state 175

    (81) VAR_FUNZ -> COMMA . VAR_FUNP
    (79) VAR_FUNP -> . DATA_TIPOS ID addArg VAR_FUNZ
    (80) VAR_FUNP -> . empty
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (1) empty -> .

    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    DATA_TIPOS                     shift and go to state 83
    VAR_FUNP                       shift and go to state 184
    empty                          shift and go to state 85

state 176

    (82) VAR_FUNZ -> empty .

    RPAR            reduce using rule 82 (VAR_FUNZ -> empty .)


state 177

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END . changeGlobalScope
    (98) changeGlobalScope -> . empty
    (1) empty -> .

    DEFINE          reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)

    changeGlobalScope              shift and go to state 185
    empty                          shift and go to state 186

state 178

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE . COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 187


state 179

    (34) LLAMADA_FUNCIONP -> EXPRE . LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (36) LLAMADA_FUNCIONZ -> . COMMA
    (37) LLAMADA_FUNCIONZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 167
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)

    LLAMADA_FUNCIONZ               shift and go to state 165
    empty                          shift and go to state 168

state 180

    (34) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .

    RPAR            reduce using rule 34 (LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .)


state 181

    (77) ACCION -> ID POINT DIBUJA LPAR VAR_CTE . RPAR

    RPAR            shift and go to state 188


state 182

    (43) CONDICION -> IF LPAR EXPRE RPAR BLOQUE . CONDICIONP END
    (44) CONDICIONP -> . ELSE BLOQUE
    (45) CONDICIONP -> . empty
    (1) empty -> .

    ELSE            shift and go to state 190
    END             reduce using rule 1 (empty -> .)

    CONDICIONP                     shift and go to state 189
    empty                          shift and go to state 191

state 183

    (41) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE . END

    END             shift and go to state 192


state 184

    (81) VAR_FUNZ -> COMMA VAR_FUNP .

    RPAR            reduce using rule 81 (VAR_FUNZ -> COMMA VAR_FUNP .)


state 185

    (76) FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope .

    DEFINE          reduce using rule 76 (FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope .)
    MAIN            reduce using rule 76 (FUNCION -> changeLocalScope DEFINE DATA_TIPOS ID saveFunc VAR_FUN BLOQUE RETURN EXPRE END changeGlobalScope .)


state 186

    (98) changeGlobalScope -> empty .

    DEFINE          reduce using rule 98 (changeGlobalScope -> empty .)
    MAIN            reduce using rule 98 (changeGlobalScope -> empty .)


state 187

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA . ICTE RPAR BLOQUE END

    ICTE            shift and go to state 193


state 188

    (77) ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .

    IF              reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ID              reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    DRAW            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    PRINT           reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    WHILE           reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FOR             reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    INT             reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    BOOLEAN         reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    CHAR            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    STRING          reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FLOAT           reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    VOID            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LPAR            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LBRA            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ICTE            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FCTE            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    END             reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    RETURN          reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ELSE            reduce using rule 77 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)


state 189

    (43) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP . END

    END             shift and go to state 194


state 190

    (44) CONDICIONP -> ELSE . BLOQUE
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (77) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (66) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (55) EXT -> . EXP EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    DRAW            shift and go to state 15
    PRINT           shift and go to state 61
    WHILE           shift and go to state 80
    FOR             shift and go to state 65
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VART                           shift and go to state 69
    CICLO                          shift and go to state 57
    EXPRE                          shift and go to state 58
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    EXP                            shift and go to state 60
    LLAMADA_FUNCION                shift and go to state 62
    ESTATUTO                       shift and go to state 64
    TERMINO                        shift and go to state 66
    FAC                            shift and go to state 78
    empty                          shift and go to state 67
    WHILEF                         shift and go to state 68
    DATA_TIPOS                     shift and go to state 17
    FORZ                           shift and go to state 70
    IMPRIMIR                       shift and go to state 73
    BLOQUE                         shift and go to state 195
    ARR                            shift and go to state 18
    ACCION                         shift and go to state 79
    CONDICION                      shift and go to state 71

state 191

    (45) CONDICIONP -> empty .

    END             reduce using rule 45 (CONDICIONP -> empty .)


state 192

    (41) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .

    IF              reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ID              reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    DRAW            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    PRINT           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    WHILE           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FOR             reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    INT             reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    CHAR            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    STRING          reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FLOAT           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    VOID            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LPAR            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LBRA            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ICTE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FCTE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    RETURN          reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    END             reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ELSE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)


state 193

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE . RPAR BLOQUE END

    RPAR            shift and go to state 196


state 194

    (43) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .

    IF              reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ID              reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    DRAW            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    PRINT           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    WHILE           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FOR             reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    INT             reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    BOOLEAN         reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    CHAR            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    STRING          reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FLOAT           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    VOID            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LPAR            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LBRA            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ICTE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FCTE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    END             reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    RETURN          reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ELSE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)


state 195

    (44) CONDICIONP -> ELSE BLOQUE .

    END             reduce using rule 44 (CONDICIONP -> ELSE BLOQUE .)


state 196

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (77) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (66) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (55) EXT -> . EXP EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . CHAR addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType saveVoid
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO EXP_W_SIGN
    (61) TERMINO -> . FAC TERMINO_W_SIGN
    (69) FAC -> . LPAR EXPRE RPAR
    (70) FAC -> . VAR_CTE
    (71) FAC -> . LBRA EXPRE RPAR
    (72) FAC -> . ID FACT
    (64) VAR_CTE -> . ICTE
    (65) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    IF              shift and go to state 77
    ID              shift and go to state 76
    DRAW            shift and go to state 15
    PRINT           shift and go to state 61
    WHILE           shift and go to state 80
    FOR             shift and go to state 65
    INT             shift and go to state 19
    BOOLEAN         shift and go to state 21
    CHAR            shift and go to state 12
    STRING          shift and go to state 16
    FLOAT           shift and go to state 20
    VOID            shift and go to state 11
    LPAR            shift and go to state 56
    LBRA            shift and go to state 63
    ICTE            shift and go to state 72
    FCTE            shift and go to state 81

    VART                           shift and go to state 69
    CICLO                          shift and go to state 57
    EXPRE                          shift and go to state 58
    VAR_CTE                        shift and go to state 75
    EXT                            shift and go to state 59
    EXP                            shift and go to state 60
    LLAMADA_FUNCION                shift and go to state 62
    ESTATUTO                       shift and go to state 64
    TERMINO                        shift and go to state 66
    FAC                            shift and go to state 78
    empty                          shift and go to state 67
    WHILEF                         shift and go to state 68
    DATA_TIPOS                     shift and go to state 17
    FORZ                           shift and go to state 70
    IMPRIMIR                       shift and go to state 73
    BLOQUE                         shift and go to state 197
    ARR                            shift and go to state 18
    ACCION                         shift and go to state 79
    CONDICION                      shift and go to state 71

state 197

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE . END

    END             shift and go to state 198


state 198

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .

    IF              reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ID              reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    DRAW            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    PRINT           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    WHILE           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FOR             reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    INT             reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    CHAR            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    STRING          reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FLOAT           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    VOID            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LPAR            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LBRA            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ICTE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FCTE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    RETURN          reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    END             reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ELSE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAR in state 76 resolved as shift
WARNING: shift/reduce conflict for LBRA in state 76 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 88 resolved as shift
WARNING: shift/reduce conflict for LBRA in state 88 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 137 resolved as shift
