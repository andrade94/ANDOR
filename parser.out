Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    AND
    FALSE
    NOT
    OR

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     empty -> <empty>
Rule 2     PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL
Rule 3     PROGRAMAB -> FUNCION PROGRAMAB
Rule 4     PROGRAMAB -> empty
Rule 5     PROGRAMAZ -> GLOBALES
Rule 6     PROGRAMAZ -> empty
Rule 7     GLOBALES -> GLOBAL GLOBALEZ END
Rule 8     GLOBALEZ -> VART GLOBALEZ
Rule 9     GLOBALEZ -> empty
Rule 10    VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
Rule 11    VART -> DATA_TIPOS ID addVariable
Rule 12    VART -> ARR ID addVariable
Rule 13    ESTATUTO -> EXPRE genQuad5
Rule 14    ESTATUTO -> CONDICION
Rule 15    ESTATUTO -> CICLO
Rule 16    ESTATUTO -> ACCION
Rule 17    ESTATUTO -> VART
Rule 18    ESTATUTO -> LLAMADA_FUNCION
Rule 19    ESTATUTO -> IMPRIMIR
Rule 20    BLOQUE -> ESTATUTO finishBlock BLOQUE
Rule 21    BLOQUE -> empty
Rule 22    DATA_TIPOS -> INT addDataType
Rule 23    DATA_TIPOS -> BOOLEAN addDataType
Rule 24    DATA_TIPOS -> STRING addDataType
Rule 25    DATA_TIPOS -> FLOAT addDataType
Rule 26    DATA_TIPOS -> VOID addDataType
Rule 27    ASOP -> PLUS
Rule 28    ASOP -> MINUS
Rule 29    MDOP -> MULT
Rule 30    MDOP -> DIVI
Rule 31    ARR -> DATA_TIPOS LBRA ICTE RBRA
Rule 32    LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR
Rule 33    LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
Rule 34    LLAMADA_FUNCIONP -> empty
Rule 35    LLAMADA_FUNCIONZ -> COMMA
Rule 36    LLAMADA_FUNCIONZ -> empty
Rule 37    PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END
Rule 38    CICLO -> WHILEF
Rule 39    CICLO -> FORZ
Rule 40    WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END
Rule 41    FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
Rule 42    CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
Rule 43    CONDICIONP -> ELSE BLOQUE
Rule 44    CONDICIONP -> empty
Rule 45    RELOP -> LESSTH
Rule 46    RELOP -> GREATERTH
Rule 47    RELOP -> SEQUAL
Rule 48    RELOP -> NOTEQ
Rule 49    RELOP -> LESSEQTH
Rule 50    RELOP -> GREATEREQTH
Rule 51    EXPRE -> EXT EXPREZ
Rule 52    EXPREZ -> EQUAL operatorPush EXT
Rule 53    EXPREZ -> empty
Rule 54    EXT -> EXP genQuad3 EXT_W_RELOP
Rule 55    EXT_W_RELOP -> RELOP operatorPush EXT
Rule 56    EXT_W_RELOP -> empty
Rule 57    EXP -> TERMINO genQuad2 EXP_W_SIGN
Rule 58    EXP_W_SIGN -> ASOP operatorPush EXP
Rule 59    EXP_W_SIGN -> empty
Rule 60    TERMINO -> FAC genQuad1 TERMINO_W_SIGN
Rule 61    TERMINO_W_SIGN -> MDOP operatorPush TERMINO
Rule 62    TERMINO_W_SIGN -> empty
Rule 63    VAR_CTE -> ICTE addInt
Rule 64    VAR_CTE -> FCTE addFloat
Rule 65    IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA
Rule 66    IMPRIMIRZ -> EXPRE
Rule 67    IMPRIMIRZ -> SCTE
Rule 68    FAC -> pushExp LPAR EXPRE RPAR popExp
Rule 69    FAC -> genQuad0 VAR_CTE operandPush
Rule 70    FAC -> LBRA EXPRE RPAR
Rule 71    FAC -> ID operandPush FACT
Rule 72    FACT -> LBRA EXPRE RBRA
Rule 73    FACT -> LPAR EXPRE RPAR
Rule 74    FACT -> empty
Rule 75    FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
Rule 76    ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR
Rule 77    VAR_FUN -> LPAR VAR_FUNP RPAR
Rule 78    VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ
Rule 79    VAR_FUNP -> empty
Rule 80    VAR_FUNZ -> COMMA VAR_FUNP
Rule 81    VAR_FUNZ -> empty
Rule 82    DIBUJA -> DEFINIRPOSICION
Rule 83    DIBUJA -> DEFINIRCOLOR
Rule 84    DIBUJA -> DERECHO
Rule 85    DIBUJA -> REVERSA
Rule 86    DIBUJA -> IZQUIERDA
Rule 87    DIBUJA -> DERECHA
Rule 88    DIBUJA -> VELOCIDAD
Rule 89    DIBUJA -> BORRAR
Rule 90    DIBUJA -> MOSTRAR
Rule 91    DIBUJA -> OCULTAR
Rule 92    DIBUJA -> CIRCULO
Rule 93    DIBUJA -> DEFINIRX
Rule 94    DIBUJA -> DEFINIRY
Rule 95    DIBUJA -> ARCO
Rule 96    DIBUJA -> GROSOR
Rule 97    restoreScope -> empty
Rule 98    changeScope -> empty
Rule 99    addDataType -> empty
Rule 100   addVariable -> empty
Rule 101   addFloat -> empty
Rule 102   addInt -> empty
Rule 103   finishBlock -> empty
Rule 104   operandPush -> empty
Rule 105   operatorPush -> empty
Rule 106   pushExp -> empty
Rule 107   popExp -> empty
Rule 108   genQuad0 -> empty
Rule 109   genQuad1 -> empty
Rule 110   genQuad2 -> empty
Rule 111   genQuad3 -> empty
Rule 112   genQuad5 -> empty

Terminals, with rules where they appear

AND                  : 
ARCO                 : 95
BOOLEAN              : 23
BORRAR               : 89
CIRCULO              : 92
COMMA                : 35 41 41 80
DEFINE               : 75
DEFINIRCOLOR         : 83
DEFINIRPOSICION      : 82
DEFINIRX             : 93
DEFINIRY             : 94
DERECHA              : 87
DERECHO              : 84
DIVI                 : 30
DRAW                 : 10
DRAWI                : 10
ELSE                 : 43
END                  : 7 37 40 41 42 75
EQUAL                : 10 52
FALSE                : 
FCTE                 : 64
FLOAT                : 25
FOR                  : 41
GLOBAL               : 7
GREATEREQTH          : 50
GREATERTH            : 46
GROSOR               : 96
ICTE                 : 31 41 41 41 63
ID                   : 10 11 12 32 71 75 76 78
IF                   : 42
INT                  : 22
IZQUIERDA            : 86
LBRA                 : 31 65 70 72
LESSEQTH             : 49
LESSTH               : 45
LPAR                 : 10 32 37 40 41 42 68 73 76 77
MAIN                 : 37
MINUS                : 28
MOSTRAR              : 90
MULT                 : 29
NEW                  : 10
NOT                  : 
NOTEQ                : 48
OCULTAR              : 91
OR                   : 
PLUS                 : 27
POINT                : 76
PRINT                : 65
RBRA                 : 31 65 72
RETURN               : 75
REVERSA              : 85
RPAR                 : 10 32 37 40 41 42 68 70 73 76 77
SCTE                 : 67
SEQUAL               : 47
STRING               : 24
TRUE                 : 
VELOCIDAD            : 88
VOID                 : 26
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

ACCION               : 16
ARR                  : 12
ASOP                 : 58
BLOQUE               : 20 37 40 41 42 43 75
CICLO                : 15
CONDICION            : 14
CONDICIONP           : 42
DATA_TIPOS           : 11 31 75 78
DIBUJA               : 76
ESTATUTO             : 20
EXP                  : 54 58
EXPRE                : 13 33 40 42 66 68 70 72 73 75
EXPREZ               : 51
EXP_W_SIGN           : 57
EXT                  : 51 52 55
EXT_W_RELOP          : 54
FAC                  : 60
FACT                 : 71
FORZ                 : 39
FUNCION              : 3
GLOBALES             : 5
GLOBALEZ             : 7 8
IMPRIMIR             : 19
IMPRIMIRZ            : 65
LLAMADA_FUNCION      : 18
LLAMADA_FUNCIONP     : 32 33
LLAMADA_FUNCIONZ     : 33
MDOP                 : 61
PRINCIPAL            : 2
PROGRAMA             : 0
PROGRAMAB            : 2 3
PROGRAMAZ            : 2
RELOP                : 55
TERMINO              : 57 61
TERMINO_W_SIGN       : 60
VART                 : 8 17
VAR_CTE              : 69 76
VAR_FUN              : 75
VAR_FUNP             : 77 80
VAR_FUNZ             : 78
WHILEF               : 38
addDataType          : 22 23 24 25 26
addFloat             : 64
addInt               : 63
addVariable          : 10 11 12
changeScope          : 37 75
empty                : 4 6 9 21 34 36 44 53 56 59 62 74 79 81 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112
finishBlock          : 20
genQuad0             : 69
genQuad1             : 60
genQuad2             : 57
genQuad3             : 54
genQuad5             : 13
operandPush          : 69 71
operatorPush         : 52 55 58 61
popExp               : 68
pushExp              : 68
restoreScope         : 75

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (2) PROGRAMA -> . PROGRAMAZ PROGRAMAB PRINCIPAL
    (5) PROGRAMAZ -> . GLOBALES
    (6) PROGRAMAZ -> . empty
    (7) GLOBALES -> . GLOBAL GLOBALEZ END
    (1) empty -> .

    GLOBAL          shift and go to state 2
    DEFINE          reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)

    PROGRAMAZ                      shift and go to state 1
    PROGRAMA                       shift and go to state 3
    GLOBALES                       shift and go to state 4
    empty                          shift and go to state 5

state 1

    (2) PROGRAMA -> PROGRAMAZ . PROGRAMAB PRINCIPAL
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (75) FUNCION -> . DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (1) empty -> .

    DEFINE          shift and go to state 9
    MAIN            reduce using rule 1 (empty -> .)

    PROGRAMAB                      shift and go to state 7
    empty                          shift and go to state 8
    FUNCION                        shift and go to state 6

state 2

    (7) GLOBALES -> GLOBAL . GLOBALEZ END
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 14
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 17
    DATA_TIPOS                     shift and go to state 16
    GLOBALEZ                       shift and go to state 12
    empty                          shift and go to state 13

state 3

    (0) S' -> PROGRAMA .



state 4

    (5) PROGRAMAZ -> GLOBALES .

    DEFINE          reduce using rule 5 (PROGRAMAZ -> GLOBALES .)
    MAIN            reduce using rule 5 (PROGRAMAZ -> GLOBALES .)


state 5

    (6) PROGRAMAZ -> empty .

    DEFINE          reduce using rule 6 (PROGRAMAZ -> empty .)
    MAIN            reduce using rule 6 (PROGRAMAZ -> empty .)


state 6

    (3) PROGRAMAB -> FUNCION . PROGRAMAB
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (75) FUNCION -> . DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (1) empty -> .

    DEFINE          shift and go to state 9
    MAIN            reduce using rule 1 (empty -> .)

    FUNCION                        shift and go to state 6
    PROGRAMAB                      shift and go to state 21
    empty                          shift and go to state 8

state 7

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB . PRINCIPAL
    (37) PRINCIPAL -> . MAIN changeScope LPAR RPAR BLOQUE END

    MAIN            shift and go to state 23

    PRINCIPAL                      shift and go to state 22

state 8

    (4) PROGRAMAB -> empty .

    MAIN            reduce using rule 4 (PROGRAMAB -> empty .)


state 9

    (75) FUNCION -> DEFINE . DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    DATA_TIPOS                     shift and go to state 24

state 10

    (8) GLOBALEZ -> VART . GLOBALEZ
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 14
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 17
    DATA_TIPOS                     shift and go to state 16
    GLOBALEZ                       shift and go to state 25
    empty                          shift and go to state 13

state 11

    (26) DATA_TIPOS -> VOID . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 26
    empty                          shift and go to state 27

state 12

    (7) GLOBALES -> GLOBAL GLOBALEZ . END

    END             shift and go to state 28


state 13

    (9) GLOBALEZ -> empty .

    END             reduce using rule 9 (GLOBALEZ -> empty .)


state 14

    (10) VART -> DRAW . ID addVariable EQUAL NEW DRAWI LPAR RPAR

    ID              shift and go to state 29


state 15

    (24) DATA_TIPOS -> STRING . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 30
    empty                          shift and go to state 27

state 16

    (11) VART -> DATA_TIPOS . ID addVariable
    (31) ARR -> DATA_TIPOS . LBRA ICTE RBRA

    ID              shift and go to state 32
    LBRA            shift and go to state 31


state 17

    (12) VART -> ARR . ID addVariable

    ID              shift and go to state 33


state 18

    (22) DATA_TIPOS -> INT . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 34
    empty                          shift and go to state 27

state 19

    (25) DATA_TIPOS -> FLOAT . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 35
    empty                          shift and go to state 27

state 20

    (23) DATA_TIPOS -> BOOLEAN . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 36
    empty                          shift and go to state 27

state 21

    (3) PROGRAMAB -> FUNCION PROGRAMAB .

    MAIN            reduce using rule 3 (PROGRAMAB -> FUNCION PROGRAMAB .)


state 22

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .)


state 23

    (37) PRINCIPAL -> MAIN . changeScope LPAR RPAR BLOQUE END
    (98) changeScope -> . empty
    (1) empty -> .

    LPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 37
    changeScope                    shift and go to state 38

state 24

    (75) FUNCION -> DEFINE DATA_TIPOS . ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope

    ID              shift and go to state 39


state 25

    (8) GLOBALEZ -> VART GLOBALEZ .

    END             reduce using rule 8 (GLOBALEZ -> VART GLOBALEZ .)


state 26

    (26) DATA_TIPOS -> VOID addDataType .

    ID              reduce using rule 26 (DATA_TIPOS -> VOID addDataType .)
    LBRA            reduce using rule 26 (DATA_TIPOS -> VOID addDataType .)


state 27

    (99) addDataType -> empty .

    ID              reduce using rule 99 (addDataType -> empty .)
    LBRA            reduce using rule 99 (addDataType -> empty .)


state 28

    (7) GLOBALES -> GLOBAL GLOBALEZ END .

    DEFINE          reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)
    MAIN            reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)


state 29

    (10) VART -> DRAW ID . addVariable EQUAL NEW DRAWI LPAR RPAR
    (100) addVariable -> . empty
    (1) empty -> .

    EQUAL           reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 40

state 30

    (24) DATA_TIPOS -> STRING addDataType .

    ID              reduce using rule 24 (DATA_TIPOS -> STRING addDataType .)
    LBRA            reduce using rule 24 (DATA_TIPOS -> STRING addDataType .)


state 31

    (31) ARR -> DATA_TIPOS LBRA . ICTE RBRA

    ICTE            shift and go to state 42


state 32

    (11) VART -> DATA_TIPOS ID . addVariable
    (100) addVariable -> . empty
    (1) empty -> .

    DRAW            reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 43

state 33

    (12) VART -> ARR ID . addVariable
    (100) addVariable -> . empty
    (1) empty -> .

    DRAW            reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 44

state 34

    (22) DATA_TIPOS -> INT addDataType .

    ID              reduce using rule 22 (DATA_TIPOS -> INT addDataType .)
    LBRA            reduce using rule 22 (DATA_TIPOS -> INT addDataType .)


state 35

    (25) DATA_TIPOS -> FLOAT addDataType .

    ID              reduce using rule 25 (DATA_TIPOS -> FLOAT addDataType .)
    LBRA            reduce using rule 25 (DATA_TIPOS -> FLOAT addDataType .)


state 36

    (23) DATA_TIPOS -> BOOLEAN addDataType .

    ID              reduce using rule 23 (DATA_TIPOS -> BOOLEAN addDataType .)
    LBRA            reduce using rule 23 (DATA_TIPOS -> BOOLEAN addDataType .)


state 37

    (98) changeScope -> empty .

    LPAR            reduce using rule 98 (changeScope -> empty .)


state 38

    (37) PRINCIPAL -> MAIN changeScope . LPAR RPAR BLOQUE END

    LPAR            shift and go to state 45


state 39

    (75) FUNCION -> DEFINE DATA_TIPOS ID . changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (98) changeScope -> . empty
    (1) empty -> .

    LPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 37
    changeScope                    shift and go to state 46

state 40

    (10) VART -> DRAW ID addVariable . EQUAL NEW DRAWI LPAR RPAR

    EQUAL           shift and go to state 47


state 41

    (100) addVariable -> empty .

    DRAW            reduce using rule 100 (addVariable -> empty .)
    INT             reduce using rule 100 (addVariable -> empty .)
    BOOLEAN         reduce using rule 100 (addVariable -> empty .)
    STRING          reduce using rule 100 (addVariable -> empty .)
    FLOAT           reduce using rule 100 (addVariable -> empty .)
    VOID            reduce using rule 100 (addVariable -> empty .)
    END             reduce using rule 100 (addVariable -> empty .)
    IF              reduce using rule 100 (addVariable -> empty .)
    ID              reduce using rule 100 (addVariable -> empty .)
    PRINT           reduce using rule 100 (addVariable -> empty .)
    WHILE           reduce using rule 100 (addVariable -> empty .)
    FOR             reduce using rule 100 (addVariable -> empty .)
    LBRA            reduce using rule 100 (addVariable -> empty .)
    LPAR            reduce using rule 100 (addVariable -> empty .)
    ICTE            reduce using rule 100 (addVariable -> empty .)
    FCTE            reduce using rule 100 (addVariable -> empty .)
    RETURN          reduce using rule 100 (addVariable -> empty .)
    ELSE            reduce using rule 100 (addVariable -> empty .)
    EQUAL           reduce using rule 100 (addVariable -> empty .)


state 42

    (31) ARR -> DATA_TIPOS LBRA ICTE . RBRA

    RBRA            shift and go to state 48


state 43

    (11) VART -> DATA_TIPOS ID addVariable .

    IF              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ID              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    DRAW            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    PRINT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    WHILE           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FOR             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    INT             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    BOOLEAN         reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    STRING          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FLOAT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    VOID            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LBRA            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LPAR            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ICTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FCTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    END             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    RETURN          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ELSE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)


state 44

    (12) VART -> ARR ID addVariable .

    IF              reduce using rule 12 (VART -> ARR ID addVariable .)
    ID              reduce using rule 12 (VART -> ARR ID addVariable .)
    DRAW            reduce using rule 12 (VART -> ARR ID addVariable .)
    PRINT           reduce using rule 12 (VART -> ARR ID addVariable .)
    WHILE           reduce using rule 12 (VART -> ARR ID addVariable .)
    FOR             reduce using rule 12 (VART -> ARR ID addVariable .)
    INT             reduce using rule 12 (VART -> ARR ID addVariable .)
    BOOLEAN         reduce using rule 12 (VART -> ARR ID addVariable .)
    STRING          reduce using rule 12 (VART -> ARR ID addVariable .)
    FLOAT           reduce using rule 12 (VART -> ARR ID addVariable .)
    VOID            reduce using rule 12 (VART -> ARR ID addVariable .)
    LBRA            reduce using rule 12 (VART -> ARR ID addVariable .)
    LPAR            reduce using rule 12 (VART -> ARR ID addVariable .)
    ICTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    FCTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    END             reduce using rule 12 (VART -> ARR ID addVariable .)
    RETURN          reduce using rule 12 (VART -> ARR ID addVariable .)
    ELSE            reduce using rule 12 (VART -> ARR ID addVariable .)


state 45

    (37) PRINCIPAL -> MAIN changeScope LPAR . RPAR BLOQUE END

    RPAR            shift and go to state 49


state 46

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope . VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (77) VAR_FUN -> . LPAR VAR_FUNP RPAR

    LPAR            shift and go to state 50

    VAR_FUN                        shift and go to state 51

state 47

    (10) VART -> DRAW ID addVariable EQUAL . NEW DRAWI LPAR RPAR

    NEW             shift and go to state 52


state 48

    (31) ARR -> DATA_TIPOS LBRA ICTE RBRA .

    ID              reduce using rule 31 (ARR -> DATA_TIPOS LBRA ICTE RBRA .)


state 49

    (37) PRINCIPAL -> MAIN changeScope LPAR RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 73
    ID              shift and go to state 72
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 76
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 67
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 68
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 71
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 75
    CONDICION                      shift and go to state 69

state 50

    (77) VAR_FUN -> LPAR . VAR_FUNP RPAR
    (78) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (79) VAR_FUNP -> . empty
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (1) empty -> .

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 79
    DATA_TIPOS                     shift and go to state 77
    VAR_FUNP                       shift and go to state 78

state 51

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN . BLOQUE RETURN EXPRE END restoreScope
    (20) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    RETURN          reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 73
    ID              shift and go to state 72
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 76
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 67
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    BLOQUE                         shift and go to state 80
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 68
    IMPRIMIR                       shift and go to state 70
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 75
    CONDICION                      shift and go to state 69

state 52

    (10) VART -> DRAW ID addVariable EQUAL NEW . DRAWI LPAR RPAR

    DRAWI           shift and go to state 81


state 53

    (15) ESTATUTO -> CICLO .

    IF              reduce using rule 15 (ESTATUTO -> CICLO .)
    ID              reduce using rule 15 (ESTATUTO -> CICLO .)
    DRAW            reduce using rule 15 (ESTATUTO -> CICLO .)
    PRINT           reduce using rule 15 (ESTATUTO -> CICLO .)
    WHILE           reduce using rule 15 (ESTATUTO -> CICLO .)
    FOR             reduce using rule 15 (ESTATUTO -> CICLO .)
    INT             reduce using rule 15 (ESTATUTO -> CICLO .)
    BOOLEAN         reduce using rule 15 (ESTATUTO -> CICLO .)
    STRING          reduce using rule 15 (ESTATUTO -> CICLO .)
    FLOAT           reduce using rule 15 (ESTATUTO -> CICLO .)
    VOID            reduce using rule 15 (ESTATUTO -> CICLO .)
    LBRA            reduce using rule 15 (ESTATUTO -> CICLO .)
    LPAR            reduce using rule 15 (ESTATUTO -> CICLO .)
    ICTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    FCTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    ELSE            reduce using rule 15 (ESTATUTO -> CICLO .)
    END             reduce using rule 15 (ESTATUTO -> CICLO .)
    RETURN          reduce using rule 15 (ESTATUTO -> CICLO .)


state 54

    (13) ESTATUTO -> EXPRE . genQuad5
    (112) genQuad5 -> . empty
    (1) empty -> .

    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    genQuad5                       shift and go to state 82
    empty                          shift and go to state 83

state 55

    (51) EXPRE -> EXT . EXPREZ
    (52) EXPREZ -> . EQUAL operatorPush EXT
    (53) EXPREZ -> . empty
    (1) empty -> .

    EQUAL           shift and go to state 86
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    EXPREZ                         shift and go to state 84
    empty                          shift and go to state 85

state 56

    (54) EXT -> EXP . genQuad3 EXT_W_RELOP
    (111) genQuad3 -> . empty
    (1) empty -> .

    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad3                       shift and go to state 87
    empty                          shift and go to state 88

state 57

    (65) IMPRIMIR -> PRINT . LBRA IMPRIMIRZ RBRA

    LBRA            shift and go to state 89


state 58

    (18) ESTATUTO -> LLAMADA_FUNCION .

    IF              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ID              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    DRAW            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    PRINT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    WHILE           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FOR             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    INT             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    BOOLEAN         reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    STRING          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FLOAT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    VOID            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LBRA            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LPAR            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ICTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FCTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ELSE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    END             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    RETURN          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)


state 59

    (70) FAC -> LBRA . EXPRE RPAR
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 90
    empty                          shift and go to state 91
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74

state 60

    (20) BLOQUE -> ESTATUTO . finishBlock BLOQUE
    (103) finishBlock -> . empty
    (1) empty -> .

    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    finishBlock                    shift and go to state 93
    empty                          shift and go to state 94

state 61

    (41) FORZ -> FOR . LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    LPAR            shift and go to state 95


state 62

    (57) EXP -> TERMINO . genQuad2 EXP_W_SIGN
    (110) genQuad2 -> . empty
    (1) empty -> .

    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad2                       shift and go to state 96
    empty                          shift and go to state 97

state 63

    (68) FAC -> pushExp . LPAR EXPRE RPAR popExp

    LPAR            shift and go to state 98


state 64

    (21) BLOQUE -> empty .
    (106) pushExp -> empty .
    (108) genQuad0 -> empty .

    END             reduce using rule 21 (BLOQUE -> empty .)
    ELSE            reduce using rule 21 (BLOQUE -> empty .)
    RETURN          reduce using rule 21 (BLOQUE -> empty .)
    LPAR            reduce using rule 106 (pushExp -> empty .)
    ICTE            reduce using rule 108 (genQuad0 -> empty .)
    FCTE            reduce using rule 108 (genQuad0 -> empty .)


state 65

    (38) CICLO -> WHILEF .

    IF              reduce using rule 38 (CICLO -> WHILEF .)
    ID              reduce using rule 38 (CICLO -> WHILEF .)
    DRAW            reduce using rule 38 (CICLO -> WHILEF .)
    PRINT           reduce using rule 38 (CICLO -> WHILEF .)
    WHILE           reduce using rule 38 (CICLO -> WHILEF .)
    FOR             reduce using rule 38 (CICLO -> WHILEF .)
    INT             reduce using rule 38 (CICLO -> WHILEF .)
    BOOLEAN         reduce using rule 38 (CICLO -> WHILEF .)
    STRING          reduce using rule 38 (CICLO -> WHILEF .)
    FLOAT           reduce using rule 38 (CICLO -> WHILEF .)
    VOID            reduce using rule 38 (CICLO -> WHILEF .)
    LBRA            reduce using rule 38 (CICLO -> WHILEF .)
    LPAR            reduce using rule 38 (CICLO -> WHILEF .)
    ICTE            reduce using rule 38 (CICLO -> WHILEF .)
    FCTE            reduce using rule 38 (CICLO -> WHILEF .)
    END             reduce using rule 38 (CICLO -> WHILEF .)
    RETURN          reduce using rule 38 (CICLO -> WHILEF .)
    ELSE            reduce using rule 38 (CICLO -> WHILEF .)


state 66

    (69) FAC -> genQuad0 . VAR_CTE operandPush
    (63) VAR_CTE -> . ICTE addInt
    (64) VAR_CTE -> . FCTE addFloat

    ICTE            shift and go to state 101
    FCTE            shift and go to state 100

    VAR_CTE                        shift and go to state 99

state 67

    (17) ESTATUTO -> VART .

    IF              reduce using rule 17 (ESTATUTO -> VART .)
    ID              reduce using rule 17 (ESTATUTO -> VART .)
    DRAW            reduce using rule 17 (ESTATUTO -> VART .)
    PRINT           reduce using rule 17 (ESTATUTO -> VART .)
    WHILE           reduce using rule 17 (ESTATUTO -> VART .)
    FOR             reduce using rule 17 (ESTATUTO -> VART .)
    INT             reduce using rule 17 (ESTATUTO -> VART .)
    BOOLEAN         reduce using rule 17 (ESTATUTO -> VART .)
    STRING          reduce using rule 17 (ESTATUTO -> VART .)
    FLOAT           reduce using rule 17 (ESTATUTO -> VART .)
    VOID            reduce using rule 17 (ESTATUTO -> VART .)
    LBRA            reduce using rule 17 (ESTATUTO -> VART .)
    LPAR            reduce using rule 17 (ESTATUTO -> VART .)
    ICTE            reduce using rule 17 (ESTATUTO -> VART .)
    FCTE            reduce using rule 17 (ESTATUTO -> VART .)
    ELSE            reduce using rule 17 (ESTATUTO -> VART .)
    END             reduce using rule 17 (ESTATUTO -> VART .)
    RETURN          reduce using rule 17 (ESTATUTO -> VART .)


state 68

    (39) CICLO -> FORZ .

    IF              reduce using rule 39 (CICLO -> FORZ .)
    ID              reduce using rule 39 (CICLO -> FORZ .)
    DRAW            reduce using rule 39 (CICLO -> FORZ .)
    PRINT           reduce using rule 39 (CICLO -> FORZ .)
    WHILE           reduce using rule 39 (CICLO -> FORZ .)
    FOR             reduce using rule 39 (CICLO -> FORZ .)
    INT             reduce using rule 39 (CICLO -> FORZ .)
    BOOLEAN         reduce using rule 39 (CICLO -> FORZ .)
    STRING          reduce using rule 39 (CICLO -> FORZ .)
    FLOAT           reduce using rule 39 (CICLO -> FORZ .)
    VOID            reduce using rule 39 (CICLO -> FORZ .)
    LBRA            reduce using rule 39 (CICLO -> FORZ .)
    LPAR            reduce using rule 39 (CICLO -> FORZ .)
    ICTE            reduce using rule 39 (CICLO -> FORZ .)
    FCTE            reduce using rule 39 (CICLO -> FORZ .)
    END             reduce using rule 39 (CICLO -> FORZ .)
    RETURN          reduce using rule 39 (CICLO -> FORZ .)
    ELSE            reduce using rule 39 (CICLO -> FORZ .)


state 69

    (14) ESTATUTO -> CONDICION .

    IF              reduce using rule 14 (ESTATUTO -> CONDICION .)
    ID              reduce using rule 14 (ESTATUTO -> CONDICION .)
    DRAW            reduce using rule 14 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 14 (ESTATUTO -> CONDICION .)
    INT             reduce using rule 14 (ESTATUTO -> CONDICION .)
    BOOLEAN         reduce using rule 14 (ESTATUTO -> CONDICION .)
    STRING          reduce using rule 14 (ESTATUTO -> CONDICION .)
    FLOAT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    VOID            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LBRA            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LPAR            reduce using rule 14 (ESTATUTO -> CONDICION .)
    ICTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    FCTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    ELSE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    END             reduce using rule 14 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 14 (ESTATUTO -> CONDICION .)


state 70

    (19) ESTATUTO -> IMPRIMIR .

    IF              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ID              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    DRAW            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    PRINT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    WHILE           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FOR             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    INT             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    BOOLEAN         reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    STRING          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FLOAT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    VOID            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LBRA            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LPAR            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ICTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FCTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ELSE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    END             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    RETURN          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)


state 71

    (37) PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE . END

    END             shift and go to state 102


state 72

    (76) ACCION -> ID . POINT DIBUJA LPAR VAR_CTE RPAR
    (32) LLAMADA_FUNCION -> ID . LPAR LLAMADA_FUNCIONP RPAR
    (71) FAC -> ID . operandPush FACT
    (104) operandPush -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
    POINT           shift and go to state 104
    LPAR            shift and go to state 103
    LBRA            reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

  ! LPAR            [ reduce using rule 1 (empty -> .) ]

    operandPush                    shift and go to state 105
    empty                          shift and go to state 106

state 73

    (42) CONDICION -> IF . LPAR EXPRE RPAR BLOQUE CONDICIONP END

    LPAR            shift and go to state 107


state 74

    (60) TERMINO -> FAC . genQuad1 TERMINO_W_SIGN
    (109) genQuad1 -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad1                       shift and go to state 108
    empty                          shift and go to state 109

state 75

    (16) ESTATUTO -> ACCION .

    IF              reduce using rule 16 (ESTATUTO -> ACCION .)
    ID              reduce using rule 16 (ESTATUTO -> ACCION .)
    DRAW            reduce using rule 16 (ESTATUTO -> ACCION .)
    PRINT           reduce using rule 16 (ESTATUTO -> ACCION .)
    WHILE           reduce using rule 16 (ESTATUTO -> ACCION .)
    FOR             reduce using rule 16 (ESTATUTO -> ACCION .)
    INT             reduce using rule 16 (ESTATUTO -> ACCION .)
    BOOLEAN         reduce using rule 16 (ESTATUTO -> ACCION .)
    STRING          reduce using rule 16 (ESTATUTO -> ACCION .)
    FLOAT           reduce using rule 16 (ESTATUTO -> ACCION .)
    VOID            reduce using rule 16 (ESTATUTO -> ACCION .)
    LBRA            reduce using rule 16 (ESTATUTO -> ACCION .)
    LPAR            reduce using rule 16 (ESTATUTO -> ACCION .)
    ICTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    FCTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    ELSE            reduce using rule 16 (ESTATUTO -> ACCION .)
    END             reduce using rule 16 (ESTATUTO -> ACCION .)
    RETURN          reduce using rule 16 (ESTATUTO -> ACCION .)


state 76

    (40) WHILEF -> WHILE . LPAR EXPRE RPAR BLOQUE END

    LPAR            shift and go to state 110


state 77

    (78) VAR_FUNP -> DATA_TIPOS . ID VAR_FUNZ

    ID              shift and go to state 111


state 78

    (77) VAR_FUN -> LPAR VAR_FUNP . RPAR

    RPAR            shift and go to state 112


state 79

    (79) VAR_FUNP -> empty .

    RPAR            reduce using rule 79 (VAR_FUNP -> empty .)


state 80

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE . RETURN EXPRE END restoreScope

    RETURN          shift and go to state 113


state 81

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI . LPAR RPAR

    LPAR            shift and go to state 114


state 82

    (13) ESTATUTO -> EXPRE genQuad5 .

    IF              reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ID              reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    DRAW            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    PRINT           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    WHILE           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FOR             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    INT             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    BOOLEAN         reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    STRING          reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FLOAT           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    VOID            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    LBRA            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    LPAR            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ICTE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FCTE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ELSE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    END             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    RETURN          reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)


state 83

    (112) genQuad5 -> empty .

    IF              reduce using rule 112 (genQuad5 -> empty .)
    ID              reduce using rule 112 (genQuad5 -> empty .)
    DRAW            reduce using rule 112 (genQuad5 -> empty .)
    PRINT           reduce using rule 112 (genQuad5 -> empty .)
    WHILE           reduce using rule 112 (genQuad5 -> empty .)
    FOR             reduce using rule 112 (genQuad5 -> empty .)
    INT             reduce using rule 112 (genQuad5 -> empty .)
    BOOLEAN         reduce using rule 112 (genQuad5 -> empty .)
    STRING          reduce using rule 112 (genQuad5 -> empty .)
    FLOAT           reduce using rule 112 (genQuad5 -> empty .)
    VOID            reduce using rule 112 (genQuad5 -> empty .)
    LBRA            reduce using rule 112 (genQuad5 -> empty .)
    LPAR            reduce using rule 112 (genQuad5 -> empty .)
    ICTE            reduce using rule 112 (genQuad5 -> empty .)
    FCTE            reduce using rule 112 (genQuad5 -> empty .)
    END             reduce using rule 112 (genQuad5 -> empty .)
    RETURN          reduce using rule 112 (genQuad5 -> empty .)
    ELSE            reduce using rule 112 (genQuad5 -> empty .)


state 84

    (51) EXPRE -> EXT EXPREZ .

    IF              reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    ID              reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    DRAW            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    PRINT           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    WHILE           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    FOR             reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    INT             reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    BOOLEAN         reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    STRING          reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    FLOAT           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    VOID            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    LBRA            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    LPAR            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    ICTE            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    FCTE            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    ELSE            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    END             reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    COMMA           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    RPAR            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    RETURN          reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    RBRA            reduce using rule 51 (EXPRE -> EXT EXPREZ .)


state 85

    (53) EXPREZ -> empty .

    IF              reduce using rule 53 (EXPREZ -> empty .)
    ID              reduce using rule 53 (EXPREZ -> empty .)
    DRAW            reduce using rule 53 (EXPREZ -> empty .)
    PRINT           reduce using rule 53 (EXPREZ -> empty .)
    WHILE           reduce using rule 53 (EXPREZ -> empty .)
    FOR             reduce using rule 53 (EXPREZ -> empty .)
    INT             reduce using rule 53 (EXPREZ -> empty .)
    BOOLEAN         reduce using rule 53 (EXPREZ -> empty .)
    STRING          reduce using rule 53 (EXPREZ -> empty .)
    FLOAT           reduce using rule 53 (EXPREZ -> empty .)
    VOID            reduce using rule 53 (EXPREZ -> empty .)
    LBRA            reduce using rule 53 (EXPREZ -> empty .)
    LPAR            reduce using rule 53 (EXPREZ -> empty .)
    ICTE            reduce using rule 53 (EXPREZ -> empty .)
    FCTE            reduce using rule 53 (EXPREZ -> empty .)
    END             reduce using rule 53 (EXPREZ -> empty .)
    RETURN          reduce using rule 53 (EXPREZ -> empty .)
    RPAR            reduce using rule 53 (EXPREZ -> empty .)
    RBRA            reduce using rule 53 (EXPREZ -> empty .)
    ELSE            reduce using rule 53 (EXPREZ -> empty .)
    COMMA           reduce using rule 53 (EXPREZ -> empty .)


state 86

    (52) EXPREZ -> EQUAL . operatorPush EXT
    (105) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 115
    empty                          shift and go to state 116

state 87

    (54) EXT -> EXP genQuad3 . EXT_W_RELOP
    (55) EXT_W_RELOP -> . RELOP operatorPush EXT
    (56) EXT_W_RELOP -> . empty
    (45) RELOP -> . LESSTH
    (46) RELOP -> . GREATERTH
    (47) RELOP -> . SEQUAL
    (48) RELOP -> . NOTEQ
    (49) RELOP -> . LESSEQTH
    (50) RELOP -> . GREATEREQTH
    (1) empty -> .

    LESSTH          shift and go to state 124
    GREATERTH       shift and go to state 123
    SEQUAL          shift and go to state 119
    NOTEQ           shift and go to state 120
    LESSEQTH        shift and go to state 117
    GREATEREQTH     shift and go to state 122
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    RELOP                          shift and go to state 118
    EXT_W_RELOP                    shift and go to state 121
    empty                          shift and go to state 125

state 88

    (111) genQuad3 -> empty .

    LESSTH          reduce using rule 111 (genQuad3 -> empty .)
    GREATERTH       reduce using rule 111 (genQuad3 -> empty .)
    SEQUAL          reduce using rule 111 (genQuad3 -> empty .)
    NOTEQ           reduce using rule 111 (genQuad3 -> empty .)
    LESSEQTH        reduce using rule 111 (genQuad3 -> empty .)
    GREATEREQTH     reduce using rule 111 (genQuad3 -> empty .)
    EQUAL           reduce using rule 111 (genQuad3 -> empty .)
    IF              reduce using rule 111 (genQuad3 -> empty .)
    ID              reduce using rule 111 (genQuad3 -> empty .)
    DRAW            reduce using rule 111 (genQuad3 -> empty .)
    PRINT           reduce using rule 111 (genQuad3 -> empty .)
    WHILE           reduce using rule 111 (genQuad3 -> empty .)
    FOR             reduce using rule 111 (genQuad3 -> empty .)
    INT             reduce using rule 111 (genQuad3 -> empty .)
    BOOLEAN         reduce using rule 111 (genQuad3 -> empty .)
    STRING          reduce using rule 111 (genQuad3 -> empty .)
    FLOAT           reduce using rule 111 (genQuad3 -> empty .)
    VOID            reduce using rule 111 (genQuad3 -> empty .)
    LBRA            reduce using rule 111 (genQuad3 -> empty .)
    LPAR            reduce using rule 111 (genQuad3 -> empty .)
    ICTE            reduce using rule 111 (genQuad3 -> empty .)
    FCTE            reduce using rule 111 (genQuad3 -> empty .)
    END             reduce using rule 111 (genQuad3 -> empty .)
    RETURN          reduce using rule 111 (genQuad3 -> empty .)
    RPAR            reduce using rule 111 (genQuad3 -> empty .)
    RBRA            reduce using rule 111 (genQuad3 -> empty .)
    ELSE            reduce using rule 111 (genQuad3 -> empty .)
    COMMA           reduce using rule 111 (genQuad3 -> empty .)


state 89

    (65) IMPRIMIR -> PRINT LBRA . IMPRIMIRZ RBRA
    (66) IMPRIMIRZ -> . EXPRE
    (67) IMPRIMIRZ -> . SCTE
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    SCTE            shift and go to state 128
    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 126
    empty                          shift and go to state 91
    IMPRIMIRZ                      shift and go to state 127
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74

state 90

    (70) FAC -> LBRA EXPRE . RPAR

    RPAR            shift and go to state 129


state 91

    (106) pushExp -> empty .
    (108) genQuad0 -> empty .

    LPAR            reduce using rule 106 (pushExp -> empty .)
    ICTE            reduce using rule 108 (genQuad0 -> empty .)
    FCTE            reduce using rule 108 (genQuad0 -> empty .)


state 92

    (71) FAC -> ID . operandPush FACT
    (104) operandPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    operandPush                    shift and go to state 105
    empty                          shift and go to state 106

state 93

    (20) BLOQUE -> ESTATUTO finishBlock . BLOQUE
    (20) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 73
    ID              shift and go to state 72
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 76
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 67
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 68
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 130
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 75
    CONDICION                      shift and go to state 69

state 94

    (103) finishBlock -> empty .

    IF              reduce using rule 103 (finishBlock -> empty .)
    ID              reduce using rule 103 (finishBlock -> empty .)
    DRAW            reduce using rule 103 (finishBlock -> empty .)
    PRINT           reduce using rule 103 (finishBlock -> empty .)
    WHILE           reduce using rule 103 (finishBlock -> empty .)
    FOR             reduce using rule 103 (finishBlock -> empty .)
    INT             reduce using rule 103 (finishBlock -> empty .)
    BOOLEAN         reduce using rule 103 (finishBlock -> empty .)
    STRING          reduce using rule 103 (finishBlock -> empty .)
    FLOAT           reduce using rule 103 (finishBlock -> empty .)
    VOID            reduce using rule 103 (finishBlock -> empty .)
    LBRA            reduce using rule 103 (finishBlock -> empty .)
    LPAR            reduce using rule 103 (finishBlock -> empty .)
    ICTE            reduce using rule 103 (finishBlock -> empty .)
    FCTE            reduce using rule 103 (finishBlock -> empty .)
    END             reduce using rule 103 (finishBlock -> empty .)
    RETURN          reduce using rule 103 (finishBlock -> empty .)
    ELSE            reduce using rule 103 (finishBlock -> empty .)


state 95

    (41) FORZ -> FOR LPAR . ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 131


state 96

    (57) EXP -> TERMINO genQuad2 . EXP_W_SIGN
    (58) EXP_W_SIGN -> . ASOP operatorPush EXP
    (59) EXP_W_SIGN -> . empty
    (27) ASOP -> . PLUS
    (28) ASOP -> . MINUS
    (1) empty -> .

    PLUS            shift and go to state 134
    MINUS           shift and go to state 135
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    ASOP                           shift and go to state 132
    EXP_W_SIGN                     shift and go to state 133
    empty                          shift and go to state 136

state 97

    (110) genQuad2 -> empty .

    PLUS            reduce using rule 110 (genQuad2 -> empty .)
    MINUS           reduce using rule 110 (genQuad2 -> empty .)
    LESSTH          reduce using rule 110 (genQuad2 -> empty .)
    GREATERTH       reduce using rule 110 (genQuad2 -> empty .)
    SEQUAL          reduce using rule 110 (genQuad2 -> empty .)
    NOTEQ           reduce using rule 110 (genQuad2 -> empty .)
    LESSEQTH        reduce using rule 110 (genQuad2 -> empty .)
    GREATEREQTH     reduce using rule 110 (genQuad2 -> empty .)
    EQUAL           reduce using rule 110 (genQuad2 -> empty .)
    IF              reduce using rule 110 (genQuad2 -> empty .)
    ID              reduce using rule 110 (genQuad2 -> empty .)
    DRAW            reduce using rule 110 (genQuad2 -> empty .)
    PRINT           reduce using rule 110 (genQuad2 -> empty .)
    WHILE           reduce using rule 110 (genQuad2 -> empty .)
    FOR             reduce using rule 110 (genQuad2 -> empty .)
    INT             reduce using rule 110 (genQuad2 -> empty .)
    BOOLEAN         reduce using rule 110 (genQuad2 -> empty .)
    STRING          reduce using rule 110 (genQuad2 -> empty .)
    FLOAT           reduce using rule 110 (genQuad2 -> empty .)
    VOID            reduce using rule 110 (genQuad2 -> empty .)
    LBRA            reduce using rule 110 (genQuad2 -> empty .)
    LPAR            reduce using rule 110 (genQuad2 -> empty .)
    ICTE            reduce using rule 110 (genQuad2 -> empty .)
    FCTE            reduce using rule 110 (genQuad2 -> empty .)
    END             reduce using rule 110 (genQuad2 -> empty .)
    RETURN          reduce using rule 110 (genQuad2 -> empty .)
    RPAR            reduce using rule 110 (genQuad2 -> empty .)
    RBRA            reduce using rule 110 (genQuad2 -> empty .)
    ELSE            reduce using rule 110 (genQuad2 -> empty .)
    COMMA           reduce using rule 110 (genQuad2 -> empty .)


state 98

    (68) FAC -> pushExp LPAR . EXPRE RPAR popExp
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 137
    empty                          shift and go to state 91
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74

state 99

    (69) FAC -> genQuad0 VAR_CTE . operandPush
    (104) operandPush -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    operandPush                    shift and go to state 138
    empty                          shift and go to state 106

state 100

    (64) VAR_CTE -> FCTE . addFloat
    (101) addFloat -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addFloat                       shift and go to state 139
    empty                          shift and go to state 140

state 101

    (63) VAR_CTE -> ICTE . addInt
    (102) addInt -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addInt                         shift and go to state 141
    empty                          shift and go to state 142

state 102

    (37) PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END .

    $end            reduce using rule 37 (PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END .)


state 103

    (32) LLAMADA_FUNCION -> ID LPAR . LLAMADA_FUNCIONP RPAR
    (33) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (34) LLAMADA_FUNCIONP -> . empty
    (51) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LBRA            shift and go to state 59
    ID              shift and go to state 92

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 144
    LLAMADA_FUNCIONP               shift and go to state 143
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74
    empty                          shift and go to state 145

state 104

    (76) ACCION -> ID POINT . DIBUJA LPAR VAR_CTE RPAR
    (82) DIBUJA -> . DEFINIRPOSICION
    (83) DIBUJA -> . DEFINIRCOLOR
    (84) DIBUJA -> . DERECHO
    (85) DIBUJA -> . REVERSA
    (86) DIBUJA -> . IZQUIERDA
    (87) DIBUJA -> . DERECHA
    (88) DIBUJA -> . VELOCIDAD
    (89) DIBUJA -> . BORRAR
    (90) DIBUJA -> . MOSTRAR
    (91) DIBUJA -> . OCULTAR
    (92) DIBUJA -> . CIRCULO
    (93) DIBUJA -> . DEFINIRX
    (94) DIBUJA -> . DEFINIRY
    (95) DIBUJA -> . ARCO
    (96) DIBUJA -> . GROSOR

    DEFINIRPOSICION shift and go to state 152
    DEFINIRCOLOR    shift and go to state 161
    DERECHO         shift and go to state 156
    REVERSA         shift and go to state 150
    IZQUIERDA       shift and go to state 154
    DERECHA         shift and go to state 146
    VELOCIDAD       shift and go to state 149
    BORRAR          shift and go to state 159
    MOSTRAR         shift and go to state 153
    OCULTAR         shift and go to state 151
    CIRCULO         shift and go to state 148
    DEFINIRX        shift and go to state 158
    DEFINIRY        shift and go to state 157
    ARCO            shift and go to state 147
    GROSOR          shift and go to state 160

    DIBUJA                         shift and go to state 155

state 105

    (71) FAC -> ID operandPush . FACT
    (72) FACT -> . LBRA EXPRE RBRA
    (73) FACT -> . LPAR EXPRE RPAR
    (74) FACT -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LBRA resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
    LBRA            shift and go to state 163
    LPAR            shift and go to state 162
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

  ! LBRA            [ reduce using rule 1 (empty -> .) ]
  ! LPAR            [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 164
    FACT                           shift and go to state 165

state 106

    (104) operandPush -> empty .

    LBRA            reduce using rule 104 (operandPush -> empty .)
    LPAR            reduce using rule 104 (operandPush -> empty .)
    MULT            reduce using rule 104 (operandPush -> empty .)
    DIVI            reduce using rule 104 (operandPush -> empty .)
    PLUS            reduce using rule 104 (operandPush -> empty .)
    MINUS           reduce using rule 104 (operandPush -> empty .)
    LESSTH          reduce using rule 104 (operandPush -> empty .)
    GREATERTH       reduce using rule 104 (operandPush -> empty .)
    SEQUAL          reduce using rule 104 (operandPush -> empty .)
    NOTEQ           reduce using rule 104 (operandPush -> empty .)
    LESSEQTH        reduce using rule 104 (operandPush -> empty .)
    GREATEREQTH     reduce using rule 104 (operandPush -> empty .)
    EQUAL           reduce using rule 104 (operandPush -> empty .)
    RPAR            reduce using rule 104 (operandPush -> empty .)
    RBRA            reduce using rule 104 (operandPush -> empty .)
    COMMA           reduce using rule 104 (operandPush -> empty .)
    ID              reduce using rule 104 (operandPush -> empty .)
    ICTE            reduce using rule 104 (operandPush -> empty .)
    FCTE            reduce using rule 104 (operandPush -> empty .)
    END             reduce using rule 104 (operandPush -> empty .)
    IF              reduce using rule 104 (operandPush -> empty .)
    DRAW            reduce using rule 104 (operandPush -> empty .)
    PRINT           reduce using rule 104 (operandPush -> empty .)
    WHILE           reduce using rule 104 (operandPush -> empty .)
    FOR             reduce using rule 104 (operandPush -> empty .)
    INT             reduce using rule 104 (operandPush -> empty .)
    BOOLEAN         reduce using rule 104 (operandPush -> empty .)
    STRING          reduce using rule 104 (operandPush -> empty .)
    FLOAT           reduce using rule 104 (operandPush -> empty .)
    VOID            reduce using rule 104 (operandPush -> empty .)
    RETURN          reduce using rule 104 (operandPush -> empty .)
    ELSE            reduce using rule 104 (operandPush -> empty .)


state 107

    (42) CONDICION -> IF LPAR . EXPRE RPAR BLOQUE CONDICIONP END
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 166
    empty                          shift and go to state 91
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74

state 108

    (60) TERMINO -> FAC genQuad1 . TERMINO_W_SIGN
    (61) TERMINO_W_SIGN -> . MDOP operatorPush TERMINO
    (62) TERMINO_W_SIGN -> . empty
    (29) MDOP -> . MULT
    (30) MDOP -> . DIVI
    (1) empty -> .

    MULT            shift and go to state 169
    DIVI            shift and go to state 167
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    MDOP                           shift and go to state 168
    empty                          shift and go to state 170
    TERMINO_W_SIGN                 shift and go to state 171

state 109

    (109) genQuad1 -> empty .

    MULT            reduce using rule 109 (genQuad1 -> empty .)
    DIVI            reduce using rule 109 (genQuad1 -> empty .)
    PLUS            reduce using rule 109 (genQuad1 -> empty .)
    MINUS           reduce using rule 109 (genQuad1 -> empty .)
    LESSTH          reduce using rule 109 (genQuad1 -> empty .)
    GREATERTH       reduce using rule 109 (genQuad1 -> empty .)
    SEQUAL          reduce using rule 109 (genQuad1 -> empty .)
    NOTEQ           reduce using rule 109 (genQuad1 -> empty .)
    LESSEQTH        reduce using rule 109 (genQuad1 -> empty .)
    GREATEREQTH     reduce using rule 109 (genQuad1 -> empty .)
    EQUAL           reduce using rule 109 (genQuad1 -> empty .)
    IF              reduce using rule 109 (genQuad1 -> empty .)
    ID              reduce using rule 109 (genQuad1 -> empty .)
    DRAW            reduce using rule 109 (genQuad1 -> empty .)
    PRINT           reduce using rule 109 (genQuad1 -> empty .)
    WHILE           reduce using rule 109 (genQuad1 -> empty .)
    FOR             reduce using rule 109 (genQuad1 -> empty .)
    INT             reduce using rule 109 (genQuad1 -> empty .)
    BOOLEAN         reduce using rule 109 (genQuad1 -> empty .)
    STRING          reduce using rule 109 (genQuad1 -> empty .)
    FLOAT           reduce using rule 109 (genQuad1 -> empty .)
    VOID            reduce using rule 109 (genQuad1 -> empty .)
    LBRA            reduce using rule 109 (genQuad1 -> empty .)
    LPAR            reduce using rule 109 (genQuad1 -> empty .)
    ICTE            reduce using rule 109 (genQuad1 -> empty .)
    FCTE            reduce using rule 109 (genQuad1 -> empty .)
    END             reduce using rule 109 (genQuad1 -> empty .)
    RETURN          reduce using rule 109 (genQuad1 -> empty .)
    RPAR            reduce using rule 109 (genQuad1 -> empty .)
    RBRA            reduce using rule 109 (genQuad1 -> empty .)
    ELSE            reduce using rule 109 (genQuad1 -> empty .)
    COMMA           reduce using rule 109 (genQuad1 -> empty .)


state 110

    (40) WHILEF -> WHILE LPAR . EXPRE RPAR BLOQUE END
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 172
    empty                          shift and go to state 91
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74

state 111

    (78) VAR_FUNP -> DATA_TIPOS ID . VAR_FUNZ
    (80) VAR_FUNZ -> . COMMA VAR_FUNP
    (81) VAR_FUNZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 174
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 175
    VAR_FUNZ                       shift and go to state 173

state 112

    (77) VAR_FUN -> LPAR VAR_FUNP RPAR .

    IF              reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ID              reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    DRAW            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    PRINT           reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    WHILE           reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FOR             reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    INT             reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    BOOLEAN         reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    STRING          reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FLOAT           reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    VOID            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LBRA            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    RETURN          reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LPAR            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ICTE            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FCTE            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)


state 113

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN . EXPRE END restoreScope
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    EXPRE                          shift and go to state 176
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    genQuad0                       shift and go to state 66
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 91

state 114

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR . RPAR

    RPAR            shift and go to state 177


state 115

    (52) EXPREZ -> EQUAL operatorPush . EXT
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    empty                          shift and go to state 91
    EXT                            shift and go to state 178
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74
    genQuad0                       shift and go to state 66

state 116

    (105) operatorPush -> empty .

    LBRA            reduce using rule 105 (operatorPush -> empty .)
    ID              reduce using rule 105 (operatorPush -> empty .)
    LPAR            reduce using rule 105 (operatorPush -> empty .)
    ICTE            reduce using rule 105 (operatorPush -> empty .)
    FCTE            reduce using rule 105 (operatorPush -> empty .)


state 117

    (49) RELOP -> LESSEQTH .

    LBRA            reduce using rule 49 (RELOP -> LESSEQTH .)
    ID              reduce using rule 49 (RELOP -> LESSEQTH .)
    LPAR            reduce using rule 49 (RELOP -> LESSEQTH .)
    ICTE            reduce using rule 49 (RELOP -> LESSEQTH .)
    FCTE            reduce using rule 49 (RELOP -> LESSEQTH .)


state 118

    (55) EXT_W_RELOP -> RELOP . operatorPush EXT
    (105) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 179
    empty                          shift and go to state 116

state 119

    (47) RELOP -> SEQUAL .

    LBRA            reduce using rule 47 (RELOP -> SEQUAL .)
    ID              reduce using rule 47 (RELOP -> SEQUAL .)
    LPAR            reduce using rule 47 (RELOP -> SEQUAL .)
    ICTE            reduce using rule 47 (RELOP -> SEQUAL .)
    FCTE            reduce using rule 47 (RELOP -> SEQUAL .)


state 120

    (48) RELOP -> NOTEQ .

    LBRA            reduce using rule 48 (RELOP -> NOTEQ .)
    ID              reduce using rule 48 (RELOP -> NOTEQ .)
    LPAR            reduce using rule 48 (RELOP -> NOTEQ .)
    ICTE            reduce using rule 48 (RELOP -> NOTEQ .)
    FCTE            reduce using rule 48 (RELOP -> NOTEQ .)


state 121

    (54) EXT -> EXP genQuad3 EXT_W_RELOP .

    EQUAL           reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    RPAR            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    IF              reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    ID              reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    DRAW            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    PRINT           reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    WHILE           reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    FOR             reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    INT             reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    BOOLEAN         reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    STRING          reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    FLOAT           reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    VOID            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    LBRA            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    LPAR            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    ICTE            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    FCTE            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    END             reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    RETURN          reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    ELSE            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    RBRA            reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    COMMA           reduce using rule 54 (EXT -> EXP genQuad3 EXT_W_RELOP .)


state 122

    (50) RELOP -> GREATEREQTH .

    LBRA            reduce using rule 50 (RELOP -> GREATEREQTH .)
    ID              reduce using rule 50 (RELOP -> GREATEREQTH .)
    LPAR            reduce using rule 50 (RELOP -> GREATEREQTH .)
    ICTE            reduce using rule 50 (RELOP -> GREATEREQTH .)
    FCTE            reduce using rule 50 (RELOP -> GREATEREQTH .)


state 123

    (46) RELOP -> GREATERTH .

    LBRA            reduce using rule 46 (RELOP -> GREATERTH .)
    ID              reduce using rule 46 (RELOP -> GREATERTH .)
    LPAR            reduce using rule 46 (RELOP -> GREATERTH .)
    ICTE            reduce using rule 46 (RELOP -> GREATERTH .)
    FCTE            reduce using rule 46 (RELOP -> GREATERTH .)


state 124

    (45) RELOP -> LESSTH .

    LBRA            reduce using rule 45 (RELOP -> LESSTH .)
    ID              reduce using rule 45 (RELOP -> LESSTH .)
    LPAR            reduce using rule 45 (RELOP -> LESSTH .)
    ICTE            reduce using rule 45 (RELOP -> LESSTH .)
    FCTE            reduce using rule 45 (RELOP -> LESSTH .)


state 125

    (56) EXT_W_RELOP -> empty .

    EQUAL           reduce using rule 56 (EXT_W_RELOP -> empty .)
    IF              reduce using rule 56 (EXT_W_RELOP -> empty .)
    ID              reduce using rule 56 (EXT_W_RELOP -> empty .)
    DRAW            reduce using rule 56 (EXT_W_RELOP -> empty .)
    PRINT           reduce using rule 56 (EXT_W_RELOP -> empty .)
    WHILE           reduce using rule 56 (EXT_W_RELOP -> empty .)
    FOR             reduce using rule 56 (EXT_W_RELOP -> empty .)
    INT             reduce using rule 56 (EXT_W_RELOP -> empty .)
    BOOLEAN         reduce using rule 56 (EXT_W_RELOP -> empty .)
    STRING          reduce using rule 56 (EXT_W_RELOP -> empty .)
    FLOAT           reduce using rule 56 (EXT_W_RELOP -> empty .)
    VOID            reduce using rule 56 (EXT_W_RELOP -> empty .)
    LBRA            reduce using rule 56 (EXT_W_RELOP -> empty .)
    LPAR            reduce using rule 56 (EXT_W_RELOP -> empty .)
    ICTE            reduce using rule 56 (EXT_W_RELOP -> empty .)
    FCTE            reduce using rule 56 (EXT_W_RELOP -> empty .)
    END             reduce using rule 56 (EXT_W_RELOP -> empty .)
    RETURN          reduce using rule 56 (EXT_W_RELOP -> empty .)
    RPAR            reduce using rule 56 (EXT_W_RELOP -> empty .)
    RBRA            reduce using rule 56 (EXT_W_RELOP -> empty .)
    ELSE            reduce using rule 56 (EXT_W_RELOP -> empty .)
    COMMA           reduce using rule 56 (EXT_W_RELOP -> empty .)


state 126

    (66) IMPRIMIRZ -> EXPRE .

    RBRA            reduce using rule 66 (IMPRIMIRZ -> EXPRE .)


state 127

    (65) IMPRIMIR -> PRINT LBRA IMPRIMIRZ . RBRA

    RBRA            shift and go to state 180


state 128

    (67) IMPRIMIRZ -> SCTE .

    RBRA            reduce using rule 67 (IMPRIMIRZ -> SCTE .)


state 129

    (70) FAC -> LBRA EXPRE RPAR .

    MULT            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    DIVI            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    PLUS            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    MINUS           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LESSTH          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    GREATERTH       reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    SEQUAL          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    NOTEQ           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LESSEQTH        reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    GREATEREQTH     reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    EQUAL           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    RPAR            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    IF              reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    ID              reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    DRAW            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    PRINT           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    WHILE           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    FOR             reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    INT             reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    BOOLEAN         reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    STRING          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    FLOAT           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    VOID            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LBRA            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LPAR            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    ICTE            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    FCTE            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    RETURN          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    END             reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    RBRA            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    ELSE            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    COMMA           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)


state 130

    (20) BLOQUE -> ESTATUTO finishBlock BLOQUE .

    END             reduce using rule 20 (BLOQUE -> ESTATUTO finishBlock BLOQUE .)
    ELSE            reduce using rule 20 (BLOQUE -> ESTATUTO finishBlock BLOQUE .)
    RETURN          reduce using rule 20 (BLOQUE -> ESTATUTO finishBlock BLOQUE .)


state 131

    (41) FORZ -> FOR LPAR ICTE . COMMA ICTE COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 181


state 132

    (58) EXP_W_SIGN -> ASOP . operatorPush EXP
    (105) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 182
    empty                          shift and go to state 116

state 133

    (57) EXP -> TERMINO genQuad2 EXP_W_SIGN .

    LESSTH          reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    GREATERTH       reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    SEQUAL          reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    NOTEQ           reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    LESSEQTH        reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    GREATEREQTH     reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    EQUAL           reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    IF              reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    ID              reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    DRAW            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    PRINT           reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    WHILE           reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    FOR             reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    INT             reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    BOOLEAN         reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    STRING          reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    FLOAT           reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    VOID            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    LBRA            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    LPAR            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    ICTE            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    FCTE            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    END             reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    RPAR            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    RETURN          reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    RBRA            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    ELSE            reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    COMMA           reduce using rule 57 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)


state 134

    (27) ASOP -> PLUS .

    LBRA            reduce using rule 27 (ASOP -> PLUS .)
    ID              reduce using rule 27 (ASOP -> PLUS .)
    LPAR            reduce using rule 27 (ASOP -> PLUS .)
    ICTE            reduce using rule 27 (ASOP -> PLUS .)
    FCTE            reduce using rule 27 (ASOP -> PLUS .)


state 135

    (28) ASOP -> MINUS .

    LBRA            reduce using rule 28 (ASOP -> MINUS .)
    ID              reduce using rule 28 (ASOP -> MINUS .)
    LPAR            reduce using rule 28 (ASOP -> MINUS .)
    ICTE            reduce using rule 28 (ASOP -> MINUS .)
    FCTE            reduce using rule 28 (ASOP -> MINUS .)


state 136

    (59) EXP_W_SIGN -> empty .

    LESSTH          reduce using rule 59 (EXP_W_SIGN -> empty .)
    GREATERTH       reduce using rule 59 (EXP_W_SIGN -> empty .)
    SEQUAL          reduce using rule 59 (EXP_W_SIGN -> empty .)
    NOTEQ           reduce using rule 59 (EXP_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 59 (EXP_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 59 (EXP_W_SIGN -> empty .)
    EQUAL           reduce using rule 59 (EXP_W_SIGN -> empty .)
    IF              reduce using rule 59 (EXP_W_SIGN -> empty .)
    ID              reduce using rule 59 (EXP_W_SIGN -> empty .)
    DRAW            reduce using rule 59 (EXP_W_SIGN -> empty .)
    PRINT           reduce using rule 59 (EXP_W_SIGN -> empty .)
    WHILE           reduce using rule 59 (EXP_W_SIGN -> empty .)
    FOR             reduce using rule 59 (EXP_W_SIGN -> empty .)
    INT             reduce using rule 59 (EXP_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 59 (EXP_W_SIGN -> empty .)
    STRING          reduce using rule 59 (EXP_W_SIGN -> empty .)
    FLOAT           reduce using rule 59 (EXP_W_SIGN -> empty .)
    VOID            reduce using rule 59 (EXP_W_SIGN -> empty .)
    LBRA            reduce using rule 59 (EXP_W_SIGN -> empty .)
    LPAR            reduce using rule 59 (EXP_W_SIGN -> empty .)
    ICTE            reduce using rule 59 (EXP_W_SIGN -> empty .)
    FCTE            reduce using rule 59 (EXP_W_SIGN -> empty .)
    END             reduce using rule 59 (EXP_W_SIGN -> empty .)
    RETURN          reduce using rule 59 (EXP_W_SIGN -> empty .)
    RPAR            reduce using rule 59 (EXP_W_SIGN -> empty .)
    RBRA            reduce using rule 59 (EXP_W_SIGN -> empty .)
    ELSE            reduce using rule 59 (EXP_W_SIGN -> empty .)
    COMMA           reduce using rule 59 (EXP_W_SIGN -> empty .)


state 137

    (68) FAC -> pushExp LPAR EXPRE . RPAR popExp

    RPAR            shift and go to state 183


state 138

    (69) FAC -> genQuad0 VAR_CTE operandPush .

    MULT            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    DIVI            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    PLUS            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    MINUS           reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    LESSTH          reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    GREATERTH       reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    SEQUAL          reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    NOTEQ           reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    LESSEQTH        reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    GREATEREQTH     reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    EQUAL           reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    RPAR            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    IF              reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    ID              reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    DRAW            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    PRINT           reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    WHILE           reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    FOR             reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    INT             reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    BOOLEAN         reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    STRING          reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    FLOAT           reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    VOID            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    LBRA            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    LPAR            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    ICTE            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    FCTE            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    RETURN          reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    END             reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    RBRA            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    ELSE            reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)
    COMMA           reduce using rule 69 (FAC -> genQuad0 VAR_CTE operandPush .)


state 139

    (64) VAR_CTE -> FCTE addFloat .

    RPAR            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    MULT            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    DIVI            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    PLUS            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    MINUS           reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    LESSTH          reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    GREATERTH       reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    SEQUAL          reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    NOTEQ           reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    LESSEQTH        reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    GREATEREQTH     reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    EQUAL           reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    IF              reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    ID              reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    DRAW            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    PRINT           reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    WHILE           reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    FOR             reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    INT             reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    BOOLEAN         reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    STRING          reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    FLOAT           reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    VOID            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    LBRA            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    LPAR            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    ICTE            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    FCTE            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    END             reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    RETURN          reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    RBRA            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    ELSE            reduce using rule 64 (VAR_CTE -> FCTE addFloat .)
    COMMA           reduce using rule 64 (VAR_CTE -> FCTE addFloat .)


state 140

    (101) addFloat -> empty .

    MULT            reduce using rule 101 (addFloat -> empty .)
    DIVI            reduce using rule 101 (addFloat -> empty .)
    PLUS            reduce using rule 101 (addFloat -> empty .)
    MINUS           reduce using rule 101 (addFloat -> empty .)
    LESSTH          reduce using rule 101 (addFloat -> empty .)
    GREATERTH       reduce using rule 101 (addFloat -> empty .)
    SEQUAL          reduce using rule 101 (addFloat -> empty .)
    NOTEQ           reduce using rule 101 (addFloat -> empty .)
    LESSEQTH        reduce using rule 101 (addFloat -> empty .)
    GREATEREQTH     reduce using rule 101 (addFloat -> empty .)
    EQUAL           reduce using rule 101 (addFloat -> empty .)
    IF              reduce using rule 101 (addFloat -> empty .)
    ID              reduce using rule 101 (addFloat -> empty .)
    DRAW            reduce using rule 101 (addFloat -> empty .)
    PRINT           reduce using rule 101 (addFloat -> empty .)
    WHILE           reduce using rule 101 (addFloat -> empty .)
    FOR             reduce using rule 101 (addFloat -> empty .)
    INT             reduce using rule 101 (addFloat -> empty .)
    BOOLEAN         reduce using rule 101 (addFloat -> empty .)
    STRING          reduce using rule 101 (addFloat -> empty .)
    FLOAT           reduce using rule 101 (addFloat -> empty .)
    VOID            reduce using rule 101 (addFloat -> empty .)
    LBRA            reduce using rule 101 (addFloat -> empty .)
    LPAR            reduce using rule 101 (addFloat -> empty .)
    ICTE            reduce using rule 101 (addFloat -> empty .)
    FCTE            reduce using rule 101 (addFloat -> empty .)
    END             reduce using rule 101 (addFloat -> empty .)
    RETURN          reduce using rule 101 (addFloat -> empty .)
    RPAR            reduce using rule 101 (addFloat -> empty .)
    RBRA            reduce using rule 101 (addFloat -> empty .)
    ELSE            reduce using rule 101 (addFloat -> empty .)
    COMMA           reduce using rule 101 (addFloat -> empty .)


state 141

    (63) VAR_CTE -> ICTE addInt .

    RPAR            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    MULT            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    DIVI            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    PLUS            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    MINUS           reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    LESSTH          reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    GREATERTH       reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    SEQUAL          reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    NOTEQ           reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    LESSEQTH        reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    GREATEREQTH     reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    EQUAL           reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    IF              reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    ID              reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    DRAW            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    PRINT           reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    WHILE           reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    FOR             reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    INT             reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    BOOLEAN         reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    STRING          reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    FLOAT           reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    VOID            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    LBRA            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    LPAR            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    ICTE            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    FCTE            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    END             reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    RETURN          reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    RBRA            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    ELSE            reduce using rule 63 (VAR_CTE -> ICTE addInt .)
    COMMA           reduce using rule 63 (VAR_CTE -> ICTE addInt .)


state 142

    (102) addInt -> empty .

    MULT            reduce using rule 102 (addInt -> empty .)
    DIVI            reduce using rule 102 (addInt -> empty .)
    PLUS            reduce using rule 102 (addInt -> empty .)
    MINUS           reduce using rule 102 (addInt -> empty .)
    LESSTH          reduce using rule 102 (addInt -> empty .)
    GREATERTH       reduce using rule 102 (addInt -> empty .)
    SEQUAL          reduce using rule 102 (addInt -> empty .)
    NOTEQ           reduce using rule 102 (addInt -> empty .)
    LESSEQTH        reduce using rule 102 (addInt -> empty .)
    GREATEREQTH     reduce using rule 102 (addInt -> empty .)
    EQUAL           reduce using rule 102 (addInt -> empty .)
    IF              reduce using rule 102 (addInt -> empty .)
    ID              reduce using rule 102 (addInt -> empty .)
    DRAW            reduce using rule 102 (addInt -> empty .)
    PRINT           reduce using rule 102 (addInt -> empty .)
    WHILE           reduce using rule 102 (addInt -> empty .)
    FOR             reduce using rule 102 (addInt -> empty .)
    INT             reduce using rule 102 (addInt -> empty .)
    BOOLEAN         reduce using rule 102 (addInt -> empty .)
    STRING          reduce using rule 102 (addInt -> empty .)
    FLOAT           reduce using rule 102 (addInt -> empty .)
    VOID            reduce using rule 102 (addInt -> empty .)
    LBRA            reduce using rule 102 (addInt -> empty .)
    LPAR            reduce using rule 102 (addInt -> empty .)
    ICTE            reduce using rule 102 (addInt -> empty .)
    FCTE            reduce using rule 102 (addInt -> empty .)
    END             reduce using rule 102 (addInt -> empty .)
    RETURN          reduce using rule 102 (addInt -> empty .)
    RPAR            reduce using rule 102 (addInt -> empty .)
    RBRA            reduce using rule 102 (addInt -> empty .)
    ELSE            reduce using rule 102 (addInt -> empty .)
    COMMA           reduce using rule 102 (addInt -> empty .)


state 143

    (32) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP . RPAR

    RPAR            shift and go to state 184


state 144

    (33) LLAMADA_FUNCIONP -> EXPRE . LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (35) LLAMADA_FUNCIONZ -> . COMMA
    (36) LLAMADA_FUNCIONZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 186
    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)

    LLAMADA_FUNCIONZ               shift and go to state 185
    empty                          shift and go to state 187

state 145

    (34) LLAMADA_FUNCIONP -> empty .
    (106) pushExp -> empty .
    (108) genQuad0 -> empty .

    RPAR            reduce using rule 34 (LLAMADA_FUNCIONP -> empty .)
    LPAR            reduce using rule 106 (pushExp -> empty .)
    ICTE            reduce using rule 108 (genQuad0 -> empty .)
    FCTE            reduce using rule 108 (genQuad0 -> empty .)


state 146

    (87) DIBUJA -> DERECHA .

    LPAR            reduce using rule 87 (DIBUJA -> DERECHA .)


state 147

    (95) DIBUJA -> ARCO .

    LPAR            reduce using rule 95 (DIBUJA -> ARCO .)


state 148

    (92) DIBUJA -> CIRCULO .

    LPAR            reduce using rule 92 (DIBUJA -> CIRCULO .)


state 149

    (88) DIBUJA -> VELOCIDAD .

    LPAR            reduce using rule 88 (DIBUJA -> VELOCIDAD .)


state 150

    (85) DIBUJA -> REVERSA .

    LPAR            reduce using rule 85 (DIBUJA -> REVERSA .)


state 151

    (91) DIBUJA -> OCULTAR .

    LPAR            reduce using rule 91 (DIBUJA -> OCULTAR .)


state 152

    (82) DIBUJA -> DEFINIRPOSICION .

    LPAR            reduce using rule 82 (DIBUJA -> DEFINIRPOSICION .)


state 153

    (90) DIBUJA -> MOSTRAR .

    LPAR            reduce using rule 90 (DIBUJA -> MOSTRAR .)


state 154

    (86) DIBUJA -> IZQUIERDA .

    LPAR            reduce using rule 86 (DIBUJA -> IZQUIERDA .)


state 155

    (76) ACCION -> ID POINT DIBUJA . LPAR VAR_CTE RPAR

    LPAR            shift and go to state 188


state 156

    (84) DIBUJA -> DERECHO .

    LPAR            reduce using rule 84 (DIBUJA -> DERECHO .)


state 157

    (94) DIBUJA -> DEFINIRY .

    LPAR            reduce using rule 94 (DIBUJA -> DEFINIRY .)


state 158

    (93) DIBUJA -> DEFINIRX .

    LPAR            reduce using rule 93 (DIBUJA -> DEFINIRX .)


state 159

    (89) DIBUJA -> BORRAR .

    LPAR            reduce using rule 89 (DIBUJA -> BORRAR .)


state 160

    (96) DIBUJA -> GROSOR .

    LPAR            reduce using rule 96 (DIBUJA -> GROSOR .)


state 161

    (83) DIBUJA -> DEFINIRCOLOR .

    LPAR            reduce using rule 83 (DIBUJA -> DEFINIRCOLOR .)


state 162

    (73) FACT -> LPAR . EXPRE RPAR
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 189
    empty                          shift and go to state 91
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74

state 163

    (72) FACT -> LBRA . EXPRE RBRA
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 190
    empty                          shift and go to state 91
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74

state 164

    (74) FACT -> empty .

    MULT            reduce using rule 74 (FACT -> empty .)
    DIVI            reduce using rule 74 (FACT -> empty .)
    PLUS            reduce using rule 74 (FACT -> empty .)
    MINUS           reduce using rule 74 (FACT -> empty .)
    LESSTH          reduce using rule 74 (FACT -> empty .)
    GREATERTH       reduce using rule 74 (FACT -> empty .)
    SEQUAL          reduce using rule 74 (FACT -> empty .)
    NOTEQ           reduce using rule 74 (FACT -> empty .)
    LESSEQTH        reduce using rule 74 (FACT -> empty .)
    GREATEREQTH     reduce using rule 74 (FACT -> empty .)
    EQUAL           reduce using rule 74 (FACT -> empty .)
    IF              reduce using rule 74 (FACT -> empty .)
    ID              reduce using rule 74 (FACT -> empty .)
    DRAW            reduce using rule 74 (FACT -> empty .)
    PRINT           reduce using rule 74 (FACT -> empty .)
    WHILE           reduce using rule 74 (FACT -> empty .)
    FOR             reduce using rule 74 (FACT -> empty .)
    INT             reduce using rule 74 (FACT -> empty .)
    BOOLEAN         reduce using rule 74 (FACT -> empty .)
    STRING          reduce using rule 74 (FACT -> empty .)
    FLOAT           reduce using rule 74 (FACT -> empty .)
    VOID            reduce using rule 74 (FACT -> empty .)
    LBRA            reduce using rule 74 (FACT -> empty .)
    LPAR            reduce using rule 74 (FACT -> empty .)
    ICTE            reduce using rule 74 (FACT -> empty .)
    FCTE            reduce using rule 74 (FACT -> empty .)
    END             reduce using rule 74 (FACT -> empty .)
    RETURN          reduce using rule 74 (FACT -> empty .)
    RPAR            reduce using rule 74 (FACT -> empty .)
    RBRA            reduce using rule 74 (FACT -> empty .)
    ELSE            reduce using rule 74 (FACT -> empty .)
    COMMA           reduce using rule 74 (FACT -> empty .)


state 165

    (71) FAC -> ID operandPush FACT .

    MULT            reduce using rule 71 (FAC -> ID operandPush FACT .)
    DIVI            reduce using rule 71 (FAC -> ID operandPush FACT .)
    PLUS            reduce using rule 71 (FAC -> ID operandPush FACT .)
    MINUS           reduce using rule 71 (FAC -> ID operandPush FACT .)
    LESSTH          reduce using rule 71 (FAC -> ID operandPush FACT .)
    GREATERTH       reduce using rule 71 (FAC -> ID operandPush FACT .)
    SEQUAL          reduce using rule 71 (FAC -> ID operandPush FACT .)
    NOTEQ           reduce using rule 71 (FAC -> ID operandPush FACT .)
    LESSEQTH        reduce using rule 71 (FAC -> ID operandPush FACT .)
    GREATEREQTH     reduce using rule 71 (FAC -> ID operandPush FACT .)
    EQUAL           reduce using rule 71 (FAC -> ID operandPush FACT .)
    RPAR            reduce using rule 71 (FAC -> ID operandPush FACT .)
    IF              reduce using rule 71 (FAC -> ID operandPush FACT .)
    ID              reduce using rule 71 (FAC -> ID operandPush FACT .)
    DRAW            reduce using rule 71 (FAC -> ID operandPush FACT .)
    PRINT           reduce using rule 71 (FAC -> ID operandPush FACT .)
    WHILE           reduce using rule 71 (FAC -> ID operandPush FACT .)
    FOR             reduce using rule 71 (FAC -> ID operandPush FACT .)
    INT             reduce using rule 71 (FAC -> ID operandPush FACT .)
    BOOLEAN         reduce using rule 71 (FAC -> ID operandPush FACT .)
    STRING          reduce using rule 71 (FAC -> ID operandPush FACT .)
    FLOAT           reduce using rule 71 (FAC -> ID operandPush FACT .)
    VOID            reduce using rule 71 (FAC -> ID operandPush FACT .)
    LBRA            reduce using rule 71 (FAC -> ID operandPush FACT .)
    LPAR            reduce using rule 71 (FAC -> ID operandPush FACT .)
    ICTE            reduce using rule 71 (FAC -> ID operandPush FACT .)
    FCTE            reduce using rule 71 (FAC -> ID operandPush FACT .)
    RETURN          reduce using rule 71 (FAC -> ID operandPush FACT .)
    END             reduce using rule 71 (FAC -> ID operandPush FACT .)
    RBRA            reduce using rule 71 (FAC -> ID operandPush FACT .)
    ELSE            reduce using rule 71 (FAC -> ID operandPush FACT .)
    COMMA           reduce using rule 71 (FAC -> ID operandPush FACT .)


state 166

    (42) CONDICION -> IF LPAR EXPRE . RPAR BLOQUE CONDICIONP END

    RPAR            shift and go to state 191


state 167

    (30) MDOP -> DIVI .

    LBRA            reduce using rule 30 (MDOP -> DIVI .)
    ID              reduce using rule 30 (MDOP -> DIVI .)
    LPAR            reduce using rule 30 (MDOP -> DIVI .)
    ICTE            reduce using rule 30 (MDOP -> DIVI .)
    FCTE            reduce using rule 30 (MDOP -> DIVI .)


state 168

    (61) TERMINO_W_SIGN -> MDOP . operatorPush TERMINO
    (105) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 192
    empty                          shift and go to state 116

state 169

    (29) MDOP -> MULT .

    LBRA            reduce using rule 29 (MDOP -> MULT .)
    ID              reduce using rule 29 (MDOP -> MULT .)
    LPAR            reduce using rule 29 (MDOP -> MULT .)
    ICTE            reduce using rule 29 (MDOP -> MULT .)
    FCTE            reduce using rule 29 (MDOP -> MULT .)


state 170

    (62) TERMINO_W_SIGN -> empty .

    PLUS            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    MINUS           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LESSTH          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    GREATERTH       reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    SEQUAL          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    NOTEQ           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    EQUAL           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    IF              reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    ID              reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    DRAW            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    PRINT           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    WHILE           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    FOR             reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    INT             reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    STRING          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    FLOAT           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    VOID            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LBRA            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LPAR            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    ICTE            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    FCTE            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    END             reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    RETURN          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    RPAR            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    RBRA            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    ELSE            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    COMMA           reduce using rule 62 (TERMINO_W_SIGN -> empty .)


state 171

    (60) TERMINO -> FAC genQuad1 TERMINO_W_SIGN .

    PLUS            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    MINUS           reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LESSTH          reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    GREATERTH       reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    SEQUAL          reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    NOTEQ           reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LESSEQTH        reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    GREATEREQTH     reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    EQUAL           reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    RPAR            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    IF              reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    ID              reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    DRAW            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    PRINT           reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    WHILE           reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    FOR             reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    INT             reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    BOOLEAN         reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    STRING          reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    FLOAT           reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    VOID            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LBRA            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LPAR            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    ICTE            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    FCTE            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    END             reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    RETURN          reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    ELSE            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    RBRA            reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    COMMA           reduce using rule 60 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)


state 172

    (40) WHILEF -> WHILE LPAR EXPRE . RPAR BLOQUE END

    RPAR            shift and go to state 193


state 173

    (78) VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .

    RPAR            reduce using rule 78 (VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .)


state 174

    (80) VAR_FUNZ -> COMMA . VAR_FUNP
    (78) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (79) VAR_FUNP -> . empty
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (1) empty -> .

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 79
    DATA_TIPOS                     shift and go to state 77
    VAR_FUNP                       shift and go to state 194

state 175

    (81) VAR_FUNZ -> empty .

    RPAR            reduce using rule 81 (VAR_FUNZ -> empty .)


state 176

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE . END restoreScope

    END             shift and go to state 195


state 177

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .

    IF              reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ID              reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    DRAW            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    PRINT           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    WHILE           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FOR             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    INT             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    BOOLEAN         reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    STRING          reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FLOAT           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    VOID            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    LBRA            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    LPAR            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ICTE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FCTE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    END             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    RETURN          reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ELSE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)


state 178

    (52) EXPREZ -> EQUAL operatorPush EXT .

    IF              reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    ID              reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    DRAW            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    PRINT           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    WHILE           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    FOR             reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    INT             reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    BOOLEAN         reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    STRING          reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    FLOAT           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    VOID            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    LBRA            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    LPAR            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    ICTE            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    FCTE            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    END             reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    RETURN          reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    RPAR            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    RBRA            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    ELSE            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    COMMA           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)


state 179

    (55) EXT_W_RELOP -> RELOP operatorPush . EXT
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    empty                          shift and go to state 91
    EXT                            shift and go to state 196
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74
    genQuad0                       shift and go to state 66

state 180

    (65) IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .

    IF              reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ID              reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    DRAW            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    PRINT           reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    WHILE           reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FOR             reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    INT             reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    BOOLEAN         reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    STRING          reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FLOAT           reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    VOID            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    LBRA            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    LPAR            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ICTE            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FCTE            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ELSE            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    END             reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    RETURN          reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)


state 181

    (41) FORZ -> FOR LPAR ICTE COMMA . ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 197


state 182

    (58) EXP_W_SIGN -> ASOP operatorPush . EXP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    empty                          shift and go to state 91
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 198
    FAC                            shift and go to state 74
    genQuad0                       shift and go to state 66

state 183

    (68) FAC -> pushExp LPAR EXPRE RPAR . popExp
    (107) popExp -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    popExp                         shift and go to state 199
    empty                          shift and go to state 200

state 184

    (32) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .

    IF              reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ID              reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    DRAW            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    PRINT           reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    WHILE           reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FOR             reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    INT             reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    BOOLEAN         reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    STRING          reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FLOAT           reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    VOID            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LBRA            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LPAR            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ICTE            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FCTE            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    END             reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    RETURN          reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ELSE            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)


state 185

    (33) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ . LLAMADA_FUNCIONP
    (33) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (34) LLAMADA_FUNCIONP -> . empty
    (51) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LBRA            shift and go to state 59
    ID              shift and go to state 92

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 144
    LLAMADA_FUNCIONP               shift and go to state 201
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 74
    empty                          shift and go to state 145

state 186

    (35) LLAMADA_FUNCIONZ -> COMMA .

    LBRA            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    ID              reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    LPAR            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    ICTE            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    FCTE            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    RPAR            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)


state 187

    (36) LLAMADA_FUNCIONZ -> empty .

    LBRA            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    ID              reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    LPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    ICTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    FCTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    RPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)


state 188

    (76) ACCION -> ID POINT DIBUJA LPAR . VAR_CTE RPAR
    (63) VAR_CTE -> . ICTE addInt
    (64) VAR_CTE -> . FCTE addFloat

    ICTE            shift and go to state 101
    FCTE            shift and go to state 100

    VAR_CTE                        shift and go to state 202

state 189

    (73) FACT -> LPAR EXPRE . RPAR

    RPAR            shift and go to state 203


state 190

    (72) FACT -> LBRA EXPRE . RBRA

    RBRA            shift and go to state 204


state 191

    (42) CONDICION -> IF LPAR EXPRE RPAR . BLOQUE CONDICIONP END
    (20) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    ELSE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 73
    ID              shift and go to state 72
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 76
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 67
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 68
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 205
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 75
    CONDICION                      shift and go to state 69

state 192

    (61) TERMINO_W_SIGN -> MDOP operatorPush . TERMINO
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 92
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 91
    TERMINO                        shift and go to state 206
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    genQuad0                       shift and go to state 66

state 193

    (40) WHILEF -> WHILE LPAR EXPRE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 73
    ID              shift and go to state 72
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 76
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 67
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 68
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 207
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 75
    CONDICION                      shift and go to state 69

state 194

    (80) VAR_FUNZ -> COMMA VAR_FUNP .

    RPAR            reduce using rule 80 (VAR_FUNZ -> COMMA VAR_FUNP .)


state 195

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END . restoreScope
    (97) restoreScope -> . empty
    (1) empty -> .

    DEFINE          reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 208
    restoreScope                   shift and go to state 209

state 196

    (55) EXT_W_RELOP -> RELOP operatorPush EXT .

    EQUAL           reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    IF              reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    ID              reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    DRAW            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    PRINT           reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    WHILE           reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    FOR             reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    INT             reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    BOOLEAN         reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    STRING          reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    FLOAT           reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    VOID            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    LBRA            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    LPAR            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    ICTE            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    FCTE            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    END             reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    RETURN          reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    RPAR            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    RBRA            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    ELSE            reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    COMMA           reduce using rule 55 (EXT_W_RELOP -> RELOP operatorPush EXT .)


state 197

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE . COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 210


state 198

    (58) EXP_W_SIGN -> ASOP operatorPush EXP .

    LESSTH          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    GREATERTH       reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    SEQUAL          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    NOTEQ           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LESSEQTH        reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    GREATEREQTH     reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    EQUAL           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    IF              reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ID              reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    DRAW            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    PRINT           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    WHILE           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FOR             reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    INT             reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    BOOLEAN         reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    STRING          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FLOAT           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    VOID            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LBRA            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LPAR            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ICTE            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FCTE            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    END             reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RETURN          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RPAR            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RBRA            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ELSE            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    COMMA           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)


state 199

    (68) FAC -> pushExp LPAR EXPRE RPAR popExp .

    MULT            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    DIVI            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    PLUS            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    MINUS           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LESSTH          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    GREATERTH       reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    SEQUAL          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    NOTEQ           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LESSEQTH        reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    GREATEREQTH     reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    EQUAL           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RPAR            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    IF              reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ID              reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    DRAW            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    PRINT           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    WHILE           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FOR             reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    INT             reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    BOOLEAN         reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    STRING          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FLOAT           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    VOID            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LBRA            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LPAR            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ICTE            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FCTE            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RETURN          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    END             reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RBRA            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ELSE            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    COMMA           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)


state 200

    (107) popExp -> empty .

    MULT            reduce using rule 107 (popExp -> empty .)
    DIVI            reduce using rule 107 (popExp -> empty .)
    PLUS            reduce using rule 107 (popExp -> empty .)
    MINUS           reduce using rule 107 (popExp -> empty .)
    LESSTH          reduce using rule 107 (popExp -> empty .)
    GREATERTH       reduce using rule 107 (popExp -> empty .)
    SEQUAL          reduce using rule 107 (popExp -> empty .)
    NOTEQ           reduce using rule 107 (popExp -> empty .)
    LESSEQTH        reduce using rule 107 (popExp -> empty .)
    GREATEREQTH     reduce using rule 107 (popExp -> empty .)
    EQUAL           reduce using rule 107 (popExp -> empty .)
    IF              reduce using rule 107 (popExp -> empty .)
    ID              reduce using rule 107 (popExp -> empty .)
    DRAW            reduce using rule 107 (popExp -> empty .)
    PRINT           reduce using rule 107 (popExp -> empty .)
    WHILE           reduce using rule 107 (popExp -> empty .)
    FOR             reduce using rule 107 (popExp -> empty .)
    INT             reduce using rule 107 (popExp -> empty .)
    BOOLEAN         reduce using rule 107 (popExp -> empty .)
    STRING          reduce using rule 107 (popExp -> empty .)
    FLOAT           reduce using rule 107 (popExp -> empty .)
    VOID            reduce using rule 107 (popExp -> empty .)
    LBRA            reduce using rule 107 (popExp -> empty .)
    LPAR            reduce using rule 107 (popExp -> empty .)
    ICTE            reduce using rule 107 (popExp -> empty .)
    FCTE            reduce using rule 107 (popExp -> empty .)
    END             reduce using rule 107 (popExp -> empty .)
    RETURN          reduce using rule 107 (popExp -> empty .)
    RPAR            reduce using rule 107 (popExp -> empty .)
    RBRA            reduce using rule 107 (popExp -> empty .)
    ELSE            reduce using rule 107 (popExp -> empty .)
    COMMA           reduce using rule 107 (popExp -> empty .)


state 201

    (33) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .

    RPAR            reduce using rule 33 (LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .)


state 202

    (76) ACCION -> ID POINT DIBUJA LPAR VAR_CTE . RPAR

    RPAR            shift and go to state 211


state 203

    (73) FACT -> LPAR EXPRE RPAR .

    MULT            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    DIVI            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    PLUS            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    MINUS           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LESSTH          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    GREATERTH       reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    SEQUAL          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    NOTEQ           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LESSEQTH        reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    GREATEREQTH     reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    EQUAL           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    IF              reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    ID              reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    DRAW            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    PRINT           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    WHILE           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    FOR             reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    INT             reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    BOOLEAN         reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    STRING          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    FLOAT           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    VOID            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LBRA            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LPAR            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    ICTE            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    FCTE            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    END             reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    RETURN          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    RPAR            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    RBRA            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    ELSE            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    COMMA           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)


state 204

    (72) FACT -> LBRA EXPRE RBRA .

    MULT            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    DIVI            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    PLUS            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    MINUS           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LESSTH          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    GREATERTH       reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    SEQUAL          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    NOTEQ           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LESSEQTH        reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    GREATEREQTH     reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    EQUAL           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    IF              reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    ID              reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    DRAW            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    PRINT           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    WHILE           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    FOR             reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    INT             reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    BOOLEAN         reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    STRING          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    FLOAT           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    VOID            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LBRA            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LPAR            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    ICTE            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    FCTE            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    END             reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    RETURN          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    RPAR            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    RBRA            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    ELSE            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    COMMA           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)


state 205

    (42) CONDICION -> IF LPAR EXPRE RPAR BLOQUE . CONDICIONP END
    (43) CONDICIONP -> . ELSE BLOQUE
    (44) CONDICIONP -> . empty
    (1) empty -> .

    ELSE            shift and go to state 213
    END             reduce using rule 1 (empty -> .)

    CONDICIONP                     shift and go to state 212
    empty                          shift and go to state 214

state 206

    (61) TERMINO_W_SIGN -> MDOP operatorPush TERMINO .

    PLUS            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    MINUS           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LESSTH          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    GREATERTH       reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    SEQUAL          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    NOTEQ           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LESSEQTH        reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    GREATEREQTH     reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    EQUAL           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    IF              reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ID              reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    DRAW            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    PRINT           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    WHILE           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FOR             reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    INT             reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    BOOLEAN         reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    STRING          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FLOAT           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    VOID            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LBRA            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LPAR            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ICTE            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FCTE            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    END             reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RETURN          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RPAR            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RBRA            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ELSE            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    COMMA           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)


state 207

    (40) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE . END

    END             shift and go to state 215


state 208

    (97) restoreScope -> empty .

    DEFINE          reduce using rule 97 (restoreScope -> empty .)
    MAIN            reduce using rule 97 (restoreScope -> empty .)


state 209

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .

    DEFINE          reduce using rule 75 (FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .)
    MAIN            reduce using rule 75 (FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .)


state 210

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA . ICTE RPAR BLOQUE END

    ICTE            shift and go to state 216


state 211

    (76) ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .

    IF              reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ID              reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    DRAW            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    PRINT           reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    WHILE           reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FOR             reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    INT             reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    BOOLEAN         reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    STRING          reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FLOAT           reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    VOID            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LBRA            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LPAR            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ICTE            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FCTE            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    END             reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    RETURN          reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ELSE            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)


state 212

    (42) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP . END

    END             shift and go to state 217


state 213

    (43) CONDICIONP -> ELSE . BLOQUE
    (20) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 73
    ID              shift and go to state 72
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 76
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 67
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 68
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 218
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 75
    CONDICION                      shift and go to state 69

state 214

    (44) CONDICIONP -> empty .

    END             reduce using rule 44 (CONDICIONP -> empty .)


state 215

    (40) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .

    IF              reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ID              reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    DRAW            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    PRINT           reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    WHILE           reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FOR             reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    INT             reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    STRING          reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FLOAT           reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    VOID            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LBRA            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LPAR            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ICTE            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FCTE            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    END             reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    RETURN          reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ELSE            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)


state 216

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE . RPAR BLOQUE END

    RPAR            shift and go to state 219


state 217

    (42) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .

    IF              reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ID              reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    DRAW            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    PRINT           reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    WHILE           reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FOR             reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    INT             reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    BOOLEAN         reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    STRING          reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FLOAT           reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    VOID            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LBRA            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LPAR            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ICTE            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FCTE            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    END             reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    RETURN          reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ELSE            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)


state 218

    (43) CONDICIONP -> ELSE BLOQUE .

    END             reduce using rule 43 (CONDICIONP -> ELSE BLOQUE .)


state 219

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP genQuad3 EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . genQuad0 VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (106) pushExp -> . empty
    (108) genQuad0 -> . empty

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    IF              shift and go to state 73
    ID              shift and go to state 72
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 76
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 67
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 74
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 68
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 220
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 75
    CONDICION                      shift and go to state 69

state 220

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE . END

    END             shift and go to state 221


state 221

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .

    IF              reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ID              reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    DRAW            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    PRINT           reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    WHILE           reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FOR             reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    INT             reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    STRING          reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FLOAT           reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    VOID            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LBRA            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LPAR            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ICTE            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FCTE            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    END             reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    RETURN          reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ELSE            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAR in state 72 resolved as shift
WARNING: shift/reduce conflict for LBRA in state 105 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 105 resolved as shift
