Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    AND
    FALSE
    NOT
    OR

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     empty -> <empty>
Rule 2     PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL
Rule 3     PROGRAMAB -> FUNCION PROGRAMAB
Rule 4     PROGRAMAB -> empty
Rule 5     PROGRAMAZ -> GLOBALES
Rule 6     PROGRAMAZ -> empty
Rule 7     GLOBALES -> GLOBAL GLOBALEZ END
Rule 8     GLOBALEZ -> VART GLOBALEZ
Rule 9     GLOBALEZ -> empty
Rule 10    VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
Rule 11    VART -> DATA_TIPOS ID addVariable
Rule 12    VART -> ARR ID addVariable
Rule 13    ESTATUTO -> EXPRE genQuad5
Rule 14    ESTATUTO -> CONDICION
Rule 15    ESTATUTO -> CICLO
Rule 16    ESTATUTO -> ACCION
Rule 17    ESTATUTO -> VART
Rule 18    ESTATUTO -> LLAMADA_FUNCION
Rule 19    ESTATUTO -> IMPRIMIR
Rule 20    BLOQUE -> ESTATUTO BLOQUE
Rule 21    BLOQUE -> empty
Rule 22    DATA_TIPOS -> INT addDataType
Rule 23    DATA_TIPOS -> BOOLEAN addDataType
Rule 24    DATA_TIPOS -> STRING addDataType
Rule 25    DATA_TIPOS -> FLOAT addDataType
Rule 26    DATA_TIPOS -> VOID addDataType
Rule 27    ASOP -> PLUS
Rule 28    ASOP -> MINUS
Rule 29    MDOP -> MULT
Rule 30    MDOP -> DIVI
Rule 31    ARR -> DATA_TIPOS LBRA ICTE RBRA
Rule 32    LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR
Rule 33    LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
Rule 34    LLAMADA_FUNCIONP -> empty
Rule 35    LLAMADA_FUNCIONZ -> COMMA
Rule 36    LLAMADA_FUNCIONZ -> empty
Rule 37    PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END
Rule 38    CICLO -> WHILEF
Rule 39    CICLO -> FORZ
Rule 40    WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END
Rule 41    FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
Rule 42    CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
Rule 43    CONDICIONP -> ELSE BLOQUE
Rule 44    CONDICIONP -> empty
Rule 45    RELOP -> LESSTH
Rule 46    RELOP -> GREATERTH
Rule 47    RELOP -> SEQUAL
Rule 48    RELOP -> NOTEQ
Rule 49    RELOP -> LESSEQTH
Rule 50    RELOP -> GREATEREQTH
Rule 51    EXPRE -> EXT EXPREZ
Rule 52    EXPREZ -> EQUAL operatorPush EXT
Rule 53    EXPREZ -> empty
Rule 54    EXT -> EXP EXT_W_RELOP
Rule 55    EXT_W_RELOP -> RELOP EXT
Rule 56    EXT_W_RELOP -> empty
Rule 57    EXP -> TERMINO genQuad1 EXP_W_SIGN
Rule 58    EXP_W_SIGN -> ASOP operatorPush EXP
Rule 59    EXP_W_SIGN -> empty
Rule 60    TERMINO -> FAC genQuad2 TERMINO_W_SIGN
Rule 61    TERMINO_W_SIGN -> MDOP operatorPush TERMINO
Rule 62    TERMINO_W_SIGN -> empty
Rule 63    VAR_CTE -> ICTE
Rule 64    VAR_CTE -> FCTE
Rule 65    IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA
Rule 66    IMPRIMIRZ -> EXPRE
Rule 67    IMPRIMIRZ -> SCTE
Rule 68    FAC -> pushExp LPAR EXPRE RPAR popExp
Rule 69    FAC -> VAR_CTE operandPush
Rule 70    FAC -> LBRA EXPRE RPAR
Rule 71    FAC -> ID operandPush FACT
Rule 72    FACT -> LBRA EXPRE RBRA
Rule 73    FACT -> LPAR EXPRE RPAR
Rule 74    FACT -> empty
Rule 75    FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
Rule 76    ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR
Rule 77    VAR_FUN -> LPAR VAR_FUNP RPAR
Rule 78    VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ
Rule 79    VAR_FUNP -> empty
Rule 80    VAR_FUNZ -> COMMA VAR_FUNP
Rule 81    VAR_FUNZ -> empty
Rule 82    DIBUJA -> DEFINIRPOSICION
Rule 83    DIBUJA -> DEFINIRCOLOR
Rule 84    DIBUJA -> DERECHO
Rule 85    DIBUJA -> REVERSA
Rule 86    DIBUJA -> IZQUIERDA
Rule 87    DIBUJA -> DERECHA
Rule 88    DIBUJA -> VELOCIDAD
Rule 89    DIBUJA -> BORRAR
Rule 90    DIBUJA -> MOSTRAR
Rule 91    DIBUJA -> OCULTAR
Rule 92    DIBUJA -> CIRCULO
Rule 93    DIBUJA -> DEFINIRX
Rule 94    DIBUJA -> DEFINIRY
Rule 95    DIBUJA -> ARCO
Rule 96    DIBUJA -> GROSOR
Rule 97    restoreScope -> empty
Rule 98    changeScope -> empty
Rule 99    addDataType -> empty
Rule 100   addVariable -> empty
Rule 101   operandPush -> empty
Rule 102   operatorPush -> empty
Rule 103   pushExp -> empty
Rule 104   popExp -> empty
Rule 105   genQuad0 -> empty
Rule 106   genQuad1 -> empty
Rule 107   genQuad2 -> empty
Rule 108   genQuad5 -> empty

Terminals, with rules where they appear

AND                  : 
ARCO                 : 95
BOOLEAN              : 23
BORRAR               : 89
CIRCULO              : 92
COMMA                : 35 41 41 80
DEFINE               : 75
DEFINIRCOLOR         : 83
DEFINIRPOSICION      : 82
DEFINIRX             : 93
DEFINIRY             : 94
DERECHA              : 87
DERECHO              : 84
DIVI                 : 30
DRAW                 : 10
DRAWI                : 10
ELSE                 : 43
END                  : 7 37 40 41 42 75
EQUAL                : 10 52
FALSE                : 
FCTE                 : 64
FLOAT                : 25
FOR                  : 41
GLOBAL               : 7
GREATEREQTH          : 50
GREATERTH            : 46
GROSOR               : 96
ICTE                 : 31 41 41 41 63
ID                   : 10 11 12 32 71 75 76 78
IF                   : 42
INT                  : 22
IZQUIERDA            : 86
LBRA                 : 31 65 70 72
LESSEQTH             : 49
LESSTH               : 45
LPAR                 : 10 32 37 40 41 42 68 73 76 77
MAIN                 : 37
MINUS                : 28
MOSTRAR              : 90
MULT                 : 29
NEW                  : 10
NOT                  : 
NOTEQ                : 48
OCULTAR              : 91
OR                   : 
PLUS                 : 27
POINT                : 76
PRINT                : 65
RBRA                 : 31 65 72
RETURN               : 75
REVERSA              : 85
RPAR                 : 10 32 37 40 41 42 68 70 73 76 77
SCTE                 : 67
SEQUAL               : 47
STRING               : 24
TRUE                 : 
VELOCIDAD            : 88
VOID                 : 26
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

ACCION               : 16
ARR                  : 12
ASOP                 : 58
BLOQUE               : 20 37 40 41 42 43 75
CICLO                : 15
CONDICION            : 14
CONDICIONP           : 42
DATA_TIPOS           : 11 31 75 78
DIBUJA               : 76
ESTATUTO             : 20
EXP                  : 54 58
EXPRE                : 13 33 40 42 66 68 70 72 73 75
EXPREZ               : 51
EXP_W_SIGN           : 57
EXT                  : 51 52 55
EXT_W_RELOP          : 54
FAC                  : 60
FACT                 : 71
FORZ                 : 39
FUNCION              : 3
GLOBALES             : 5
GLOBALEZ             : 7 8
IMPRIMIR             : 19
IMPRIMIRZ            : 65
LLAMADA_FUNCION      : 18
LLAMADA_FUNCIONP     : 32 33
LLAMADA_FUNCIONZ     : 33
MDOP                 : 61
PRINCIPAL            : 2
PROGRAMA             : 0
PROGRAMAB            : 2 3
PROGRAMAZ            : 2
RELOP                : 55
TERMINO              : 57 61
TERMINO_W_SIGN       : 60
VART                 : 8 17
VAR_CTE              : 69 76
VAR_FUN              : 75
VAR_FUNP             : 77 80
VAR_FUNZ             : 78
WHILEF               : 38
addDataType          : 22 23 24 25 26
addVariable          : 10 11 12
changeScope          : 37 75
empty                : 4 6 9 21 34 36 44 53 56 59 62 74 79 81 97 98 99 100 101 102 103 104 105 106 107 108
genQuad0             : 
genQuad1             : 57
genQuad2             : 60
genQuad5             : 13
operandPush          : 69 71
operatorPush         : 52 58 61
popExp               : 68
pushExp              : 68
restoreScope         : 75

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (2) PROGRAMA -> . PROGRAMAZ PROGRAMAB PRINCIPAL
    (5) PROGRAMAZ -> . GLOBALES
    (6) PROGRAMAZ -> . empty
    (7) GLOBALES -> . GLOBAL GLOBALEZ END
    (1) empty -> .

    GLOBAL          shift and go to state 2
    DEFINE          reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)

    PROGRAMAZ                      shift and go to state 1
    PROGRAMA                       shift and go to state 3
    GLOBALES                       shift and go to state 4
    empty                          shift and go to state 5

state 1

    (2) PROGRAMA -> PROGRAMAZ . PROGRAMAB PRINCIPAL
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (75) FUNCION -> . DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (1) empty -> .

    DEFINE          shift and go to state 9
    MAIN            reduce using rule 1 (empty -> .)

    PROGRAMAB                      shift and go to state 7
    empty                          shift and go to state 8
    FUNCION                        shift and go to state 6

state 2

    (7) GLOBALES -> GLOBAL . GLOBALEZ END
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 14
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 17
    DATA_TIPOS                     shift and go to state 16
    GLOBALEZ                       shift and go to state 12
    empty                          shift and go to state 13

state 3

    (0) S' -> PROGRAMA .



state 4

    (5) PROGRAMAZ -> GLOBALES .

    DEFINE          reduce using rule 5 (PROGRAMAZ -> GLOBALES .)
    MAIN            reduce using rule 5 (PROGRAMAZ -> GLOBALES .)


state 5

    (6) PROGRAMAZ -> empty .

    DEFINE          reduce using rule 6 (PROGRAMAZ -> empty .)
    MAIN            reduce using rule 6 (PROGRAMAZ -> empty .)


state 6

    (3) PROGRAMAB -> FUNCION . PROGRAMAB
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (75) FUNCION -> . DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (1) empty -> .

    DEFINE          shift and go to state 9
    MAIN            reduce using rule 1 (empty -> .)

    FUNCION                        shift and go to state 6
    PROGRAMAB                      shift and go to state 21
    empty                          shift and go to state 8

state 7

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB . PRINCIPAL
    (37) PRINCIPAL -> . MAIN changeScope LPAR RPAR BLOQUE END

    MAIN            shift and go to state 23

    PRINCIPAL                      shift and go to state 22

state 8

    (4) PROGRAMAB -> empty .

    MAIN            reduce using rule 4 (PROGRAMAB -> empty .)


state 9

    (75) FUNCION -> DEFINE . DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    DATA_TIPOS                     shift and go to state 24

state 10

    (8) GLOBALEZ -> VART . GLOBALEZ
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 14
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 17
    DATA_TIPOS                     shift and go to state 16
    GLOBALEZ                       shift and go to state 25
    empty                          shift and go to state 13

state 11

    (26) DATA_TIPOS -> VOID . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 26
    empty                          shift and go to state 27

state 12

    (7) GLOBALES -> GLOBAL GLOBALEZ . END

    END             shift and go to state 28


state 13

    (9) GLOBALEZ -> empty .

    END             reduce using rule 9 (GLOBALEZ -> empty .)


state 14

    (10) VART -> DRAW . ID addVariable EQUAL NEW DRAWI LPAR RPAR

    ID              shift and go to state 29


state 15

    (24) DATA_TIPOS -> STRING . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 30
    empty                          shift and go to state 27

state 16

    (11) VART -> DATA_TIPOS . ID addVariable
    (31) ARR -> DATA_TIPOS . LBRA ICTE RBRA

    ID              shift and go to state 32
    LBRA            shift and go to state 31


state 17

    (12) VART -> ARR . ID addVariable

    ID              shift and go to state 33


state 18

    (22) DATA_TIPOS -> INT . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 34
    empty                          shift and go to state 27

state 19

    (25) DATA_TIPOS -> FLOAT . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 35
    empty                          shift and go to state 27

state 20

    (23) DATA_TIPOS -> BOOLEAN . addDataType
    (99) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 36
    empty                          shift and go to state 27

state 21

    (3) PROGRAMAB -> FUNCION PROGRAMAB .

    MAIN            reduce using rule 3 (PROGRAMAB -> FUNCION PROGRAMAB .)


state 22

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .)


state 23

    (37) PRINCIPAL -> MAIN . changeScope LPAR RPAR BLOQUE END
    (98) changeScope -> . empty
    (1) empty -> .

    LPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 37
    changeScope                    shift and go to state 38

state 24

    (75) FUNCION -> DEFINE DATA_TIPOS . ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope

    ID              shift and go to state 39


state 25

    (8) GLOBALEZ -> VART GLOBALEZ .

    END             reduce using rule 8 (GLOBALEZ -> VART GLOBALEZ .)


state 26

    (26) DATA_TIPOS -> VOID addDataType .

    ID              reduce using rule 26 (DATA_TIPOS -> VOID addDataType .)
    LBRA            reduce using rule 26 (DATA_TIPOS -> VOID addDataType .)


state 27

    (99) addDataType -> empty .

    ID              reduce using rule 99 (addDataType -> empty .)
    LBRA            reduce using rule 99 (addDataType -> empty .)


state 28

    (7) GLOBALES -> GLOBAL GLOBALEZ END .

    DEFINE          reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)
    MAIN            reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)


state 29

    (10) VART -> DRAW ID . addVariable EQUAL NEW DRAWI LPAR RPAR
    (100) addVariable -> . empty
    (1) empty -> .

    EQUAL           reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 40

state 30

    (24) DATA_TIPOS -> STRING addDataType .

    ID              reduce using rule 24 (DATA_TIPOS -> STRING addDataType .)
    LBRA            reduce using rule 24 (DATA_TIPOS -> STRING addDataType .)


state 31

    (31) ARR -> DATA_TIPOS LBRA . ICTE RBRA

    ICTE            shift and go to state 42


state 32

    (11) VART -> DATA_TIPOS ID . addVariable
    (100) addVariable -> . empty
    (1) empty -> .

    DRAW            reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 43

state 33

    (12) VART -> ARR ID . addVariable
    (100) addVariable -> . empty
    (1) empty -> .

    DRAW            reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 44

state 34

    (22) DATA_TIPOS -> INT addDataType .

    ID              reduce using rule 22 (DATA_TIPOS -> INT addDataType .)
    LBRA            reduce using rule 22 (DATA_TIPOS -> INT addDataType .)


state 35

    (25) DATA_TIPOS -> FLOAT addDataType .

    ID              reduce using rule 25 (DATA_TIPOS -> FLOAT addDataType .)
    LBRA            reduce using rule 25 (DATA_TIPOS -> FLOAT addDataType .)


state 36

    (23) DATA_TIPOS -> BOOLEAN addDataType .

    ID              reduce using rule 23 (DATA_TIPOS -> BOOLEAN addDataType .)
    LBRA            reduce using rule 23 (DATA_TIPOS -> BOOLEAN addDataType .)


state 37

    (98) changeScope -> empty .

    LPAR            reduce using rule 98 (changeScope -> empty .)


state 38

    (37) PRINCIPAL -> MAIN changeScope . LPAR RPAR BLOQUE END

    LPAR            shift and go to state 45


state 39

    (75) FUNCION -> DEFINE DATA_TIPOS ID . changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (98) changeScope -> . empty
    (1) empty -> .

    LPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 37
    changeScope                    shift and go to state 46

state 40

    (10) VART -> DRAW ID addVariable . EQUAL NEW DRAWI LPAR RPAR

    EQUAL           shift and go to state 47


state 41

    (100) addVariable -> empty .

    DRAW            reduce using rule 100 (addVariable -> empty .)
    INT             reduce using rule 100 (addVariable -> empty .)
    BOOLEAN         reduce using rule 100 (addVariable -> empty .)
    STRING          reduce using rule 100 (addVariable -> empty .)
    FLOAT           reduce using rule 100 (addVariable -> empty .)
    VOID            reduce using rule 100 (addVariable -> empty .)
    END             reduce using rule 100 (addVariable -> empty .)
    IF              reduce using rule 100 (addVariable -> empty .)
    ID              reduce using rule 100 (addVariable -> empty .)
    PRINT           reduce using rule 100 (addVariable -> empty .)
    WHILE           reduce using rule 100 (addVariable -> empty .)
    FOR             reduce using rule 100 (addVariable -> empty .)
    LBRA            reduce using rule 100 (addVariable -> empty .)
    ICTE            reduce using rule 100 (addVariable -> empty .)
    FCTE            reduce using rule 100 (addVariable -> empty .)
    LPAR            reduce using rule 100 (addVariable -> empty .)
    RETURN          reduce using rule 100 (addVariable -> empty .)
    ELSE            reduce using rule 100 (addVariable -> empty .)
    EQUAL           reduce using rule 100 (addVariable -> empty .)


state 42

    (31) ARR -> DATA_TIPOS LBRA ICTE . RBRA

    RBRA            shift and go to state 48


state 43

    (11) VART -> DATA_TIPOS ID addVariable .

    IF              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ID              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    DRAW            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    PRINT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    WHILE           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FOR             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    INT             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    BOOLEAN         reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    STRING          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FLOAT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    VOID            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LBRA            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ICTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FCTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LPAR            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    END             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    RETURN          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ELSE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)


state 44

    (12) VART -> ARR ID addVariable .

    IF              reduce using rule 12 (VART -> ARR ID addVariable .)
    ID              reduce using rule 12 (VART -> ARR ID addVariable .)
    DRAW            reduce using rule 12 (VART -> ARR ID addVariable .)
    PRINT           reduce using rule 12 (VART -> ARR ID addVariable .)
    WHILE           reduce using rule 12 (VART -> ARR ID addVariable .)
    FOR             reduce using rule 12 (VART -> ARR ID addVariable .)
    INT             reduce using rule 12 (VART -> ARR ID addVariable .)
    BOOLEAN         reduce using rule 12 (VART -> ARR ID addVariable .)
    STRING          reduce using rule 12 (VART -> ARR ID addVariable .)
    FLOAT           reduce using rule 12 (VART -> ARR ID addVariable .)
    VOID            reduce using rule 12 (VART -> ARR ID addVariable .)
    LBRA            reduce using rule 12 (VART -> ARR ID addVariable .)
    ICTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    FCTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    LPAR            reduce using rule 12 (VART -> ARR ID addVariable .)
    END             reduce using rule 12 (VART -> ARR ID addVariable .)
    RETURN          reduce using rule 12 (VART -> ARR ID addVariable .)
    ELSE            reduce using rule 12 (VART -> ARR ID addVariable .)


state 45

    (37) PRINCIPAL -> MAIN changeScope LPAR . RPAR BLOQUE END

    RPAR            shift and go to state 49


state 46

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope . VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (77) VAR_FUN -> . LPAR VAR_FUNP RPAR

    LPAR            shift and go to state 50

    VAR_FUN                        shift and go to state 51

state 47

    (10) VART -> DRAW ID addVariable EQUAL . NEW DRAWI LPAR RPAR

    NEW             shift and go to state 52


state 48

    (31) ARR -> DATA_TIPOS LBRA ICTE RBRA .

    ID              reduce using rule 31 (ARR -> DATA_TIPOS LBRA ICTE RBRA .)


state 49

    (37) PRINCIPAL -> MAIN changeScope LPAR RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VART                           shift and go to state 66
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 67
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 71
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 68

state 50

    (77) VAR_FUN -> LPAR . VAR_FUNP RPAR
    (78) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (79) VAR_FUNP -> . empty
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (1) empty -> .

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 81
    DATA_TIPOS                     shift and go to state 79
    VAR_FUNP                       shift and go to state 80

state 51

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN . BLOQUE RETURN EXPRE END restoreScope
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    RETURN          reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VART                           shift and go to state 66
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    BLOQUE                         shift and go to state 82
    LLAMADA_FUNCION                shift and go to state 58
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 67
    IMPRIMIR                       shift and go to state 70
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 68

state 52

    (10) VART -> DRAW ID addVariable EQUAL NEW . DRAWI LPAR RPAR

    DRAWI           shift and go to state 83


state 53

    (15) ESTATUTO -> CICLO .

    IF              reduce using rule 15 (ESTATUTO -> CICLO .)
    ID              reduce using rule 15 (ESTATUTO -> CICLO .)
    DRAW            reduce using rule 15 (ESTATUTO -> CICLO .)
    PRINT           reduce using rule 15 (ESTATUTO -> CICLO .)
    WHILE           reduce using rule 15 (ESTATUTO -> CICLO .)
    FOR             reduce using rule 15 (ESTATUTO -> CICLO .)
    INT             reduce using rule 15 (ESTATUTO -> CICLO .)
    BOOLEAN         reduce using rule 15 (ESTATUTO -> CICLO .)
    STRING          reduce using rule 15 (ESTATUTO -> CICLO .)
    FLOAT           reduce using rule 15 (ESTATUTO -> CICLO .)
    VOID            reduce using rule 15 (ESTATUTO -> CICLO .)
    LBRA            reduce using rule 15 (ESTATUTO -> CICLO .)
    ICTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    FCTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    LPAR            reduce using rule 15 (ESTATUTO -> CICLO .)
    END             reduce using rule 15 (ESTATUTO -> CICLO .)
    RETURN          reduce using rule 15 (ESTATUTO -> CICLO .)
    ELSE            reduce using rule 15 (ESTATUTO -> CICLO .)


state 54

    (13) ESTATUTO -> EXPRE . genQuad5
    (108) genQuad5 -> . empty
    (1) empty -> .

    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    genQuad5                       shift and go to state 84
    empty                          shift and go to state 85

state 55

    (51) EXPRE -> EXT . EXPREZ
    (52) EXPREZ -> . EQUAL operatorPush EXT
    (53) EXPREZ -> . empty
    (1) empty -> .

    EQUAL           shift and go to state 88
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    EXPREZ                         shift and go to state 86
    empty                          shift and go to state 87

state 56

    (54) EXT -> EXP . EXT_W_RELOP
    (55) EXT_W_RELOP -> . RELOP EXT
    (56) EXT_W_RELOP -> . empty
    (45) RELOP -> . LESSTH
    (46) RELOP -> . GREATERTH
    (47) RELOP -> . SEQUAL
    (48) RELOP -> . NOTEQ
    (49) RELOP -> . LESSEQTH
    (50) RELOP -> . GREATEREQTH
    (1) empty -> .

    LESSTH          shift and go to state 96
    GREATERTH       shift and go to state 95
    SEQUAL          shift and go to state 91
    NOTEQ           shift and go to state 92
    LESSEQTH        shift and go to state 89
    GREATEREQTH     shift and go to state 94
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    EXT_W_RELOP                    shift and go to state 93
    empty                          shift and go to state 97
    RELOP                          shift and go to state 90

state 57

    (65) IMPRIMIR -> PRINT . LBRA IMPRIMIRZ RBRA

    LBRA            shift and go to state 98


state 58

    (18) ESTATUTO -> LLAMADA_FUNCION .

    IF              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ID              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    DRAW            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    PRINT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    WHILE           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FOR             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    INT             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    BOOLEAN         reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    STRING          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FLOAT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    VOID            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LBRA            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ICTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FCTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LPAR            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    END             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    RETURN          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ELSE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)


state 59

    (70) FAC -> LBRA . EXPRE RPAR
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 99
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 60

    (20) BLOQUE -> ESTATUTO . BLOQUE
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VART                           shift and go to state 66
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 67
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 102
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 68

state 61

    (41) FORZ -> FOR . LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    LPAR            shift and go to state 103


state 62

    (57) EXP -> TERMINO . genQuad1 EXP_W_SIGN
    (106) genQuad1 -> . empty
    (1) empty -> .

    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad1                       shift and go to state 104
    empty                          shift and go to state 105

state 63

    (68) FAC -> pushExp . LPAR EXPRE RPAR popExp

    LPAR            shift and go to state 106


state 64

    (21) BLOQUE -> empty .
    (103) pushExp -> empty .

    ELSE            reduce using rule 21 (BLOQUE -> empty .)
    END             reduce using rule 21 (BLOQUE -> empty .)
    RETURN          reduce using rule 21 (BLOQUE -> empty .)
    LPAR            reduce using rule 103 (pushExp -> empty .)


state 65

    (38) CICLO -> WHILEF .

    IF              reduce using rule 38 (CICLO -> WHILEF .)
    ID              reduce using rule 38 (CICLO -> WHILEF .)
    DRAW            reduce using rule 38 (CICLO -> WHILEF .)
    PRINT           reduce using rule 38 (CICLO -> WHILEF .)
    WHILE           reduce using rule 38 (CICLO -> WHILEF .)
    FOR             reduce using rule 38 (CICLO -> WHILEF .)
    INT             reduce using rule 38 (CICLO -> WHILEF .)
    BOOLEAN         reduce using rule 38 (CICLO -> WHILEF .)
    STRING          reduce using rule 38 (CICLO -> WHILEF .)
    FLOAT           reduce using rule 38 (CICLO -> WHILEF .)
    VOID            reduce using rule 38 (CICLO -> WHILEF .)
    LBRA            reduce using rule 38 (CICLO -> WHILEF .)
    ICTE            reduce using rule 38 (CICLO -> WHILEF .)
    FCTE            reduce using rule 38 (CICLO -> WHILEF .)
    LPAR            reduce using rule 38 (CICLO -> WHILEF .)
    END             reduce using rule 38 (CICLO -> WHILEF .)
    ELSE            reduce using rule 38 (CICLO -> WHILEF .)
    RETURN          reduce using rule 38 (CICLO -> WHILEF .)


state 66

    (17) ESTATUTO -> VART .

    IF              reduce using rule 17 (ESTATUTO -> VART .)
    ID              reduce using rule 17 (ESTATUTO -> VART .)
    DRAW            reduce using rule 17 (ESTATUTO -> VART .)
    PRINT           reduce using rule 17 (ESTATUTO -> VART .)
    WHILE           reduce using rule 17 (ESTATUTO -> VART .)
    FOR             reduce using rule 17 (ESTATUTO -> VART .)
    INT             reduce using rule 17 (ESTATUTO -> VART .)
    BOOLEAN         reduce using rule 17 (ESTATUTO -> VART .)
    STRING          reduce using rule 17 (ESTATUTO -> VART .)
    FLOAT           reduce using rule 17 (ESTATUTO -> VART .)
    VOID            reduce using rule 17 (ESTATUTO -> VART .)
    LBRA            reduce using rule 17 (ESTATUTO -> VART .)
    ICTE            reduce using rule 17 (ESTATUTO -> VART .)
    FCTE            reduce using rule 17 (ESTATUTO -> VART .)
    LPAR            reduce using rule 17 (ESTATUTO -> VART .)
    END             reduce using rule 17 (ESTATUTO -> VART .)
    RETURN          reduce using rule 17 (ESTATUTO -> VART .)
    ELSE            reduce using rule 17 (ESTATUTO -> VART .)


state 67

    (39) CICLO -> FORZ .

    IF              reduce using rule 39 (CICLO -> FORZ .)
    ID              reduce using rule 39 (CICLO -> FORZ .)
    DRAW            reduce using rule 39 (CICLO -> FORZ .)
    PRINT           reduce using rule 39 (CICLO -> FORZ .)
    WHILE           reduce using rule 39 (CICLO -> FORZ .)
    FOR             reduce using rule 39 (CICLO -> FORZ .)
    INT             reduce using rule 39 (CICLO -> FORZ .)
    BOOLEAN         reduce using rule 39 (CICLO -> FORZ .)
    STRING          reduce using rule 39 (CICLO -> FORZ .)
    FLOAT           reduce using rule 39 (CICLO -> FORZ .)
    VOID            reduce using rule 39 (CICLO -> FORZ .)
    LBRA            reduce using rule 39 (CICLO -> FORZ .)
    ICTE            reduce using rule 39 (CICLO -> FORZ .)
    FCTE            reduce using rule 39 (CICLO -> FORZ .)
    LPAR            reduce using rule 39 (CICLO -> FORZ .)
    END             reduce using rule 39 (CICLO -> FORZ .)
    ELSE            reduce using rule 39 (CICLO -> FORZ .)
    RETURN          reduce using rule 39 (CICLO -> FORZ .)


state 68

    (14) ESTATUTO -> CONDICION .

    IF              reduce using rule 14 (ESTATUTO -> CONDICION .)
    ID              reduce using rule 14 (ESTATUTO -> CONDICION .)
    DRAW            reduce using rule 14 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 14 (ESTATUTO -> CONDICION .)
    INT             reduce using rule 14 (ESTATUTO -> CONDICION .)
    BOOLEAN         reduce using rule 14 (ESTATUTO -> CONDICION .)
    STRING          reduce using rule 14 (ESTATUTO -> CONDICION .)
    FLOAT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    VOID            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LBRA            reduce using rule 14 (ESTATUTO -> CONDICION .)
    ICTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    FCTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LPAR            reduce using rule 14 (ESTATUTO -> CONDICION .)
    END             reduce using rule 14 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 14 (ESTATUTO -> CONDICION .)
    ELSE            reduce using rule 14 (ESTATUTO -> CONDICION .)


state 69

    (63) VAR_CTE -> ICTE .

    MULT            reduce using rule 63 (VAR_CTE -> ICTE .)
    DIVI            reduce using rule 63 (VAR_CTE -> ICTE .)
    PLUS            reduce using rule 63 (VAR_CTE -> ICTE .)
    MINUS           reduce using rule 63 (VAR_CTE -> ICTE .)
    LESSTH          reduce using rule 63 (VAR_CTE -> ICTE .)
    GREATERTH       reduce using rule 63 (VAR_CTE -> ICTE .)
    SEQUAL          reduce using rule 63 (VAR_CTE -> ICTE .)
    NOTEQ           reduce using rule 63 (VAR_CTE -> ICTE .)
    LESSEQTH        reduce using rule 63 (VAR_CTE -> ICTE .)
    GREATEREQTH     reduce using rule 63 (VAR_CTE -> ICTE .)
    EQUAL           reduce using rule 63 (VAR_CTE -> ICTE .)
    RPAR            reduce using rule 63 (VAR_CTE -> ICTE .)
    RBRA            reduce using rule 63 (VAR_CTE -> ICTE .)
    IF              reduce using rule 63 (VAR_CTE -> ICTE .)
    ID              reduce using rule 63 (VAR_CTE -> ICTE .)
    DRAW            reduce using rule 63 (VAR_CTE -> ICTE .)
    PRINT           reduce using rule 63 (VAR_CTE -> ICTE .)
    WHILE           reduce using rule 63 (VAR_CTE -> ICTE .)
    FOR             reduce using rule 63 (VAR_CTE -> ICTE .)
    INT             reduce using rule 63 (VAR_CTE -> ICTE .)
    BOOLEAN         reduce using rule 63 (VAR_CTE -> ICTE .)
    STRING          reduce using rule 63 (VAR_CTE -> ICTE .)
    FLOAT           reduce using rule 63 (VAR_CTE -> ICTE .)
    VOID            reduce using rule 63 (VAR_CTE -> ICTE .)
    LBRA            reduce using rule 63 (VAR_CTE -> ICTE .)
    ICTE            reduce using rule 63 (VAR_CTE -> ICTE .)
    FCTE            reduce using rule 63 (VAR_CTE -> ICTE .)
    LPAR            reduce using rule 63 (VAR_CTE -> ICTE .)
    END             reduce using rule 63 (VAR_CTE -> ICTE .)
    RETURN          reduce using rule 63 (VAR_CTE -> ICTE .)
    ELSE            reduce using rule 63 (VAR_CTE -> ICTE .)
    COMMA           reduce using rule 63 (VAR_CTE -> ICTE .)


state 70

    (19) ESTATUTO -> IMPRIMIR .

    IF              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ID              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    DRAW            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    PRINT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    WHILE           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FOR             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    INT             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    BOOLEAN         reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    STRING          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FLOAT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    VOID            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LBRA            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ICTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FCTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LPAR            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    END             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    RETURN          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ELSE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)


state 71

    (37) PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE . END

    END             shift and go to state 107


state 72

    (69) FAC -> VAR_CTE . operandPush
    (101) operandPush -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    operandPush                    shift and go to state 108
    empty                          shift and go to state 109

state 73

    (76) ACCION -> ID . POINT DIBUJA LPAR VAR_CTE RPAR
    (32) LLAMADA_FUNCION -> ID . LPAR LLAMADA_FUNCIONP RPAR
    (71) FAC -> ID . operandPush FACT
    (101) operandPush -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
    POINT           shift and go to state 111
    LPAR            shift and go to state 110
    LBRA            reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

  ! LPAR            [ reduce using rule 1 (empty -> .) ]

    operandPush                    shift and go to state 112
    empty                          shift and go to state 109

state 74

    (42) CONDICION -> IF . LPAR EXPRE RPAR BLOQUE CONDICIONP END

    LPAR            shift and go to state 113


state 75

    (60) TERMINO -> FAC . genQuad2 TERMINO_W_SIGN
    (107) genQuad2 -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad2                       shift and go to state 114
    empty                          shift and go to state 115

state 76

    (16) ESTATUTO -> ACCION .

    IF              reduce using rule 16 (ESTATUTO -> ACCION .)
    ID              reduce using rule 16 (ESTATUTO -> ACCION .)
    DRAW            reduce using rule 16 (ESTATUTO -> ACCION .)
    PRINT           reduce using rule 16 (ESTATUTO -> ACCION .)
    WHILE           reduce using rule 16 (ESTATUTO -> ACCION .)
    FOR             reduce using rule 16 (ESTATUTO -> ACCION .)
    INT             reduce using rule 16 (ESTATUTO -> ACCION .)
    BOOLEAN         reduce using rule 16 (ESTATUTO -> ACCION .)
    STRING          reduce using rule 16 (ESTATUTO -> ACCION .)
    FLOAT           reduce using rule 16 (ESTATUTO -> ACCION .)
    VOID            reduce using rule 16 (ESTATUTO -> ACCION .)
    LBRA            reduce using rule 16 (ESTATUTO -> ACCION .)
    ICTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    FCTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    LPAR            reduce using rule 16 (ESTATUTO -> ACCION .)
    END             reduce using rule 16 (ESTATUTO -> ACCION .)
    RETURN          reduce using rule 16 (ESTATUTO -> ACCION .)
    ELSE            reduce using rule 16 (ESTATUTO -> ACCION .)


state 77

    (40) WHILEF -> WHILE . LPAR EXPRE RPAR BLOQUE END

    LPAR            shift and go to state 116


state 78

    (64) VAR_CTE -> FCTE .

    MULT            reduce using rule 64 (VAR_CTE -> FCTE .)
    DIVI            reduce using rule 64 (VAR_CTE -> FCTE .)
    PLUS            reduce using rule 64 (VAR_CTE -> FCTE .)
    MINUS           reduce using rule 64 (VAR_CTE -> FCTE .)
    LESSTH          reduce using rule 64 (VAR_CTE -> FCTE .)
    GREATERTH       reduce using rule 64 (VAR_CTE -> FCTE .)
    SEQUAL          reduce using rule 64 (VAR_CTE -> FCTE .)
    NOTEQ           reduce using rule 64 (VAR_CTE -> FCTE .)
    LESSEQTH        reduce using rule 64 (VAR_CTE -> FCTE .)
    GREATEREQTH     reduce using rule 64 (VAR_CTE -> FCTE .)
    EQUAL           reduce using rule 64 (VAR_CTE -> FCTE .)
    RPAR            reduce using rule 64 (VAR_CTE -> FCTE .)
    RBRA            reduce using rule 64 (VAR_CTE -> FCTE .)
    IF              reduce using rule 64 (VAR_CTE -> FCTE .)
    ID              reduce using rule 64 (VAR_CTE -> FCTE .)
    DRAW            reduce using rule 64 (VAR_CTE -> FCTE .)
    PRINT           reduce using rule 64 (VAR_CTE -> FCTE .)
    WHILE           reduce using rule 64 (VAR_CTE -> FCTE .)
    FOR             reduce using rule 64 (VAR_CTE -> FCTE .)
    INT             reduce using rule 64 (VAR_CTE -> FCTE .)
    BOOLEAN         reduce using rule 64 (VAR_CTE -> FCTE .)
    STRING          reduce using rule 64 (VAR_CTE -> FCTE .)
    FLOAT           reduce using rule 64 (VAR_CTE -> FCTE .)
    VOID            reduce using rule 64 (VAR_CTE -> FCTE .)
    LBRA            reduce using rule 64 (VAR_CTE -> FCTE .)
    ICTE            reduce using rule 64 (VAR_CTE -> FCTE .)
    FCTE            reduce using rule 64 (VAR_CTE -> FCTE .)
    LPAR            reduce using rule 64 (VAR_CTE -> FCTE .)
    END             reduce using rule 64 (VAR_CTE -> FCTE .)
    RETURN          reduce using rule 64 (VAR_CTE -> FCTE .)
    ELSE            reduce using rule 64 (VAR_CTE -> FCTE .)
    COMMA           reduce using rule 64 (VAR_CTE -> FCTE .)


state 79

    (78) VAR_FUNP -> DATA_TIPOS . ID VAR_FUNZ

    ID              shift and go to state 117


state 80

    (77) VAR_FUN -> LPAR VAR_FUNP . RPAR

    RPAR            shift and go to state 118


state 81

    (79) VAR_FUNP -> empty .

    RPAR            reduce using rule 79 (VAR_FUNP -> empty .)


state 82

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE . RETURN EXPRE END restoreScope

    RETURN          shift and go to state 119


state 83

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI . LPAR RPAR

    LPAR            shift and go to state 120


state 84

    (13) ESTATUTO -> EXPRE genQuad5 .

    IF              reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ID              reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    DRAW            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    PRINT           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    WHILE           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FOR             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    INT             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    BOOLEAN         reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    STRING          reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FLOAT           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    VOID            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    LBRA            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ICTE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FCTE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    LPAR            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    END             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    RETURN          reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ELSE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)


state 85

    (108) genQuad5 -> empty .

    IF              reduce using rule 108 (genQuad5 -> empty .)
    ID              reduce using rule 108 (genQuad5 -> empty .)
    DRAW            reduce using rule 108 (genQuad5 -> empty .)
    PRINT           reduce using rule 108 (genQuad5 -> empty .)
    WHILE           reduce using rule 108 (genQuad5 -> empty .)
    FOR             reduce using rule 108 (genQuad5 -> empty .)
    INT             reduce using rule 108 (genQuad5 -> empty .)
    BOOLEAN         reduce using rule 108 (genQuad5 -> empty .)
    STRING          reduce using rule 108 (genQuad5 -> empty .)
    FLOAT           reduce using rule 108 (genQuad5 -> empty .)
    VOID            reduce using rule 108 (genQuad5 -> empty .)
    LBRA            reduce using rule 108 (genQuad5 -> empty .)
    ICTE            reduce using rule 108 (genQuad5 -> empty .)
    FCTE            reduce using rule 108 (genQuad5 -> empty .)
    LPAR            reduce using rule 108 (genQuad5 -> empty .)
    END             reduce using rule 108 (genQuad5 -> empty .)
    RETURN          reduce using rule 108 (genQuad5 -> empty .)
    ELSE            reduce using rule 108 (genQuad5 -> empty .)


state 86

    (51) EXPRE -> EXT EXPREZ .

    COMMA           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    LBRA            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    ID              reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    ICTE            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    FCTE            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    LPAR            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    RPAR            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    IF              reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    DRAW            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    PRINT           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    WHILE           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    FOR             reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    INT             reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    BOOLEAN         reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    STRING          reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    FLOAT           reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    VOID            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    END             reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    RETURN          reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    ELSE            reduce using rule 51 (EXPRE -> EXT EXPREZ .)
    RBRA            reduce using rule 51 (EXPRE -> EXT EXPREZ .)


state 87

    (53) EXPREZ -> empty .

    IF              reduce using rule 53 (EXPREZ -> empty .)
    ID              reduce using rule 53 (EXPREZ -> empty .)
    DRAW            reduce using rule 53 (EXPREZ -> empty .)
    PRINT           reduce using rule 53 (EXPREZ -> empty .)
    WHILE           reduce using rule 53 (EXPREZ -> empty .)
    FOR             reduce using rule 53 (EXPREZ -> empty .)
    INT             reduce using rule 53 (EXPREZ -> empty .)
    BOOLEAN         reduce using rule 53 (EXPREZ -> empty .)
    STRING          reduce using rule 53 (EXPREZ -> empty .)
    FLOAT           reduce using rule 53 (EXPREZ -> empty .)
    VOID            reduce using rule 53 (EXPREZ -> empty .)
    LBRA            reduce using rule 53 (EXPREZ -> empty .)
    ICTE            reduce using rule 53 (EXPREZ -> empty .)
    FCTE            reduce using rule 53 (EXPREZ -> empty .)
    LPAR            reduce using rule 53 (EXPREZ -> empty .)
    END             reduce using rule 53 (EXPREZ -> empty .)
    RETURN          reduce using rule 53 (EXPREZ -> empty .)
    RPAR            reduce using rule 53 (EXPREZ -> empty .)
    ELSE            reduce using rule 53 (EXPREZ -> empty .)
    RBRA            reduce using rule 53 (EXPREZ -> empty .)
    COMMA           reduce using rule 53 (EXPREZ -> empty .)


state 88

    (52) EXPREZ -> EQUAL . operatorPush EXT
    (102) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 121
    empty                          shift and go to state 122

state 89

    (49) RELOP -> LESSEQTH .

    LBRA            reduce using rule 49 (RELOP -> LESSEQTH .)
    ID              reduce using rule 49 (RELOP -> LESSEQTH .)
    ICTE            reduce using rule 49 (RELOP -> LESSEQTH .)
    FCTE            reduce using rule 49 (RELOP -> LESSEQTH .)
    LPAR            reduce using rule 49 (RELOP -> LESSEQTH .)


state 90

    (55) EXT_W_RELOP -> RELOP . EXT
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 123
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 91

    (47) RELOP -> SEQUAL .

    LBRA            reduce using rule 47 (RELOP -> SEQUAL .)
    ID              reduce using rule 47 (RELOP -> SEQUAL .)
    ICTE            reduce using rule 47 (RELOP -> SEQUAL .)
    FCTE            reduce using rule 47 (RELOP -> SEQUAL .)
    LPAR            reduce using rule 47 (RELOP -> SEQUAL .)


state 92

    (48) RELOP -> NOTEQ .

    LBRA            reduce using rule 48 (RELOP -> NOTEQ .)
    ID              reduce using rule 48 (RELOP -> NOTEQ .)
    ICTE            reduce using rule 48 (RELOP -> NOTEQ .)
    FCTE            reduce using rule 48 (RELOP -> NOTEQ .)
    LPAR            reduce using rule 48 (RELOP -> NOTEQ .)


state 93

    (54) EXT -> EXP EXT_W_RELOP .

    EQUAL           reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    IF              reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    ID              reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    DRAW            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    PRINT           reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    WHILE           reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    FOR             reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    INT             reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    BOOLEAN         reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    STRING          reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    FLOAT           reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    VOID            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    LBRA            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    ICTE            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    FCTE            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    LPAR            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    END             reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    RETURN          reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    ELSE            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    COMMA           reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    RPAR            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)
    RBRA            reduce using rule 54 (EXT -> EXP EXT_W_RELOP .)


state 94

    (50) RELOP -> GREATEREQTH .

    LBRA            reduce using rule 50 (RELOP -> GREATEREQTH .)
    ID              reduce using rule 50 (RELOP -> GREATEREQTH .)
    ICTE            reduce using rule 50 (RELOP -> GREATEREQTH .)
    FCTE            reduce using rule 50 (RELOP -> GREATEREQTH .)
    LPAR            reduce using rule 50 (RELOP -> GREATEREQTH .)


state 95

    (46) RELOP -> GREATERTH .

    LBRA            reduce using rule 46 (RELOP -> GREATERTH .)
    ID              reduce using rule 46 (RELOP -> GREATERTH .)
    ICTE            reduce using rule 46 (RELOP -> GREATERTH .)
    FCTE            reduce using rule 46 (RELOP -> GREATERTH .)
    LPAR            reduce using rule 46 (RELOP -> GREATERTH .)


state 96

    (45) RELOP -> LESSTH .

    LBRA            reduce using rule 45 (RELOP -> LESSTH .)
    ID              reduce using rule 45 (RELOP -> LESSTH .)
    ICTE            reduce using rule 45 (RELOP -> LESSTH .)
    FCTE            reduce using rule 45 (RELOP -> LESSTH .)
    LPAR            reduce using rule 45 (RELOP -> LESSTH .)


state 97

    (56) EXT_W_RELOP -> empty .

    EQUAL           reduce using rule 56 (EXT_W_RELOP -> empty .)
    IF              reduce using rule 56 (EXT_W_RELOP -> empty .)
    ID              reduce using rule 56 (EXT_W_RELOP -> empty .)
    DRAW            reduce using rule 56 (EXT_W_RELOP -> empty .)
    PRINT           reduce using rule 56 (EXT_W_RELOP -> empty .)
    WHILE           reduce using rule 56 (EXT_W_RELOP -> empty .)
    FOR             reduce using rule 56 (EXT_W_RELOP -> empty .)
    INT             reduce using rule 56 (EXT_W_RELOP -> empty .)
    BOOLEAN         reduce using rule 56 (EXT_W_RELOP -> empty .)
    STRING          reduce using rule 56 (EXT_W_RELOP -> empty .)
    FLOAT           reduce using rule 56 (EXT_W_RELOP -> empty .)
    VOID            reduce using rule 56 (EXT_W_RELOP -> empty .)
    LBRA            reduce using rule 56 (EXT_W_RELOP -> empty .)
    ICTE            reduce using rule 56 (EXT_W_RELOP -> empty .)
    FCTE            reduce using rule 56 (EXT_W_RELOP -> empty .)
    LPAR            reduce using rule 56 (EXT_W_RELOP -> empty .)
    END             reduce using rule 56 (EXT_W_RELOP -> empty .)
    RETURN          reduce using rule 56 (EXT_W_RELOP -> empty .)
    RPAR            reduce using rule 56 (EXT_W_RELOP -> empty .)
    ELSE            reduce using rule 56 (EXT_W_RELOP -> empty .)
    RBRA            reduce using rule 56 (EXT_W_RELOP -> empty .)
    COMMA           reduce using rule 56 (EXT_W_RELOP -> empty .)


state 98

    (65) IMPRIMIR -> PRINT LBRA . IMPRIMIRZ RBRA
    (66) IMPRIMIRZ -> . EXPRE
    (67) IMPRIMIRZ -> . SCTE
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    SCTE            shift and go to state 126
    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 124
    empty                          shift and go to state 100
    IMPRIMIRZ                      shift and go to state 125
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 99

    (70) FAC -> LBRA EXPRE . RPAR

    RPAR            shift and go to state 127


state 100

    (103) pushExp -> empty .

    LPAR            reduce using rule 103 (pushExp -> empty .)


state 101

    (71) FAC -> ID . operandPush FACT
    (101) operandPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    operandPush                    shift and go to state 112
    empty                          shift and go to state 109

state 102

    (20) BLOQUE -> ESTATUTO BLOQUE .

    ELSE            reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUE .)
    END             reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUE .)
    RETURN          reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUE .)


state 103

    (41) FORZ -> FOR LPAR . ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 128


state 104

    (57) EXP -> TERMINO genQuad1 . EXP_W_SIGN
    (58) EXP_W_SIGN -> . ASOP operatorPush EXP
    (59) EXP_W_SIGN -> . empty
    (27) ASOP -> . PLUS
    (28) ASOP -> . MINUS
    (1) empty -> .

    PLUS            shift and go to state 131
    MINUS           shift and go to state 132
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    ASOP                           shift and go to state 129
    EXP_W_SIGN                     shift and go to state 130
    empty                          shift and go to state 133

state 105

    (106) genQuad1 -> empty .

    PLUS            reduce using rule 106 (genQuad1 -> empty .)
    MINUS           reduce using rule 106 (genQuad1 -> empty .)
    LESSTH          reduce using rule 106 (genQuad1 -> empty .)
    GREATERTH       reduce using rule 106 (genQuad1 -> empty .)
    SEQUAL          reduce using rule 106 (genQuad1 -> empty .)
    NOTEQ           reduce using rule 106 (genQuad1 -> empty .)
    LESSEQTH        reduce using rule 106 (genQuad1 -> empty .)
    GREATEREQTH     reduce using rule 106 (genQuad1 -> empty .)
    EQUAL           reduce using rule 106 (genQuad1 -> empty .)
    IF              reduce using rule 106 (genQuad1 -> empty .)
    ID              reduce using rule 106 (genQuad1 -> empty .)
    DRAW            reduce using rule 106 (genQuad1 -> empty .)
    PRINT           reduce using rule 106 (genQuad1 -> empty .)
    WHILE           reduce using rule 106 (genQuad1 -> empty .)
    FOR             reduce using rule 106 (genQuad1 -> empty .)
    INT             reduce using rule 106 (genQuad1 -> empty .)
    BOOLEAN         reduce using rule 106 (genQuad1 -> empty .)
    STRING          reduce using rule 106 (genQuad1 -> empty .)
    FLOAT           reduce using rule 106 (genQuad1 -> empty .)
    VOID            reduce using rule 106 (genQuad1 -> empty .)
    LBRA            reduce using rule 106 (genQuad1 -> empty .)
    ICTE            reduce using rule 106 (genQuad1 -> empty .)
    FCTE            reduce using rule 106 (genQuad1 -> empty .)
    LPAR            reduce using rule 106 (genQuad1 -> empty .)
    END             reduce using rule 106 (genQuad1 -> empty .)
    RETURN          reduce using rule 106 (genQuad1 -> empty .)
    RPAR            reduce using rule 106 (genQuad1 -> empty .)
    ELSE            reduce using rule 106 (genQuad1 -> empty .)
    RBRA            reduce using rule 106 (genQuad1 -> empty .)
    COMMA           reduce using rule 106 (genQuad1 -> empty .)


state 106

    (68) FAC -> pushExp LPAR . EXPRE RPAR popExp
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 134
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 107

    (37) PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END .

    $end            reduce using rule 37 (PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END .)


state 108

    (69) FAC -> VAR_CTE operandPush .

    MULT            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    DIVI            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    PLUS            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    MINUS           reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    LESSTH          reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    GREATERTH       reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    SEQUAL          reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    NOTEQ           reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    LESSEQTH        reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    GREATEREQTH     reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    EQUAL           reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    IF              reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    ID              reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    DRAW            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    PRINT           reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    WHILE           reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    FOR             reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    INT             reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    BOOLEAN         reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    STRING          reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    FLOAT           reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    VOID            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    LBRA            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    ICTE            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    FCTE            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    LPAR            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    END             reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    RETURN          reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    RPAR            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    ELSE            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    RBRA            reduce using rule 69 (FAC -> VAR_CTE operandPush .)
    COMMA           reduce using rule 69 (FAC -> VAR_CTE operandPush .)


state 109

    (101) operandPush -> empty .

    LBRA            reduce using rule 101 (operandPush -> empty .)
    LPAR            reduce using rule 101 (operandPush -> empty .)
    MULT            reduce using rule 101 (operandPush -> empty .)
    DIVI            reduce using rule 101 (operandPush -> empty .)
    PLUS            reduce using rule 101 (operandPush -> empty .)
    MINUS           reduce using rule 101 (operandPush -> empty .)
    LESSTH          reduce using rule 101 (operandPush -> empty .)
    GREATERTH       reduce using rule 101 (operandPush -> empty .)
    SEQUAL          reduce using rule 101 (operandPush -> empty .)
    NOTEQ           reduce using rule 101 (operandPush -> empty .)
    LESSEQTH        reduce using rule 101 (operandPush -> empty .)
    GREATEREQTH     reduce using rule 101 (operandPush -> empty .)
    EQUAL           reduce using rule 101 (operandPush -> empty .)
    RPAR            reduce using rule 101 (operandPush -> empty .)
    IF              reduce using rule 101 (operandPush -> empty .)
    ID              reduce using rule 101 (operandPush -> empty .)
    DRAW            reduce using rule 101 (operandPush -> empty .)
    PRINT           reduce using rule 101 (operandPush -> empty .)
    WHILE           reduce using rule 101 (operandPush -> empty .)
    FOR             reduce using rule 101 (operandPush -> empty .)
    INT             reduce using rule 101 (operandPush -> empty .)
    BOOLEAN         reduce using rule 101 (operandPush -> empty .)
    STRING          reduce using rule 101 (operandPush -> empty .)
    FLOAT           reduce using rule 101 (operandPush -> empty .)
    VOID            reduce using rule 101 (operandPush -> empty .)
    ICTE            reduce using rule 101 (operandPush -> empty .)
    FCTE            reduce using rule 101 (operandPush -> empty .)
    END             reduce using rule 101 (operandPush -> empty .)
    RETURN          reduce using rule 101 (operandPush -> empty .)
    ELSE            reduce using rule 101 (operandPush -> empty .)
    RBRA            reduce using rule 101 (operandPush -> empty .)
    COMMA           reduce using rule 101 (operandPush -> empty .)


state 110

    (32) LLAMADA_FUNCION -> ID LPAR . LLAMADA_FUNCIONP RPAR
    (33) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (34) LLAMADA_FUNCIONP -> . empty
    (51) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 136
    LLAMADA_FUNCIONP               shift and go to state 135
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75
    empty                          shift and go to state 137

state 111

    (76) ACCION -> ID POINT . DIBUJA LPAR VAR_CTE RPAR
    (82) DIBUJA -> . DEFINIRPOSICION
    (83) DIBUJA -> . DEFINIRCOLOR
    (84) DIBUJA -> . DERECHO
    (85) DIBUJA -> . REVERSA
    (86) DIBUJA -> . IZQUIERDA
    (87) DIBUJA -> . DERECHA
    (88) DIBUJA -> . VELOCIDAD
    (89) DIBUJA -> . BORRAR
    (90) DIBUJA -> . MOSTRAR
    (91) DIBUJA -> . OCULTAR
    (92) DIBUJA -> . CIRCULO
    (93) DIBUJA -> . DEFINIRX
    (94) DIBUJA -> . DEFINIRY
    (95) DIBUJA -> . ARCO
    (96) DIBUJA -> . GROSOR

    DEFINIRPOSICION shift and go to state 144
    DEFINIRCOLOR    shift and go to state 153
    DERECHO         shift and go to state 148
    REVERSA         shift and go to state 142
    IZQUIERDA       shift and go to state 146
    DERECHA         shift and go to state 138
    VELOCIDAD       shift and go to state 141
    BORRAR          shift and go to state 151
    MOSTRAR         shift and go to state 145
    OCULTAR         shift and go to state 143
    CIRCULO         shift and go to state 140
    DEFINIRX        shift and go to state 150
    DEFINIRY        shift and go to state 149
    ARCO            shift and go to state 139
    GROSOR          shift and go to state 152

    DIBUJA                         shift and go to state 147

state 112

    (71) FAC -> ID operandPush . FACT
    (72) FACT -> . LBRA EXPRE RBRA
    (73) FACT -> . LPAR EXPRE RPAR
    (74) FACT -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LBRA resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
    LBRA            shift and go to state 155
    LPAR            shift and go to state 154
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

  ! LBRA            [ reduce using rule 1 (empty -> .) ]
  ! LPAR            [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 156
    FACT                           shift and go to state 157

state 113

    (42) CONDICION -> IF LPAR . EXPRE RPAR BLOQUE CONDICIONP END
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 158
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 114

    (60) TERMINO -> FAC genQuad2 . TERMINO_W_SIGN
    (61) TERMINO_W_SIGN -> . MDOP operatorPush TERMINO
    (62) TERMINO_W_SIGN -> . empty
    (29) MDOP -> . MULT
    (30) MDOP -> . DIVI
    (1) empty -> .

    MULT            shift and go to state 161
    DIVI            shift and go to state 159
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    MDOP                           shift and go to state 160
    empty                          shift and go to state 162
    TERMINO_W_SIGN                 shift and go to state 163

state 115

    (107) genQuad2 -> empty .

    MULT            reduce using rule 107 (genQuad2 -> empty .)
    DIVI            reduce using rule 107 (genQuad2 -> empty .)
    PLUS            reduce using rule 107 (genQuad2 -> empty .)
    MINUS           reduce using rule 107 (genQuad2 -> empty .)
    LESSTH          reduce using rule 107 (genQuad2 -> empty .)
    GREATERTH       reduce using rule 107 (genQuad2 -> empty .)
    SEQUAL          reduce using rule 107 (genQuad2 -> empty .)
    NOTEQ           reduce using rule 107 (genQuad2 -> empty .)
    LESSEQTH        reduce using rule 107 (genQuad2 -> empty .)
    GREATEREQTH     reduce using rule 107 (genQuad2 -> empty .)
    EQUAL           reduce using rule 107 (genQuad2 -> empty .)
    IF              reduce using rule 107 (genQuad2 -> empty .)
    ID              reduce using rule 107 (genQuad2 -> empty .)
    DRAW            reduce using rule 107 (genQuad2 -> empty .)
    PRINT           reduce using rule 107 (genQuad2 -> empty .)
    WHILE           reduce using rule 107 (genQuad2 -> empty .)
    FOR             reduce using rule 107 (genQuad2 -> empty .)
    INT             reduce using rule 107 (genQuad2 -> empty .)
    BOOLEAN         reduce using rule 107 (genQuad2 -> empty .)
    STRING          reduce using rule 107 (genQuad2 -> empty .)
    FLOAT           reduce using rule 107 (genQuad2 -> empty .)
    VOID            reduce using rule 107 (genQuad2 -> empty .)
    LBRA            reduce using rule 107 (genQuad2 -> empty .)
    ICTE            reduce using rule 107 (genQuad2 -> empty .)
    FCTE            reduce using rule 107 (genQuad2 -> empty .)
    LPAR            reduce using rule 107 (genQuad2 -> empty .)
    END             reduce using rule 107 (genQuad2 -> empty .)
    RETURN          reduce using rule 107 (genQuad2 -> empty .)
    RPAR            reduce using rule 107 (genQuad2 -> empty .)
    ELSE            reduce using rule 107 (genQuad2 -> empty .)
    RBRA            reduce using rule 107 (genQuad2 -> empty .)
    COMMA           reduce using rule 107 (genQuad2 -> empty .)


state 116

    (40) WHILEF -> WHILE LPAR . EXPRE RPAR BLOQUE END
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 164
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 117

    (78) VAR_FUNP -> DATA_TIPOS ID . VAR_FUNZ
    (80) VAR_FUNZ -> . COMMA VAR_FUNP
    (81) VAR_FUNZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 166
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 167
    VAR_FUNZ                       shift and go to state 165

state 118

    (77) VAR_FUN -> LPAR VAR_FUNP RPAR .

    IF              reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ID              reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    DRAW            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    PRINT           reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    WHILE           reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FOR             reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    INT             reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    BOOLEAN         reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    STRING          reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FLOAT           reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    VOID            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LBRA            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ICTE            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FCTE            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    RETURN          reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LPAR            reduce using rule 77 (VAR_FUN -> LPAR VAR_FUNP RPAR .)


state 119

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN . EXPRE END restoreScope
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    EXPRE                          shift and go to state 168
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 100

state 120

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR . RPAR

    RPAR            shift and go to state 169


state 121

    (52) EXPREZ -> EQUAL operatorPush . EXT
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 170
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 122

    (102) operatorPush -> empty .

    LBRA            reduce using rule 102 (operatorPush -> empty .)
    ID              reduce using rule 102 (operatorPush -> empty .)
    ICTE            reduce using rule 102 (operatorPush -> empty .)
    FCTE            reduce using rule 102 (operatorPush -> empty .)
    LPAR            reduce using rule 102 (operatorPush -> empty .)


state 123

    (55) EXT_W_RELOP -> RELOP EXT .

    EQUAL           reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    IF              reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    ID              reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    DRAW            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    PRINT           reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    WHILE           reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    FOR             reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    INT             reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    BOOLEAN         reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    STRING          reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    FLOAT           reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    VOID            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    LBRA            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    ICTE            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    FCTE            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    LPAR            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    END             reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    RETURN          reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    RPAR            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    ELSE            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    RBRA            reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)
    COMMA           reduce using rule 55 (EXT_W_RELOP -> RELOP EXT .)


state 124

    (66) IMPRIMIRZ -> EXPRE .

    RBRA            reduce using rule 66 (IMPRIMIRZ -> EXPRE .)


state 125

    (65) IMPRIMIR -> PRINT LBRA IMPRIMIRZ . RBRA

    RBRA            shift and go to state 171


state 126

    (67) IMPRIMIRZ -> SCTE .

    RBRA            reduce using rule 67 (IMPRIMIRZ -> SCTE .)


state 127

    (70) FAC -> LBRA EXPRE RPAR .

    MULT            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    DIVI            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    PLUS            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    MINUS           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LESSTH          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    GREATERTH       reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    SEQUAL          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    NOTEQ           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LESSEQTH        reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    GREATEREQTH     reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    EQUAL           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    IF              reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    ID              reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    DRAW            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    PRINT           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    WHILE           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    FOR             reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    INT             reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    BOOLEAN         reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    STRING          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    FLOAT           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    VOID            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LBRA            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    ICTE            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    FCTE            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    LPAR            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    END             reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    RETURN          reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    RPAR            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    ELSE            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    RBRA            reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)
    COMMA           reduce using rule 70 (FAC -> LBRA EXPRE RPAR .)


state 128

    (41) FORZ -> FOR LPAR ICTE . COMMA ICTE COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 172


state 129

    (58) EXP_W_SIGN -> ASOP . operatorPush EXP
    (102) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 173
    empty                          shift and go to state 122

state 130

    (57) EXP -> TERMINO genQuad1 EXP_W_SIGN .

    LESSTH          reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    GREATERTH       reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    SEQUAL          reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    NOTEQ           reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    LESSEQTH        reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    GREATEREQTH     reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    EQUAL           reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    IF              reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    ID              reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    DRAW            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    PRINT           reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    WHILE           reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    FOR             reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    INT             reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    BOOLEAN         reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    STRING          reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    FLOAT           reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    VOID            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    LBRA            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    ICTE            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    FCTE            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    LPAR            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    END             reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    RETURN          reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    RPAR            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    ELSE            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    RBRA            reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)
    COMMA           reduce using rule 57 (EXP -> TERMINO genQuad1 EXP_W_SIGN .)


state 131

    (27) ASOP -> PLUS .

    LBRA            reduce using rule 27 (ASOP -> PLUS .)
    ID              reduce using rule 27 (ASOP -> PLUS .)
    ICTE            reduce using rule 27 (ASOP -> PLUS .)
    FCTE            reduce using rule 27 (ASOP -> PLUS .)
    LPAR            reduce using rule 27 (ASOP -> PLUS .)


state 132

    (28) ASOP -> MINUS .

    LBRA            reduce using rule 28 (ASOP -> MINUS .)
    ID              reduce using rule 28 (ASOP -> MINUS .)
    ICTE            reduce using rule 28 (ASOP -> MINUS .)
    FCTE            reduce using rule 28 (ASOP -> MINUS .)
    LPAR            reduce using rule 28 (ASOP -> MINUS .)


state 133

    (59) EXP_W_SIGN -> empty .

    LESSTH          reduce using rule 59 (EXP_W_SIGN -> empty .)
    GREATERTH       reduce using rule 59 (EXP_W_SIGN -> empty .)
    SEQUAL          reduce using rule 59 (EXP_W_SIGN -> empty .)
    NOTEQ           reduce using rule 59 (EXP_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 59 (EXP_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 59 (EXP_W_SIGN -> empty .)
    EQUAL           reduce using rule 59 (EXP_W_SIGN -> empty .)
    IF              reduce using rule 59 (EXP_W_SIGN -> empty .)
    ID              reduce using rule 59 (EXP_W_SIGN -> empty .)
    DRAW            reduce using rule 59 (EXP_W_SIGN -> empty .)
    PRINT           reduce using rule 59 (EXP_W_SIGN -> empty .)
    WHILE           reduce using rule 59 (EXP_W_SIGN -> empty .)
    FOR             reduce using rule 59 (EXP_W_SIGN -> empty .)
    INT             reduce using rule 59 (EXP_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 59 (EXP_W_SIGN -> empty .)
    STRING          reduce using rule 59 (EXP_W_SIGN -> empty .)
    FLOAT           reduce using rule 59 (EXP_W_SIGN -> empty .)
    VOID            reduce using rule 59 (EXP_W_SIGN -> empty .)
    LBRA            reduce using rule 59 (EXP_W_SIGN -> empty .)
    ICTE            reduce using rule 59 (EXP_W_SIGN -> empty .)
    FCTE            reduce using rule 59 (EXP_W_SIGN -> empty .)
    LPAR            reduce using rule 59 (EXP_W_SIGN -> empty .)
    END             reduce using rule 59 (EXP_W_SIGN -> empty .)
    RETURN          reduce using rule 59 (EXP_W_SIGN -> empty .)
    RPAR            reduce using rule 59 (EXP_W_SIGN -> empty .)
    ELSE            reduce using rule 59 (EXP_W_SIGN -> empty .)
    RBRA            reduce using rule 59 (EXP_W_SIGN -> empty .)
    COMMA           reduce using rule 59 (EXP_W_SIGN -> empty .)


state 134

    (68) FAC -> pushExp LPAR EXPRE . RPAR popExp

    RPAR            shift and go to state 174


state 135

    (32) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP . RPAR

    RPAR            shift and go to state 175


state 136

    (33) LLAMADA_FUNCIONP -> EXPRE . LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (35) LLAMADA_FUNCIONZ -> . COMMA
    (36) LLAMADA_FUNCIONZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 177
    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)

    LLAMADA_FUNCIONZ               shift and go to state 176
    empty                          shift and go to state 178

state 137

    (34) LLAMADA_FUNCIONP -> empty .
    (103) pushExp -> empty .

    RPAR            reduce using rule 34 (LLAMADA_FUNCIONP -> empty .)
    LPAR            reduce using rule 103 (pushExp -> empty .)


state 138

    (87) DIBUJA -> DERECHA .

    LPAR            reduce using rule 87 (DIBUJA -> DERECHA .)


state 139

    (95) DIBUJA -> ARCO .

    LPAR            reduce using rule 95 (DIBUJA -> ARCO .)


state 140

    (92) DIBUJA -> CIRCULO .

    LPAR            reduce using rule 92 (DIBUJA -> CIRCULO .)


state 141

    (88) DIBUJA -> VELOCIDAD .

    LPAR            reduce using rule 88 (DIBUJA -> VELOCIDAD .)


state 142

    (85) DIBUJA -> REVERSA .

    LPAR            reduce using rule 85 (DIBUJA -> REVERSA .)


state 143

    (91) DIBUJA -> OCULTAR .

    LPAR            reduce using rule 91 (DIBUJA -> OCULTAR .)


state 144

    (82) DIBUJA -> DEFINIRPOSICION .

    LPAR            reduce using rule 82 (DIBUJA -> DEFINIRPOSICION .)


state 145

    (90) DIBUJA -> MOSTRAR .

    LPAR            reduce using rule 90 (DIBUJA -> MOSTRAR .)


state 146

    (86) DIBUJA -> IZQUIERDA .

    LPAR            reduce using rule 86 (DIBUJA -> IZQUIERDA .)


state 147

    (76) ACCION -> ID POINT DIBUJA . LPAR VAR_CTE RPAR

    LPAR            shift and go to state 179


state 148

    (84) DIBUJA -> DERECHO .

    LPAR            reduce using rule 84 (DIBUJA -> DERECHO .)


state 149

    (94) DIBUJA -> DEFINIRY .

    LPAR            reduce using rule 94 (DIBUJA -> DEFINIRY .)


state 150

    (93) DIBUJA -> DEFINIRX .

    LPAR            reduce using rule 93 (DIBUJA -> DEFINIRX .)


state 151

    (89) DIBUJA -> BORRAR .

    LPAR            reduce using rule 89 (DIBUJA -> BORRAR .)


state 152

    (96) DIBUJA -> GROSOR .

    LPAR            reduce using rule 96 (DIBUJA -> GROSOR .)


state 153

    (83) DIBUJA -> DEFINIRCOLOR .

    LPAR            reduce using rule 83 (DIBUJA -> DEFINIRCOLOR .)


state 154

    (73) FACT -> LPAR . EXPRE RPAR
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 180
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 155

    (72) FACT -> LBRA . EXPRE RBRA
    (51) EXPRE -> . EXT EXPREZ
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 181
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75

state 156

    (74) FACT -> empty .

    MULT            reduce using rule 74 (FACT -> empty .)
    DIVI            reduce using rule 74 (FACT -> empty .)
    PLUS            reduce using rule 74 (FACT -> empty .)
    MINUS           reduce using rule 74 (FACT -> empty .)
    LESSTH          reduce using rule 74 (FACT -> empty .)
    GREATERTH       reduce using rule 74 (FACT -> empty .)
    SEQUAL          reduce using rule 74 (FACT -> empty .)
    NOTEQ           reduce using rule 74 (FACT -> empty .)
    LESSEQTH        reduce using rule 74 (FACT -> empty .)
    GREATEREQTH     reduce using rule 74 (FACT -> empty .)
    EQUAL           reduce using rule 74 (FACT -> empty .)
    IF              reduce using rule 74 (FACT -> empty .)
    ID              reduce using rule 74 (FACT -> empty .)
    DRAW            reduce using rule 74 (FACT -> empty .)
    PRINT           reduce using rule 74 (FACT -> empty .)
    WHILE           reduce using rule 74 (FACT -> empty .)
    FOR             reduce using rule 74 (FACT -> empty .)
    INT             reduce using rule 74 (FACT -> empty .)
    BOOLEAN         reduce using rule 74 (FACT -> empty .)
    STRING          reduce using rule 74 (FACT -> empty .)
    FLOAT           reduce using rule 74 (FACT -> empty .)
    VOID            reduce using rule 74 (FACT -> empty .)
    LBRA            reduce using rule 74 (FACT -> empty .)
    ICTE            reduce using rule 74 (FACT -> empty .)
    FCTE            reduce using rule 74 (FACT -> empty .)
    LPAR            reduce using rule 74 (FACT -> empty .)
    END             reduce using rule 74 (FACT -> empty .)
    RETURN          reduce using rule 74 (FACT -> empty .)
    RPAR            reduce using rule 74 (FACT -> empty .)
    ELSE            reduce using rule 74 (FACT -> empty .)
    RBRA            reduce using rule 74 (FACT -> empty .)
    COMMA           reduce using rule 74 (FACT -> empty .)


state 157

    (71) FAC -> ID operandPush FACT .

    MULT            reduce using rule 71 (FAC -> ID operandPush FACT .)
    DIVI            reduce using rule 71 (FAC -> ID operandPush FACT .)
    PLUS            reduce using rule 71 (FAC -> ID operandPush FACT .)
    MINUS           reduce using rule 71 (FAC -> ID operandPush FACT .)
    LESSTH          reduce using rule 71 (FAC -> ID operandPush FACT .)
    GREATERTH       reduce using rule 71 (FAC -> ID operandPush FACT .)
    SEQUAL          reduce using rule 71 (FAC -> ID operandPush FACT .)
    NOTEQ           reduce using rule 71 (FAC -> ID operandPush FACT .)
    LESSEQTH        reduce using rule 71 (FAC -> ID operandPush FACT .)
    GREATEREQTH     reduce using rule 71 (FAC -> ID operandPush FACT .)
    EQUAL           reduce using rule 71 (FAC -> ID operandPush FACT .)
    IF              reduce using rule 71 (FAC -> ID operandPush FACT .)
    ID              reduce using rule 71 (FAC -> ID operandPush FACT .)
    DRAW            reduce using rule 71 (FAC -> ID operandPush FACT .)
    PRINT           reduce using rule 71 (FAC -> ID operandPush FACT .)
    WHILE           reduce using rule 71 (FAC -> ID operandPush FACT .)
    FOR             reduce using rule 71 (FAC -> ID operandPush FACT .)
    INT             reduce using rule 71 (FAC -> ID operandPush FACT .)
    BOOLEAN         reduce using rule 71 (FAC -> ID operandPush FACT .)
    STRING          reduce using rule 71 (FAC -> ID operandPush FACT .)
    FLOAT           reduce using rule 71 (FAC -> ID operandPush FACT .)
    VOID            reduce using rule 71 (FAC -> ID operandPush FACT .)
    LBRA            reduce using rule 71 (FAC -> ID operandPush FACT .)
    ICTE            reduce using rule 71 (FAC -> ID operandPush FACT .)
    FCTE            reduce using rule 71 (FAC -> ID operandPush FACT .)
    LPAR            reduce using rule 71 (FAC -> ID operandPush FACT .)
    END             reduce using rule 71 (FAC -> ID operandPush FACT .)
    RETURN          reduce using rule 71 (FAC -> ID operandPush FACT .)
    RPAR            reduce using rule 71 (FAC -> ID operandPush FACT .)
    ELSE            reduce using rule 71 (FAC -> ID operandPush FACT .)
    RBRA            reduce using rule 71 (FAC -> ID operandPush FACT .)
    COMMA           reduce using rule 71 (FAC -> ID operandPush FACT .)


state 158

    (42) CONDICION -> IF LPAR EXPRE . RPAR BLOQUE CONDICIONP END

    RPAR            shift and go to state 182


state 159

    (30) MDOP -> DIVI .

    LBRA            reduce using rule 30 (MDOP -> DIVI .)
    ID              reduce using rule 30 (MDOP -> DIVI .)
    ICTE            reduce using rule 30 (MDOP -> DIVI .)
    FCTE            reduce using rule 30 (MDOP -> DIVI .)
    LPAR            reduce using rule 30 (MDOP -> DIVI .)


state 160

    (61) TERMINO_W_SIGN -> MDOP . operatorPush TERMINO
    (102) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 183
    empty                          shift and go to state 122

state 161

    (29) MDOP -> MULT .

    LBRA            reduce using rule 29 (MDOP -> MULT .)
    ID              reduce using rule 29 (MDOP -> MULT .)
    ICTE            reduce using rule 29 (MDOP -> MULT .)
    FCTE            reduce using rule 29 (MDOP -> MULT .)
    LPAR            reduce using rule 29 (MDOP -> MULT .)


state 162

    (62) TERMINO_W_SIGN -> empty .

    PLUS            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    MINUS           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LESSTH          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    GREATERTH       reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    SEQUAL          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    NOTEQ           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    EQUAL           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    IF              reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    ID              reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    DRAW            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    PRINT           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    WHILE           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    FOR             reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    INT             reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    STRING          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    FLOAT           reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    VOID            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LBRA            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    ICTE            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    FCTE            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    LPAR            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    END             reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    RETURN          reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    RPAR            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    ELSE            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    RBRA            reduce using rule 62 (TERMINO_W_SIGN -> empty .)
    COMMA           reduce using rule 62 (TERMINO_W_SIGN -> empty .)


state 163

    (60) TERMINO -> FAC genQuad2 TERMINO_W_SIGN .

    PLUS            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    MINUS           reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    LESSTH          reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    GREATERTH       reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    SEQUAL          reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    NOTEQ           reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    LESSEQTH        reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    GREATEREQTH     reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    EQUAL           reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    IF              reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    ID              reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    DRAW            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    PRINT           reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    WHILE           reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    FOR             reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    INT             reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    BOOLEAN         reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    STRING          reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    FLOAT           reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    VOID            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    LBRA            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    ICTE            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    FCTE            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    LPAR            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    END             reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    RETURN          reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    ELSE            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    RPAR            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    RBRA            reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)
    COMMA           reduce using rule 60 (TERMINO -> FAC genQuad2 TERMINO_W_SIGN .)


state 164

    (40) WHILEF -> WHILE LPAR EXPRE . RPAR BLOQUE END

    RPAR            shift and go to state 184


state 165

    (78) VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .

    RPAR            reduce using rule 78 (VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .)


state 166

    (80) VAR_FUNZ -> COMMA . VAR_FUNP
    (78) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (79) VAR_FUNP -> . empty
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (1) empty -> .

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 81
    DATA_TIPOS                     shift and go to state 79
    VAR_FUNP                       shift and go to state 185

state 167

    (81) VAR_FUNZ -> empty .

    RPAR            reduce using rule 81 (VAR_FUNZ -> empty .)


state 168

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE . END restoreScope

    END             shift and go to state 186


state 169

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .

    IF              reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ID              reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    DRAW            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    PRINT           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    WHILE           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FOR             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    INT             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    BOOLEAN         reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    STRING          reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FLOAT           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    VOID            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    LBRA            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ICTE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FCTE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    LPAR            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    END             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    RETURN          reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ELSE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)


state 170

    (52) EXPREZ -> EQUAL operatorPush EXT .

    IF              reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    ID              reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    DRAW            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    PRINT           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    WHILE           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    FOR             reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    INT             reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    BOOLEAN         reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    STRING          reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    FLOAT           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    VOID            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    LBRA            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    ICTE            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    FCTE            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    LPAR            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    END             reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    RETURN          reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    RPAR            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    ELSE            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    RBRA            reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)
    COMMA           reduce using rule 52 (EXPREZ -> EQUAL operatorPush EXT .)


state 171

    (65) IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .

    IF              reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ID              reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    DRAW            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    PRINT           reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    WHILE           reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FOR             reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    INT             reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    BOOLEAN         reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    STRING          reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FLOAT           reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    VOID            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    LBRA            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ICTE            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FCTE            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    LPAR            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    END             reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    RETURN          reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ELSE            reduce using rule 65 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)


state 172

    (41) FORZ -> FOR LPAR ICTE COMMA . ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 187


state 173

    (58) EXP_W_SIGN -> ASOP operatorPush . EXP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 63
    empty                          shift and go to state 100
    VAR_CTE                        shift and go to state 72
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 188
    FAC                            shift and go to state 75

state 174

    (68) FAC -> pushExp LPAR EXPRE RPAR . popExp
    (104) popExp -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    popExp                         shift and go to state 189
    empty                          shift and go to state 190

state 175

    (32) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .

    IF              reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ID              reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    DRAW            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    PRINT           reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    WHILE           reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FOR             reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    INT             reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    BOOLEAN         reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    STRING          reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FLOAT           reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    VOID            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LBRA            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ICTE            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FCTE            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LPAR            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    RETURN          reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    END             reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ELSE            reduce using rule 32 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)


state 176

    (33) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ . LLAMADA_FUNCIONP
    (33) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (34) LLAMADA_FUNCIONP -> . empty
    (51) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (54) EXT -> . EXP EXT_W_RELOP
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    pushExp                        shift and go to state 63
    EXPRE                          shift and go to state 136
    LLAMADA_FUNCIONP               shift and go to state 191
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 62
    EXP                            shift and go to state 56
    FAC                            shift and go to state 75
    empty                          shift and go to state 137

state 177

    (35) LLAMADA_FUNCIONZ -> COMMA .

    LBRA            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    ID              reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    ICTE            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    FCTE            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    LPAR            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)
    RPAR            reduce using rule 35 (LLAMADA_FUNCIONZ -> COMMA .)


state 178

    (36) LLAMADA_FUNCIONZ -> empty .

    LBRA            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    ID              reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    ICTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    FCTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    LPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)
    RPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> empty .)


state 179

    (76) ACCION -> ID POINT DIBUJA LPAR . VAR_CTE RPAR
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VAR_CTE                        shift and go to state 192

state 180

    (73) FACT -> LPAR EXPRE . RPAR

    RPAR            shift and go to state 193


state 181

    (72) FACT -> LBRA EXPRE . RBRA

    RBRA            shift and go to state 194


state 182

    (42) CONDICION -> IF LPAR EXPRE RPAR . BLOQUE CONDICIONP END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    ELSE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VART                           shift and go to state 66
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 67
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 195
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 68

state 183

    (61) TERMINO_W_SIGN -> MDOP operatorPush . TERMINO
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 101
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78
    LPAR            reduce using rule 1 (empty -> .)

    VAR_CTE                        shift and go to state 72
    empty                          shift and go to state 100
    TERMINO                        shift and go to state 196
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75

state 184

    (40) WHILEF -> WHILE LPAR EXPRE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VART                           shift and go to state 66
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 67
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 197
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 68

state 185

    (80) VAR_FUNZ -> COMMA VAR_FUNP .

    RPAR            reduce using rule 80 (VAR_FUNZ -> COMMA VAR_FUNP .)


state 186

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END . restoreScope
    (97) restoreScope -> . empty
    (1) empty -> .

    DEFINE          reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 198
    restoreScope                   shift and go to state 199

state 187

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE . COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 200


state 188

    (58) EXP_W_SIGN -> ASOP operatorPush EXP .

    LESSTH          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    GREATERTH       reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    SEQUAL          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    NOTEQ           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LESSEQTH        reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    GREATEREQTH     reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    EQUAL           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    IF              reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ID              reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    DRAW            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    PRINT           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    WHILE           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FOR             reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    INT             reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    BOOLEAN         reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    STRING          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FLOAT           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    VOID            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LBRA            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ICTE            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FCTE            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LPAR            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    END             reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RETURN          reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RPAR            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ELSE            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RBRA            reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    COMMA           reduce using rule 58 (EXP_W_SIGN -> ASOP operatorPush EXP .)


state 189

    (68) FAC -> pushExp LPAR EXPRE RPAR popExp .

    MULT            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    DIVI            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    PLUS            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    MINUS           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LESSTH          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    GREATERTH       reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    SEQUAL          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    NOTEQ           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LESSEQTH        reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    GREATEREQTH     reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    EQUAL           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    IF              reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ID              reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    DRAW            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    PRINT           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    WHILE           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FOR             reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    INT             reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    BOOLEAN         reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    STRING          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FLOAT           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    VOID            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LBRA            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ICTE            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FCTE            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LPAR            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    END             reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RETURN          reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RPAR            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ELSE            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RBRA            reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    COMMA           reduce using rule 68 (FAC -> pushExp LPAR EXPRE RPAR popExp .)


state 190

    (104) popExp -> empty .

    MULT            reduce using rule 104 (popExp -> empty .)
    DIVI            reduce using rule 104 (popExp -> empty .)
    PLUS            reduce using rule 104 (popExp -> empty .)
    MINUS           reduce using rule 104 (popExp -> empty .)
    LESSTH          reduce using rule 104 (popExp -> empty .)
    GREATERTH       reduce using rule 104 (popExp -> empty .)
    SEQUAL          reduce using rule 104 (popExp -> empty .)
    NOTEQ           reduce using rule 104 (popExp -> empty .)
    LESSEQTH        reduce using rule 104 (popExp -> empty .)
    GREATEREQTH     reduce using rule 104 (popExp -> empty .)
    EQUAL           reduce using rule 104 (popExp -> empty .)
    IF              reduce using rule 104 (popExp -> empty .)
    ID              reduce using rule 104 (popExp -> empty .)
    DRAW            reduce using rule 104 (popExp -> empty .)
    PRINT           reduce using rule 104 (popExp -> empty .)
    WHILE           reduce using rule 104 (popExp -> empty .)
    FOR             reduce using rule 104 (popExp -> empty .)
    INT             reduce using rule 104 (popExp -> empty .)
    BOOLEAN         reduce using rule 104 (popExp -> empty .)
    STRING          reduce using rule 104 (popExp -> empty .)
    FLOAT           reduce using rule 104 (popExp -> empty .)
    VOID            reduce using rule 104 (popExp -> empty .)
    LBRA            reduce using rule 104 (popExp -> empty .)
    ICTE            reduce using rule 104 (popExp -> empty .)
    FCTE            reduce using rule 104 (popExp -> empty .)
    LPAR            reduce using rule 104 (popExp -> empty .)
    END             reduce using rule 104 (popExp -> empty .)
    RETURN          reduce using rule 104 (popExp -> empty .)
    RPAR            reduce using rule 104 (popExp -> empty .)
    ELSE            reduce using rule 104 (popExp -> empty .)
    RBRA            reduce using rule 104 (popExp -> empty .)
    COMMA           reduce using rule 104 (popExp -> empty .)


state 191

    (33) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .

    RPAR            reduce using rule 33 (LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .)


state 192

    (76) ACCION -> ID POINT DIBUJA LPAR VAR_CTE . RPAR

    RPAR            shift and go to state 201


state 193

    (73) FACT -> LPAR EXPRE RPAR .

    MULT            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    DIVI            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    PLUS            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    MINUS           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LESSTH          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    GREATERTH       reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    SEQUAL          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    NOTEQ           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LESSEQTH        reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    GREATEREQTH     reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    EQUAL           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    IF              reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    ID              reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    DRAW            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    PRINT           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    WHILE           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    FOR             reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    INT             reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    BOOLEAN         reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    STRING          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    FLOAT           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    VOID            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LBRA            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    ICTE            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    FCTE            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    LPAR            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    END             reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    RETURN          reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    RPAR            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    ELSE            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    RBRA            reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)
    COMMA           reduce using rule 73 (FACT -> LPAR EXPRE RPAR .)


state 194

    (72) FACT -> LBRA EXPRE RBRA .

    MULT            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    DIVI            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    PLUS            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    MINUS           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LESSTH          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    GREATERTH       reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    SEQUAL          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    NOTEQ           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LESSEQTH        reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    GREATEREQTH     reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    EQUAL           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    IF              reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    ID              reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    DRAW            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    PRINT           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    WHILE           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    FOR             reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    INT             reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    BOOLEAN         reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    STRING          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    FLOAT           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    VOID            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LBRA            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    ICTE            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    FCTE            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    LPAR            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    END             reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    RETURN          reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    RPAR            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    ELSE            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    RBRA            reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)
    COMMA           reduce using rule 72 (FACT -> LBRA EXPRE RBRA .)


state 195

    (42) CONDICION -> IF LPAR EXPRE RPAR BLOQUE . CONDICIONP END
    (43) CONDICIONP -> . ELSE BLOQUE
    (44) CONDICIONP -> . empty
    (1) empty -> .

    ELSE            shift and go to state 203
    END             reduce using rule 1 (empty -> .)

    CONDICIONP                     shift and go to state 202
    empty                          shift and go to state 204

state 196

    (61) TERMINO_W_SIGN -> MDOP operatorPush TERMINO .

    PLUS            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    MINUS           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LESSTH          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    GREATERTH       reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    SEQUAL          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    NOTEQ           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LESSEQTH        reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    GREATEREQTH     reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    EQUAL           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    IF              reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ID              reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    DRAW            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    PRINT           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    WHILE           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FOR             reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    INT             reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    BOOLEAN         reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    STRING          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FLOAT           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    VOID            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LBRA            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ICTE            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FCTE            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LPAR            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    END             reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RETURN          reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RPAR            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ELSE            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RBRA            reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    COMMA           reduce using rule 61 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)


state 197

    (40) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE . END

    END             shift and go to state 205


state 198

    (97) restoreScope -> empty .

    DEFINE          reduce using rule 97 (restoreScope -> empty .)
    MAIN            reduce using rule 97 (restoreScope -> empty .)


state 199

    (75) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .

    DEFINE          reduce using rule 75 (FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .)
    MAIN            reduce using rule 75 (FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .)


state 200

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA . ICTE RPAR BLOQUE END

    ICTE            shift and go to state 206


state 201

    (76) ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .

    IF              reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ID              reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    DRAW            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    PRINT           reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    WHILE           reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FOR             reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    INT             reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    BOOLEAN         reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    STRING          reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FLOAT           reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    VOID            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LBRA            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ICTE            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FCTE            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LPAR            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    END             reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    RETURN          reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ELSE            reduce using rule 76 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)


state 202

    (42) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP . END

    END             shift and go to state 207


state 203

    (43) CONDICIONP -> ELSE . BLOQUE
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VART                           shift and go to state 66
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 67
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 208
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 68

state 204

    (44) CONDICIONP -> empty .

    END             reduce using rule 44 (CONDICIONP -> empty .)


state 205

    (40) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .

    IF              reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ID              reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    DRAW            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    PRINT           reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    WHILE           reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FOR             reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    INT             reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    STRING          reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FLOAT           reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    VOID            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LBRA            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ICTE            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FCTE            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LPAR            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    END             reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ELSE            reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    RETURN          reduce using rule 40 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)


state 206

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE . RPAR BLOQUE END

    RPAR            shift and go to state 209


state 207

    (42) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .

    IF              reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ID              reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    DRAW            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    PRINT           reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    WHILE           reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FOR             reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    INT             reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    BOOLEAN         reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    STRING          reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FLOAT           reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    VOID            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LBRA            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ICTE            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FCTE            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LPAR            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    END             reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    RETURN          reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ELSE            reduce using rule 42 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)


state 208

    (43) CONDICIONP -> ELSE BLOQUE .

    END             reduce using rule 43 (CONDICIONP -> ELSE BLOQUE .)


state 209

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUE
    (21) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (1) empty -> .
    (51) EXPRE -> . EXT EXPREZ
    (42) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (38) CICLO -> . WHILEF
    (39) CICLO -> . FORZ
    (76) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (32) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (65) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (54) EXT -> . EXP EXT_W_RELOP
    (40) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (41) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (22) DATA_TIPOS -> . INT addDataType
    (23) DATA_TIPOS -> . BOOLEAN addDataType
    (24) DATA_TIPOS -> . STRING addDataType
    (25) DATA_TIPOS -> . FLOAT addDataType
    (26) DATA_TIPOS -> . VOID addDataType
    (31) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (57) EXP -> . TERMINO genQuad1 EXP_W_SIGN
    (60) TERMINO -> . FAC genQuad2 TERMINO_W_SIGN
    (68) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (69) FAC -> . VAR_CTE operandPush
    (70) FAC -> . LBRA EXPRE RPAR
    (71) FAC -> . ID operandPush FACT
    (103) pushExp -> . empty
    (63) VAR_CTE -> . ICTE
    (64) VAR_CTE -> . FCTE

    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 61
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59
    ICTE            shift and go to state 69
    FCTE            shift and go to state 78

    VART                           shift and go to state 66
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    VAR_CTE                        shift and go to state 72
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 62
    pushExp                        shift and go to state 63
    FAC                            shift and go to state 75
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 67
    IMPRIMIR                       shift and go to state 70
    BLOQUE                         shift and go to state 210
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 68

state 210

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE . END

    END             shift and go to state 211


state 211

    (41) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .

    IF              reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ID              reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    DRAW            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    PRINT           reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    WHILE           reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FOR             reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    INT             reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    STRING          reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FLOAT           reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    VOID            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LBRA            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ICTE            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FCTE            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LPAR            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    END             reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ELSE            reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    RETURN          reduce using rule 41 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAR in state 73 resolved as shift
WARNING: shift/reduce conflict for LBRA in state 112 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 112 resolved as shift
