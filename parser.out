Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    NOT
    OR

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     empty -> <empty>
Rule 2     PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL
Rule 3     PROGRAMAB -> FUNCION PROGRAMAB
Rule 4     PROGRAMAB -> empty
Rule 5     PROGRAMAZ -> GLOBALES
Rule 6     PROGRAMAZ -> empty
Rule 7     GLOBALES -> GLOBAL GLOBALEZ END
Rule 8     GLOBALEZ -> VART GLOBALEZ
Rule 9     GLOBALEZ -> empty
Rule 10    VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
Rule 11    VART -> DATA_TIPOS ID addVariable
Rule 12    VART -> ARR ID addVariable
Rule 13    ESTATUTO -> EXPRE genQuad5
Rule 14    ESTATUTO -> CONDICION
Rule 15    ESTATUTO -> CICLO
Rule 16    ESTATUTO -> ACCION
Rule 17    ESTATUTO -> VART
Rule 18    ESTATUTO -> LLAMADA_FUNCION
Rule 19    ESTATUTO -> IMPRIMIR
Rule 20    ESTATUTO -> WRITE
Rule 21    BLOQUE -> ESTATUTO finishBlock BLOQUE
Rule 22    BLOQUE -> empty
Rule 23    DATA_TIPOS -> INT addDataType
Rule 24    DATA_TIPOS -> BOOLEAN addDataType
Rule 25    DATA_TIPOS -> STRING addDataType
Rule 26    DATA_TIPOS -> FLOAT addDataType
Rule 27    DATA_TIPOS -> VOID addDataType
Rule 28    ASOP -> PLUS
Rule 29    ASOP -> MINUS
Rule 30    MDOP -> MULT
Rule 31    MDOP -> DIVI
Rule 32    ARR -> DATA_TIPOS LBRA ICTE RBRA
Rule 33    LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR
Rule 34    LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
Rule 35    LLAMADA_FUNCIONP -> empty
Rule 36    LLAMADA_FUNCIONZ -> COMMA
Rule 37    LLAMADA_FUNCIONZ -> empty
Rule 38    PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END
Rule 39    CICLO -> WHILEF
Rule 40    CICLO -> FORZ
Rule 41    WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END
Rule 42    FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
Rule 43    CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
Rule 44    CONDICIONP -> ELSE BLOQUE
Rule 45    CONDICIONP -> empty
Rule 46    RELOP -> LESSTH
Rule 47    RELOP -> GREATERTH
Rule 48    RELOP -> SEQUAL
Rule 49    RELOP -> NOTEQ
Rule 50    RELOP -> LESSEQTH
Rule 51    RELOP -> GREATEREQTH
Rule 52    EXPRE -> EXT EXPREZ
Rule 53    EXPREZ -> EQUAL operatorPush EXT
Rule 54    EXPREZ -> empty
Rule 55    EXT -> EXP genQuad3 EXT_W_RELOP
Rule 56    EXT_W_RELOP -> RELOP operatorPush EXT
Rule 57    EXT_W_RELOP -> empty
Rule 58    EXP -> TERMINO genQuad2 EXP_W_SIGN
Rule 59    EXP_W_SIGN -> ASOP operatorPush EXP
Rule 60    EXP_W_SIGN -> empty
Rule 61    TERMINO -> FAC genQuad1 TERMINO_W_SIGN
Rule 62    TERMINO_W_SIGN -> MDOP operatorPush TERMINO
Rule 63    TERMINO_W_SIGN -> empty
Rule 64    VAR_CTE -> ICTE addInt
Rule 65    VAR_CTE -> FCTE addFloat
Rule 66    VAR_CTE -> SCTE addString
Rule 67    VAR_CTE -> TRUE addBooleano
Rule 68    VAR_CTE -> FALSE addBooleano
Rule 69    IMPRIMIR -> PRINT LBRA EXT RBRA
Rule 70    IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
Rule 71    FAC -> pushExp LPAR EXPRE RPAR popExp
Rule 72    FAC -> genQuad0 VAR_CTE operandPush
Rule 73    FAC -> LBRA EXPRE RPAR
Rule 74    FAC -> ID operandPush FACT
Rule 75    FACT -> LBRA EXPRE RBRA
Rule 76    FACT -> LPAR EXPRE RPAR
Rule 77    FACT -> empty
Rule 78    FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
Rule 79    ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR
Rule 80    VAR_FUN -> LPAR VAR_FUNP RPAR
Rule 81    VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ
Rule 82    VAR_FUNP -> empty
Rule 83    VAR_FUNZ -> COMMA VAR_FUNP
Rule 84    VAR_FUNZ -> empty
Rule 85    DIBUJA -> DEFINIRPOSICION
Rule 86    DIBUJA -> DEFINIRCOLOR
Rule 87    DIBUJA -> DERECHO
Rule 88    DIBUJA -> REVERSA
Rule 89    DIBUJA -> IZQUIERDA
Rule 90    DIBUJA -> DERECHA
Rule 91    DIBUJA -> VELOCIDAD
Rule 92    DIBUJA -> BORRAR
Rule 93    DIBUJA -> MOSTRAR
Rule 94    DIBUJA -> OCULTAR
Rule 95    DIBUJA -> CIRCULO
Rule 96    DIBUJA -> DEFINIRX
Rule 97    DIBUJA -> DEFINIRY
Rule 98    DIBUJA -> ARCO
Rule 99    DIBUJA -> GROSOR
Rule 100   restoreScope -> empty
Rule 101   changeScope -> empty
Rule 102   generateRead -> empty
Rule 103   generatePrint -> empty
Rule 104   addDataType -> empty
Rule 105   addVariable -> empty
Rule 106   addFloat -> empty
Rule 107   addInt -> empty
Rule 108   addString -> empty
Rule 109   addBooleano -> empty
Rule 110   finishBlock -> empty
Rule 111   operandPush -> empty
Rule 112   operatorPush -> empty
Rule 113   pushExp -> empty
Rule 114   popExp -> empty
Rule 115   genQuad0 -> empty
Rule 116   genQuad1 -> empty
Rule 117   genQuad2 -> empty
Rule 118   genQuad3 -> empty
Rule 119   genQuad5 -> empty

Terminals, with rules where they appear

AND                  : 
ARCO                 : 98
BOOLEAN              : 24
BORRAR               : 92
CIRCULO              : 95
COMMA                : 36 42 42 70 83
DEFINE               : 78
DEFINIRCOLOR         : 86
DEFINIRPOSICION      : 85
DEFINIRX             : 96
DEFINIRY             : 97
DERECHA              : 90
DERECHO              : 87
DIVI                 : 31
DRAW                 : 10
DRAWI                : 10
ELSE                 : 44
END                  : 7 38 41 42 43 78
EQUAL                : 10 53
FALSE                : 68
FCTE                 : 65
FLOAT                : 26
FOR                  : 42
GLOBAL               : 7
GREATEREQTH          : 51
GREATERTH            : 47
GROSOR               : 99
ICTE                 : 32 42 42 42 64
ID                   : 10 11 12 33 70 74 78 79 81
IF                   : 43
INT                  : 23
IZQUIERDA            : 89
LBRA                 : 32 69 70 73 75
LESSEQTH             : 50
LESSTH               : 46
LPAR                 : 10 33 38 41 42 43 71 76 79 80
MAIN                 : 38
MINUS                : 29
MOSTRAR              : 93
MULT                 : 30
NEW                  : 10
NOT                  : 
NOTEQ                : 49
OCULTAR              : 94
OR                   : 
PLUS                 : 28
POINT                : 79
PRINT                : 69
RBRA                 : 32 69 70 75
RETURN               : 78
REVERSA              : 88
RPAR                 : 10 33 38 41 42 43 71 73 76 79 80
SCTE                 : 66
SEQUAL               : 48
STRING               : 25
TRUE                 : 67
VELOCIDAD            : 91
VOID                 : 27
WHILE                : 41
WRITE                : 20 70
error                : 

Nonterminals, with rules where they appear

ACCION               : 16
ARR                  : 12
ASOP                 : 59
BLOQUE               : 21 38 41 42 43 44 78
CICLO                : 15
CONDICION            : 14
CONDICIONP           : 43
DATA_TIPOS           : 11 32 70 78 81
DIBUJA               : 79
ESTATUTO             : 21
EXP                  : 55 59
EXPRE                : 13 34 41 43 71 73 75 76 78
EXPREZ               : 52
EXP_W_SIGN           : 58
EXT                  : 52 53 56 69
EXT_W_RELOP          : 55
FAC                  : 61
FACT                 : 74
FORZ                 : 40
FUNCION              : 3
GLOBALES             : 5
GLOBALEZ             : 7 8
IMPRIMIR             : 19
LLAMADA_FUNCION      : 18
LLAMADA_FUNCIONP     : 33 34
LLAMADA_FUNCIONZ     : 34
MDOP                 : 62
PRINCIPAL            : 2
PROGRAMA             : 0
PROGRAMAB            : 2 3
PROGRAMAZ            : 2
RELOP                : 56
TERMINO              : 58 62
TERMINO_W_SIGN       : 61
VART                 : 8 17
VAR_CTE              : 72 79
VAR_FUN              : 78
VAR_FUNP             : 80 83
VAR_FUNZ             : 81
WHILEF               : 39
addBooleano          : 67 68
addDataType          : 23 24 25 26 27
addFloat             : 65
addInt               : 64
addString            : 66
addVariable          : 10 11 12
changeScope          : 38 78
empty                : 4 6 9 22 35 37 45 54 57 60 63 77 82 84 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
finishBlock          : 21
genQuad0             : 72
genQuad1             : 61
genQuad2             : 58
genQuad3             : 55
genQuad5             : 13
generatePrint        : 
generateRead         : 70
operandPush          : 72 74
operatorPush         : 53 56 59 62
popExp               : 71
pushExp              : 71
restoreScope         : 78

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (2) PROGRAMA -> . PROGRAMAZ PROGRAMAB PRINCIPAL
    (5) PROGRAMAZ -> . GLOBALES
    (6) PROGRAMAZ -> . empty
    (7) GLOBALES -> . GLOBAL GLOBALEZ END
    (1) empty -> .

    GLOBAL          shift and go to state 2
    DEFINE          reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)

    PROGRAMAZ                      shift and go to state 1
    PROGRAMA                       shift and go to state 3
    GLOBALES                       shift and go to state 4
    empty                          shift and go to state 5

state 1

    (2) PROGRAMA -> PROGRAMAZ . PROGRAMAB PRINCIPAL
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (78) FUNCION -> . DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (1) empty -> .

    DEFINE          shift and go to state 9
    MAIN            reduce using rule 1 (empty -> .)

    PROGRAMAB                      shift and go to state 7
    empty                          shift and go to state 8
    FUNCION                        shift and go to state 6

state 2

    (7) GLOBALES -> GLOBAL . GLOBALEZ END
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 14
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 17
    DATA_TIPOS                     shift and go to state 16
    GLOBALEZ                       shift and go to state 12
    empty                          shift and go to state 13

state 3

    (0) S' -> PROGRAMA .



state 4

    (5) PROGRAMAZ -> GLOBALES .

    DEFINE          reduce using rule 5 (PROGRAMAZ -> GLOBALES .)
    MAIN            reduce using rule 5 (PROGRAMAZ -> GLOBALES .)


state 5

    (6) PROGRAMAZ -> empty .

    DEFINE          reduce using rule 6 (PROGRAMAZ -> empty .)
    MAIN            reduce using rule 6 (PROGRAMAZ -> empty .)


state 6

    (3) PROGRAMAB -> FUNCION . PROGRAMAB
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (78) FUNCION -> . DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (1) empty -> .

    DEFINE          shift and go to state 9
    MAIN            reduce using rule 1 (empty -> .)

    FUNCION                        shift and go to state 6
    PROGRAMAB                      shift and go to state 21
    empty                          shift and go to state 8

state 7

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB . PRINCIPAL
    (38) PRINCIPAL -> . MAIN changeScope LPAR RPAR BLOQUE END

    MAIN            shift and go to state 23

    PRINCIPAL                      shift and go to state 22

state 8

    (4) PROGRAMAB -> empty .

    MAIN            reduce using rule 4 (PROGRAMAB -> empty .)


state 9

    (78) FUNCION -> DEFINE . DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    DATA_TIPOS                     shift and go to state 24

state 10

    (8) GLOBALEZ -> VART . GLOBALEZ
    (8) GLOBALEZ -> . VART GLOBALEZ
    (9) GLOBALEZ -> . empty
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (1) empty -> .
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA

    DRAW            shift and go to state 14
    END             reduce using rule 1 (empty -> .)
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    VART                           shift and go to state 10
    ARR                            shift and go to state 17
    DATA_TIPOS                     shift and go to state 16
    GLOBALEZ                       shift and go to state 25
    empty                          shift and go to state 13

state 11

    (27) DATA_TIPOS -> VOID . addDataType
    (104) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 26
    empty                          shift and go to state 27

state 12

    (7) GLOBALES -> GLOBAL GLOBALEZ . END

    END             shift and go to state 28


state 13

    (9) GLOBALEZ -> empty .

    END             reduce using rule 9 (GLOBALEZ -> empty .)


state 14

    (10) VART -> DRAW . ID addVariable EQUAL NEW DRAWI LPAR RPAR

    ID              shift and go to state 29


state 15

    (25) DATA_TIPOS -> STRING . addDataType
    (104) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 30
    empty                          shift and go to state 27

state 16

    (11) VART -> DATA_TIPOS . ID addVariable
    (32) ARR -> DATA_TIPOS . LBRA ICTE RBRA

    ID              shift and go to state 32
    LBRA            shift and go to state 31


state 17

    (12) VART -> ARR . ID addVariable

    ID              shift and go to state 33


state 18

    (23) DATA_TIPOS -> INT . addDataType
    (104) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 34
    empty                          shift and go to state 27

state 19

    (26) DATA_TIPOS -> FLOAT . addDataType
    (104) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 35
    empty                          shift and go to state 27

state 20

    (24) DATA_TIPOS -> BOOLEAN . addDataType
    (104) addDataType -> . empty
    (1) empty -> .

    ID              reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addDataType                    shift and go to state 36
    empty                          shift and go to state 27

state 21

    (3) PROGRAMAB -> FUNCION PROGRAMAB .

    MAIN            reduce using rule 3 (PROGRAMAB -> FUNCION PROGRAMAB .)


state 22

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .)


state 23

    (38) PRINCIPAL -> MAIN . changeScope LPAR RPAR BLOQUE END
    (101) changeScope -> . empty
    (1) empty -> .

    LPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 37
    changeScope                    shift and go to state 38

state 24

    (78) FUNCION -> DEFINE DATA_TIPOS . ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope

    ID              shift and go to state 39


state 25

    (8) GLOBALEZ -> VART GLOBALEZ .

    END             reduce using rule 8 (GLOBALEZ -> VART GLOBALEZ .)


state 26

    (27) DATA_TIPOS -> VOID addDataType .

    ID              reduce using rule 27 (DATA_TIPOS -> VOID addDataType .)
    LBRA            reduce using rule 27 (DATA_TIPOS -> VOID addDataType .)
    COMMA           reduce using rule 27 (DATA_TIPOS -> VOID addDataType .)


state 27

    (104) addDataType -> empty .

    ID              reduce using rule 104 (addDataType -> empty .)
    LBRA            reduce using rule 104 (addDataType -> empty .)
    COMMA           reduce using rule 104 (addDataType -> empty .)


state 28

    (7) GLOBALES -> GLOBAL GLOBALEZ END .

    DEFINE          reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)
    MAIN            reduce using rule 7 (GLOBALES -> GLOBAL GLOBALEZ END .)


state 29

    (10) VART -> DRAW ID . addVariable EQUAL NEW DRAWI LPAR RPAR
    (105) addVariable -> . empty
    (1) empty -> .

    EQUAL           reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 40

state 30

    (25) DATA_TIPOS -> STRING addDataType .

    ID              reduce using rule 25 (DATA_TIPOS -> STRING addDataType .)
    LBRA            reduce using rule 25 (DATA_TIPOS -> STRING addDataType .)
    COMMA           reduce using rule 25 (DATA_TIPOS -> STRING addDataType .)


state 31

    (32) ARR -> DATA_TIPOS LBRA . ICTE RBRA

    ICTE            shift and go to state 42


state 32

    (11) VART -> DATA_TIPOS ID . addVariable
    (105) addVariable -> . empty
    (1) empty -> .

    DRAW            reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 43

state 33

    (12) VART -> ARR ID . addVariable
    (105) addVariable -> . empty
    (1) empty -> .

    DRAW            reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 41
    addVariable                    shift and go to state 44

state 34

    (23) DATA_TIPOS -> INT addDataType .

    ID              reduce using rule 23 (DATA_TIPOS -> INT addDataType .)
    LBRA            reduce using rule 23 (DATA_TIPOS -> INT addDataType .)
    COMMA           reduce using rule 23 (DATA_TIPOS -> INT addDataType .)


state 35

    (26) DATA_TIPOS -> FLOAT addDataType .

    ID              reduce using rule 26 (DATA_TIPOS -> FLOAT addDataType .)
    LBRA            reduce using rule 26 (DATA_TIPOS -> FLOAT addDataType .)
    COMMA           reduce using rule 26 (DATA_TIPOS -> FLOAT addDataType .)


state 36

    (24) DATA_TIPOS -> BOOLEAN addDataType .

    ID              reduce using rule 24 (DATA_TIPOS -> BOOLEAN addDataType .)
    LBRA            reduce using rule 24 (DATA_TIPOS -> BOOLEAN addDataType .)
    COMMA           reduce using rule 24 (DATA_TIPOS -> BOOLEAN addDataType .)


state 37

    (101) changeScope -> empty .

    LPAR            reduce using rule 101 (changeScope -> empty .)


state 38

    (38) PRINCIPAL -> MAIN changeScope . LPAR RPAR BLOQUE END

    LPAR            shift and go to state 45


state 39

    (78) FUNCION -> DEFINE DATA_TIPOS ID . changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (101) changeScope -> . empty
    (1) empty -> .

    LPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 37
    changeScope                    shift and go to state 46

state 40

    (10) VART -> DRAW ID addVariable . EQUAL NEW DRAWI LPAR RPAR

    EQUAL           shift and go to state 47


state 41

    (105) addVariable -> empty .

    DRAW            reduce using rule 105 (addVariable -> empty .)
    INT             reduce using rule 105 (addVariable -> empty .)
    BOOLEAN         reduce using rule 105 (addVariable -> empty .)
    STRING          reduce using rule 105 (addVariable -> empty .)
    FLOAT           reduce using rule 105 (addVariable -> empty .)
    VOID            reduce using rule 105 (addVariable -> empty .)
    END             reduce using rule 105 (addVariable -> empty .)
    WRITE           reduce using rule 105 (addVariable -> empty .)
    IF              reduce using rule 105 (addVariable -> empty .)
    ID              reduce using rule 105 (addVariable -> empty .)
    PRINT           reduce using rule 105 (addVariable -> empty .)
    WHILE           reduce using rule 105 (addVariable -> empty .)
    FOR             reduce using rule 105 (addVariable -> empty .)
    LBRA            reduce using rule 105 (addVariable -> empty .)
    LPAR            reduce using rule 105 (addVariable -> empty .)
    ICTE            reduce using rule 105 (addVariable -> empty .)
    FCTE            reduce using rule 105 (addVariable -> empty .)
    SCTE            reduce using rule 105 (addVariable -> empty .)
    TRUE            reduce using rule 105 (addVariable -> empty .)
    FALSE           reduce using rule 105 (addVariable -> empty .)
    RETURN          reduce using rule 105 (addVariable -> empty .)
    ELSE            reduce using rule 105 (addVariable -> empty .)
    EQUAL           reduce using rule 105 (addVariable -> empty .)


state 42

    (32) ARR -> DATA_TIPOS LBRA ICTE . RBRA

    RBRA            shift and go to state 48


state 43

    (11) VART -> DATA_TIPOS ID addVariable .

    WRITE           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    IF              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ID              reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    DRAW            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    PRINT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    WHILE           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FOR             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    INT             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    BOOLEAN         reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    STRING          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FLOAT           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    VOID            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LBRA            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    LPAR            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ICTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FCTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    SCTE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    TRUE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    FALSE           reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    ELSE            reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    END             reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)
    RETURN          reduce using rule 11 (VART -> DATA_TIPOS ID addVariable .)


state 44

    (12) VART -> ARR ID addVariable .

    WRITE           reduce using rule 12 (VART -> ARR ID addVariable .)
    IF              reduce using rule 12 (VART -> ARR ID addVariable .)
    ID              reduce using rule 12 (VART -> ARR ID addVariable .)
    DRAW            reduce using rule 12 (VART -> ARR ID addVariable .)
    PRINT           reduce using rule 12 (VART -> ARR ID addVariable .)
    WHILE           reduce using rule 12 (VART -> ARR ID addVariable .)
    FOR             reduce using rule 12 (VART -> ARR ID addVariable .)
    INT             reduce using rule 12 (VART -> ARR ID addVariable .)
    BOOLEAN         reduce using rule 12 (VART -> ARR ID addVariable .)
    STRING          reduce using rule 12 (VART -> ARR ID addVariable .)
    FLOAT           reduce using rule 12 (VART -> ARR ID addVariable .)
    VOID            reduce using rule 12 (VART -> ARR ID addVariable .)
    LBRA            reduce using rule 12 (VART -> ARR ID addVariable .)
    LPAR            reduce using rule 12 (VART -> ARR ID addVariable .)
    ICTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    FCTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    SCTE            reduce using rule 12 (VART -> ARR ID addVariable .)
    TRUE            reduce using rule 12 (VART -> ARR ID addVariable .)
    FALSE           reduce using rule 12 (VART -> ARR ID addVariable .)
    ELSE            reduce using rule 12 (VART -> ARR ID addVariable .)
    END             reduce using rule 12 (VART -> ARR ID addVariable .)
    RETURN          reduce using rule 12 (VART -> ARR ID addVariable .)


state 45

    (38) PRINCIPAL -> MAIN changeScope LPAR . RPAR BLOQUE END

    RPAR            shift and go to state 49


state 46

    (78) FUNCION -> DEFINE DATA_TIPOS ID changeScope . VAR_FUN BLOQUE RETURN EXPRE END restoreScope
    (80) VAR_FUN -> . LPAR VAR_FUNP RPAR

    LPAR            shift and go to state 50

    VAR_FUN                        shift and go to state 51

state 47

    (10) VART -> DRAW ID addVariable EQUAL . NEW DRAWI LPAR RPAR

    NEW             shift and go to state 52


state 48

    (32) ARR -> DATA_TIPOS LBRA ICTE RBRA .

    ID              reduce using rule 32 (ARR -> DATA_TIPOS LBRA ICTE RBRA .)


state 49

    (38) PRINCIPAL -> MAIN changeScope LPAR RPAR . BLOQUE END
    (21) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (22) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (20) ESTATUTO -> . WRITE
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (79) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (69) IMPRIMIR -> . PRINT LBRA EXT RBRA
    (70) IMPRIMIR -> . WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    WRITE           shift and go to state 75
    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 67
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 68
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 69
    IMPRIMIR                       shift and go to state 71
    BLOQUE                         shift and go to state 72
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 70

state 50

    (80) VAR_FUN -> LPAR . VAR_FUNP RPAR
    (81) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (82) VAR_FUNP -> . empty
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (1) empty -> .

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 80
    DATA_TIPOS                     shift and go to state 78
    VAR_FUNP                       shift and go to state 79

state 51

    (78) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN . BLOQUE RETURN EXPRE END restoreScope
    (21) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (22) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (20) ESTATUTO -> . WRITE
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (79) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (69) IMPRIMIR -> . PRINT LBRA EXT RBRA
    (70) IMPRIMIR -> . WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    WRITE           shift and go to state 75
    RETURN          reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 67
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 68
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    BLOQUE                         shift and go to state 81
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 69
    IMPRIMIR                       shift and go to state 71
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 70

state 52

    (10) VART -> DRAW ID addVariable EQUAL NEW . DRAWI LPAR RPAR

    DRAWI           shift and go to state 82


state 53

    (15) ESTATUTO -> CICLO .

    WRITE           reduce using rule 15 (ESTATUTO -> CICLO .)
    IF              reduce using rule 15 (ESTATUTO -> CICLO .)
    ID              reduce using rule 15 (ESTATUTO -> CICLO .)
    DRAW            reduce using rule 15 (ESTATUTO -> CICLO .)
    PRINT           reduce using rule 15 (ESTATUTO -> CICLO .)
    WHILE           reduce using rule 15 (ESTATUTO -> CICLO .)
    FOR             reduce using rule 15 (ESTATUTO -> CICLO .)
    INT             reduce using rule 15 (ESTATUTO -> CICLO .)
    BOOLEAN         reduce using rule 15 (ESTATUTO -> CICLO .)
    STRING          reduce using rule 15 (ESTATUTO -> CICLO .)
    FLOAT           reduce using rule 15 (ESTATUTO -> CICLO .)
    VOID            reduce using rule 15 (ESTATUTO -> CICLO .)
    LBRA            reduce using rule 15 (ESTATUTO -> CICLO .)
    LPAR            reduce using rule 15 (ESTATUTO -> CICLO .)
    ICTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    FCTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    SCTE            reduce using rule 15 (ESTATUTO -> CICLO .)
    TRUE            reduce using rule 15 (ESTATUTO -> CICLO .)
    FALSE           reduce using rule 15 (ESTATUTO -> CICLO .)
    END             reduce using rule 15 (ESTATUTO -> CICLO .)
    ELSE            reduce using rule 15 (ESTATUTO -> CICLO .)
    RETURN          reduce using rule 15 (ESTATUTO -> CICLO .)


state 54

    (13) ESTATUTO -> EXPRE . genQuad5
    (119) genQuad5 -> . empty
    (1) empty -> .

    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    genQuad5                       shift and go to state 83
    empty                          shift and go to state 84

state 55

    (52) EXPRE -> EXT . EXPREZ
    (53) EXPREZ -> . EQUAL operatorPush EXT
    (54) EXPREZ -> . empty
    (1) empty -> .

    EQUAL           shift and go to state 87
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)

    EXPREZ                         shift and go to state 85
    empty                          shift and go to state 86

state 56

    (55) EXT -> EXP . genQuad3 EXT_W_RELOP
    (118) genQuad3 -> . empty
    (1) empty -> .

    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad3                       shift and go to state 88
    empty                          shift and go to state 89

state 57

    (69) IMPRIMIR -> PRINT . LBRA EXT RBRA

    LBRA            shift and go to state 90


state 58

    (18) ESTATUTO -> LLAMADA_FUNCION .

    WRITE           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    IF              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ID              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    DRAW            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    PRINT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    WHILE           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FOR             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    INT             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    BOOLEAN         reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    STRING          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FLOAT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    VOID            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LBRA            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    LPAR            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ICTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FCTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    SCTE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    TRUE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FALSE           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    END             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ELSE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    RETURN          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)


state 59

    (73) FAC -> LBRA . EXPRE RPAR
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 91
    empty                          shift and go to state 92
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63

state 60

    (21) BLOQUE -> ESTATUTO . finishBlock BLOQUE
    (110) finishBlock -> . empty
    (1) empty -> .

    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    finishBlock                    shift and go to state 94
    empty                          shift and go to state 95

state 61

    (58) EXP -> TERMINO . genQuad2 EXP_W_SIGN
    (117) genQuad2 -> . empty
    (1) empty -> .

    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad2                       shift and go to state 96
    empty                          shift and go to state 97

state 62

    (71) FAC -> pushExp . LPAR EXPRE RPAR popExp

    LPAR            shift and go to state 98


state 63

    (61) TERMINO -> FAC . genQuad1 TERMINO_W_SIGN
    (116) genQuad1 -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    genQuad1                       shift and go to state 99
    empty                          shift and go to state 100

state 64

    (22) BLOQUE -> empty .
    (113) pushExp -> empty .
    (115) genQuad0 -> empty .

    END             reduce using rule 22 (BLOQUE -> empty .)
    RETURN          reduce using rule 22 (BLOQUE -> empty .)
    ELSE            reduce using rule 22 (BLOQUE -> empty .)
    LPAR            reduce using rule 113 (pushExp -> empty .)
    ICTE            reduce using rule 115 (genQuad0 -> empty .)
    FCTE            reduce using rule 115 (genQuad0 -> empty .)
    SCTE            reduce using rule 115 (genQuad0 -> empty .)
    TRUE            reduce using rule 115 (genQuad0 -> empty .)
    FALSE           reduce using rule 115 (genQuad0 -> empty .)


state 65

    (39) CICLO -> WHILEF .

    WRITE           reduce using rule 39 (CICLO -> WHILEF .)
    IF              reduce using rule 39 (CICLO -> WHILEF .)
    ID              reduce using rule 39 (CICLO -> WHILEF .)
    DRAW            reduce using rule 39 (CICLO -> WHILEF .)
    PRINT           reduce using rule 39 (CICLO -> WHILEF .)
    WHILE           reduce using rule 39 (CICLO -> WHILEF .)
    FOR             reduce using rule 39 (CICLO -> WHILEF .)
    INT             reduce using rule 39 (CICLO -> WHILEF .)
    BOOLEAN         reduce using rule 39 (CICLO -> WHILEF .)
    STRING          reduce using rule 39 (CICLO -> WHILEF .)
    FLOAT           reduce using rule 39 (CICLO -> WHILEF .)
    VOID            reduce using rule 39 (CICLO -> WHILEF .)
    LBRA            reduce using rule 39 (CICLO -> WHILEF .)
    LPAR            reduce using rule 39 (CICLO -> WHILEF .)
    ICTE            reduce using rule 39 (CICLO -> WHILEF .)
    FCTE            reduce using rule 39 (CICLO -> WHILEF .)
    SCTE            reduce using rule 39 (CICLO -> WHILEF .)
    TRUE            reduce using rule 39 (CICLO -> WHILEF .)
    FALSE           reduce using rule 39 (CICLO -> WHILEF .)
    END             reduce using rule 39 (CICLO -> WHILEF .)
    RETURN          reduce using rule 39 (CICLO -> WHILEF .)
    ELSE            reduce using rule 39 (CICLO -> WHILEF .)


state 66

    (72) FAC -> genQuad0 . VAR_CTE operandPush
    (64) VAR_CTE -> . ICTE addInt
    (65) VAR_CTE -> . FCTE addFloat
    (66) VAR_CTE -> . SCTE addString
    (67) VAR_CTE -> . TRUE addBooleano
    (68) VAR_CTE -> . FALSE addBooleano

    ICTE            shift and go to state 104
    FCTE            shift and go to state 103
    SCTE            shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 101

    VAR_CTE                        shift and go to state 102

state 67

    (42) FORZ -> FOR . LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    LPAR            shift and go to state 107


state 68

    (17) ESTATUTO -> VART .

    WRITE           reduce using rule 17 (ESTATUTO -> VART .)
    IF              reduce using rule 17 (ESTATUTO -> VART .)
    ID              reduce using rule 17 (ESTATUTO -> VART .)
    DRAW            reduce using rule 17 (ESTATUTO -> VART .)
    PRINT           reduce using rule 17 (ESTATUTO -> VART .)
    WHILE           reduce using rule 17 (ESTATUTO -> VART .)
    FOR             reduce using rule 17 (ESTATUTO -> VART .)
    INT             reduce using rule 17 (ESTATUTO -> VART .)
    BOOLEAN         reduce using rule 17 (ESTATUTO -> VART .)
    STRING          reduce using rule 17 (ESTATUTO -> VART .)
    FLOAT           reduce using rule 17 (ESTATUTO -> VART .)
    VOID            reduce using rule 17 (ESTATUTO -> VART .)
    LBRA            reduce using rule 17 (ESTATUTO -> VART .)
    LPAR            reduce using rule 17 (ESTATUTO -> VART .)
    ICTE            reduce using rule 17 (ESTATUTO -> VART .)
    FCTE            reduce using rule 17 (ESTATUTO -> VART .)
    SCTE            reduce using rule 17 (ESTATUTO -> VART .)
    TRUE            reduce using rule 17 (ESTATUTO -> VART .)
    FALSE           reduce using rule 17 (ESTATUTO -> VART .)
    END             reduce using rule 17 (ESTATUTO -> VART .)
    ELSE            reduce using rule 17 (ESTATUTO -> VART .)
    RETURN          reduce using rule 17 (ESTATUTO -> VART .)


state 69

    (40) CICLO -> FORZ .

    WRITE           reduce using rule 40 (CICLO -> FORZ .)
    IF              reduce using rule 40 (CICLO -> FORZ .)
    ID              reduce using rule 40 (CICLO -> FORZ .)
    DRAW            reduce using rule 40 (CICLO -> FORZ .)
    PRINT           reduce using rule 40 (CICLO -> FORZ .)
    WHILE           reduce using rule 40 (CICLO -> FORZ .)
    FOR             reduce using rule 40 (CICLO -> FORZ .)
    INT             reduce using rule 40 (CICLO -> FORZ .)
    BOOLEAN         reduce using rule 40 (CICLO -> FORZ .)
    STRING          reduce using rule 40 (CICLO -> FORZ .)
    FLOAT           reduce using rule 40 (CICLO -> FORZ .)
    VOID            reduce using rule 40 (CICLO -> FORZ .)
    LBRA            reduce using rule 40 (CICLO -> FORZ .)
    LPAR            reduce using rule 40 (CICLO -> FORZ .)
    ICTE            reduce using rule 40 (CICLO -> FORZ .)
    FCTE            reduce using rule 40 (CICLO -> FORZ .)
    SCTE            reduce using rule 40 (CICLO -> FORZ .)
    TRUE            reduce using rule 40 (CICLO -> FORZ .)
    FALSE           reduce using rule 40 (CICLO -> FORZ .)
    END             reduce using rule 40 (CICLO -> FORZ .)
    RETURN          reduce using rule 40 (CICLO -> FORZ .)
    ELSE            reduce using rule 40 (CICLO -> FORZ .)


state 70

    (14) ESTATUTO -> CONDICION .

    WRITE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 14 (ESTATUTO -> CONDICION .)
    ID              reduce using rule 14 (ESTATUTO -> CONDICION .)
    DRAW            reduce using rule 14 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 14 (ESTATUTO -> CONDICION .)
    INT             reduce using rule 14 (ESTATUTO -> CONDICION .)
    BOOLEAN         reduce using rule 14 (ESTATUTO -> CONDICION .)
    STRING          reduce using rule 14 (ESTATUTO -> CONDICION .)
    FLOAT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    VOID            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LBRA            reduce using rule 14 (ESTATUTO -> CONDICION .)
    LPAR            reduce using rule 14 (ESTATUTO -> CONDICION .)
    ICTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    FCTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    SCTE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    TRUE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    FALSE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    END             reduce using rule 14 (ESTATUTO -> CONDICION .)
    ELSE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 14 (ESTATUTO -> CONDICION .)


state 71

    (19) ESTATUTO -> IMPRIMIR .

    WRITE           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    IF              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ID              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    DRAW            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    PRINT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    WHILE           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FOR             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    INT             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    BOOLEAN         reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    STRING          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FLOAT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    VOID            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LBRA            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    LPAR            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ICTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FCTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    SCTE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    TRUE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FALSE           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    END             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ELSE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    RETURN          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)


state 72

    (38) PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE . END

    END             shift and go to state 108


state 73

    (79) ACCION -> ID . POINT DIBUJA LPAR VAR_CTE RPAR
    (33) LLAMADA_FUNCION -> ID . LPAR LLAMADA_FUNCIONP RPAR
    (74) FAC -> ID . operandPush FACT
    (111) operandPush -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
    POINT           shift and go to state 110
    LPAR            shift and go to state 109
    LBRA            reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

  ! LPAR            [ reduce using rule 1 (empty -> .) ]

    operandPush                    shift and go to state 111
    empty                          shift and go to state 112

state 74

    (43) CONDICION -> IF . LPAR EXPRE RPAR BLOQUE CONDICIONP END

    LPAR            shift and go to state 113


state 75

    (20) ESTATUTO -> WRITE .
    (70) IMPRIMIR -> WRITE . LBRA DATA_TIPOS COMMA ID generateRead RBRA

  ! shift/reduce conflict for LBRA resolved as shift
    WRITE           reduce using rule 20 (ESTATUTO -> WRITE .)
    IF              reduce using rule 20 (ESTATUTO -> WRITE .)
    ID              reduce using rule 20 (ESTATUTO -> WRITE .)
    DRAW            reduce using rule 20 (ESTATUTO -> WRITE .)
    PRINT           reduce using rule 20 (ESTATUTO -> WRITE .)
    WHILE           reduce using rule 20 (ESTATUTO -> WRITE .)
    FOR             reduce using rule 20 (ESTATUTO -> WRITE .)
    INT             reduce using rule 20 (ESTATUTO -> WRITE .)
    BOOLEAN         reduce using rule 20 (ESTATUTO -> WRITE .)
    STRING          reduce using rule 20 (ESTATUTO -> WRITE .)
    FLOAT           reduce using rule 20 (ESTATUTO -> WRITE .)
    VOID            reduce using rule 20 (ESTATUTO -> WRITE .)
    LPAR            reduce using rule 20 (ESTATUTO -> WRITE .)
    ICTE            reduce using rule 20 (ESTATUTO -> WRITE .)
    FCTE            reduce using rule 20 (ESTATUTO -> WRITE .)
    SCTE            reduce using rule 20 (ESTATUTO -> WRITE .)
    TRUE            reduce using rule 20 (ESTATUTO -> WRITE .)
    FALSE           reduce using rule 20 (ESTATUTO -> WRITE .)
    END             reduce using rule 20 (ESTATUTO -> WRITE .)
    ELSE            reduce using rule 20 (ESTATUTO -> WRITE .)
    RETURN          reduce using rule 20 (ESTATUTO -> WRITE .)
    LBRA            shift and go to state 114

  ! LBRA            [ reduce using rule 20 (ESTATUTO -> WRITE .) ]


state 76

    (16) ESTATUTO -> ACCION .

    WRITE           reduce using rule 16 (ESTATUTO -> ACCION .)
    IF              reduce using rule 16 (ESTATUTO -> ACCION .)
    ID              reduce using rule 16 (ESTATUTO -> ACCION .)
    DRAW            reduce using rule 16 (ESTATUTO -> ACCION .)
    PRINT           reduce using rule 16 (ESTATUTO -> ACCION .)
    WHILE           reduce using rule 16 (ESTATUTO -> ACCION .)
    FOR             reduce using rule 16 (ESTATUTO -> ACCION .)
    INT             reduce using rule 16 (ESTATUTO -> ACCION .)
    BOOLEAN         reduce using rule 16 (ESTATUTO -> ACCION .)
    STRING          reduce using rule 16 (ESTATUTO -> ACCION .)
    FLOAT           reduce using rule 16 (ESTATUTO -> ACCION .)
    VOID            reduce using rule 16 (ESTATUTO -> ACCION .)
    LBRA            reduce using rule 16 (ESTATUTO -> ACCION .)
    LPAR            reduce using rule 16 (ESTATUTO -> ACCION .)
    ICTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    FCTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    SCTE            reduce using rule 16 (ESTATUTO -> ACCION .)
    TRUE            reduce using rule 16 (ESTATUTO -> ACCION .)
    FALSE           reduce using rule 16 (ESTATUTO -> ACCION .)
    END             reduce using rule 16 (ESTATUTO -> ACCION .)
    ELSE            reduce using rule 16 (ESTATUTO -> ACCION .)
    RETURN          reduce using rule 16 (ESTATUTO -> ACCION .)


state 77

    (41) WHILEF -> WHILE . LPAR EXPRE RPAR BLOQUE END

    LPAR            shift and go to state 115


state 78

    (81) VAR_FUNP -> DATA_TIPOS . ID VAR_FUNZ

    ID              shift and go to state 116


state 79

    (80) VAR_FUN -> LPAR VAR_FUNP . RPAR

    RPAR            shift and go to state 117


state 80

    (82) VAR_FUNP -> empty .

    RPAR            reduce using rule 82 (VAR_FUNP -> empty .)


state 81

    (78) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE . RETURN EXPRE END restoreScope

    RETURN          shift and go to state 118


state 82

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI . LPAR RPAR

    LPAR            shift and go to state 119


state 83

    (13) ESTATUTO -> EXPRE genQuad5 .

    WRITE           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    IF              reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ID              reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    DRAW            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    PRINT           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    WHILE           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FOR             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    INT             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    BOOLEAN         reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    STRING          reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FLOAT           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    VOID            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    LBRA            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    LPAR            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ICTE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FCTE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    SCTE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    TRUE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    FALSE           reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    END             reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    ELSE            reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)
    RETURN          reduce using rule 13 (ESTATUTO -> EXPRE genQuad5 .)


state 84

    (119) genQuad5 -> empty .

    WRITE           reduce using rule 119 (genQuad5 -> empty .)
    IF              reduce using rule 119 (genQuad5 -> empty .)
    ID              reduce using rule 119 (genQuad5 -> empty .)
    DRAW            reduce using rule 119 (genQuad5 -> empty .)
    PRINT           reduce using rule 119 (genQuad5 -> empty .)
    WHILE           reduce using rule 119 (genQuad5 -> empty .)
    FOR             reduce using rule 119 (genQuad5 -> empty .)
    INT             reduce using rule 119 (genQuad5 -> empty .)
    BOOLEAN         reduce using rule 119 (genQuad5 -> empty .)
    STRING          reduce using rule 119 (genQuad5 -> empty .)
    FLOAT           reduce using rule 119 (genQuad5 -> empty .)
    VOID            reduce using rule 119 (genQuad5 -> empty .)
    LBRA            reduce using rule 119 (genQuad5 -> empty .)
    LPAR            reduce using rule 119 (genQuad5 -> empty .)
    ICTE            reduce using rule 119 (genQuad5 -> empty .)
    FCTE            reduce using rule 119 (genQuad5 -> empty .)
    SCTE            reduce using rule 119 (genQuad5 -> empty .)
    TRUE            reduce using rule 119 (genQuad5 -> empty .)
    FALSE           reduce using rule 119 (genQuad5 -> empty .)
    END             reduce using rule 119 (genQuad5 -> empty .)
    RETURN          reduce using rule 119 (genQuad5 -> empty .)
    ELSE            reduce using rule 119 (genQuad5 -> empty .)


state 85

    (52) EXPRE -> EXT EXPREZ .

    COMMA           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    LBRA            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    ID              reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    LPAR            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    ICTE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    FCTE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    SCTE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    TRUE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    FALSE           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    RPAR            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    WRITE           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    IF              reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    DRAW            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    PRINT           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    WHILE           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    FOR             reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    INT             reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    BOOLEAN         reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    STRING          reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    FLOAT           reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    VOID            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    END             reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    RBRA            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    ELSE            reduce using rule 52 (EXPRE -> EXT EXPREZ .)
    RETURN          reduce using rule 52 (EXPRE -> EXT EXPREZ .)


state 86

    (54) EXPREZ -> empty .

    WRITE           reduce using rule 54 (EXPREZ -> empty .)
    IF              reduce using rule 54 (EXPREZ -> empty .)
    ID              reduce using rule 54 (EXPREZ -> empty .)
    DRAW            reduce using rule 54 (EXPREZ -> empty .)
    PRINT           reduce using rule 54 (EXPREZ -> empty .)
    WHILE           reduce using rule 54 (EXPREZ -> empty .)
    FOR             reduce using rule 54 (EXPREZ -> empty .)
    INT             reduce using rule 54 (EXPREZ -> empty .)
    BOOLEAN         reduce using rule 54 (EXPREZ -> empty .)
    STRING          reduce using rule 54 (EXPREZ -> empty .)
    FLOAT           reduce using rule 54 (EXPREZ -> empty .)
    VOID            reduce using rule 54 (EXPREZ -> empty .)
    LBRA            reduce using rule 54 (EXPREZ -> empty .)
    LPAR            reduce using rule 54 (EXPREZ -> empty .)
    ICTE            reduce using rule 54 (EXPREZ -> empty .)
    FCTE            reduce using rule 54 (EXPREZ -> empty .)
    SCTE            reduce using rule 54 (EXPREZ -> empty .)
    TRUE            reduce using rule 54 (EXPREZ -> empty .)
    FALSE           reduce using rule 54 (EXPREZ -> empty .)
    END             reduce using rule 54 (EXPREZ -> empty .)
    RETURN          reduce using rule 54 (EXPREZ -> empty .)
    RPAR            reduce using rule 54 (EXPREZ -> empty .)
    ELSE            reduce using rule 54 (EXPREZ -> empty .)
    COMMA           reduce using rule 54 (EXPREZ -> empty .)
    RBRA            reduce using rule 54 (EXPREZ -> empty .)


state 87

    (53) EXPREZ -> EQUAL . operatorPush EXT
    (112) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 120
    empty                          shift and go to state 121

state 88

    (55) EXT -> EXP genQuad3 . EXT_W_RELOP
    (56) EXT_W_RELOP -> . RELOP operatorPush EXT
    (57) EXT_W_RELOP -> . empty
    (46) RELOP -> . LESSTH
    (47) RELOP -> . GREATERTH
    (48) RELOP -> . SEQUAL
    (49) RELOP -> . NOTEQ
    (50) RELOP -> . LESSEQTH
    (51) RELOP -> . GREATEREQTH
    (1) empty -> .

    LESSTH          shift and go to state 129
    GREATERTH       shift and go to state 128
    SEQUAL          shift and go to state 124
    NOTEQ           shift and go to state 125
    LESSEQTH        shift and go to state 122
    GREATEREQTH     shift and go to state 127
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    RELOP                          shift and go to state 123
    EXT_W_RELOP                    shift and go to state 126
    empty                          shift and go to state 130

state 89

    (118) genQuad3 -> empty .

    LESSTH          reduce using rule 118 (genQuad3 -> empty .)
    GREATERTH       reduce using rule 118 (genQuad3 -> empty .)
    SEQUAL          reduce using rule 118 (genQuad3 -> empty .)
    NOTEQ           reduce using rule 118 (genQuad3 -> empty .)
    LESSEQTH        reduce using rule 118 (genQuad3 -> empty .)
    GREATEREQTH     reduce using rule 118 (genQuad3 -> empty .)
    EQUAL           reduce using rule 118 (genQuad3 -> empty .)
    WRITE           reduce using rule 118 (genQuad3 -> empty .)
    IF              reduce using rule 118 (genQuad3 -> empty .)
    ID              reduce using rule 118 (genQuad3 -> empty .)
    DRAW            reduce using rule 118 (genQuad3 -> empty .)
    PRINT           reduce using rule 118 (genQuad3 -> empty .)
    WHILE           reduce using rule 118 (genQuad3 -> empty .)
    FOR             reduce using rule 118 (genQuad3 -> empty .)
    INT             reduce using rule 118 (genQuad3 -> empty .)
    BOOLEAN         reduce using rule 118 (genQuad3 -> empty .)
    STRING          reduce using rule 118 (genQuad3 -> empty .)
    FLOAT           reduce using rule 118 (genQuad3 -> empty .)
    VOID            reduce using rule 118 (genQuad3 -> empty .)
    LBRA            reduce using rule 118 (genQuad3 -> empty .)
    LPAR            reduce using rule 118 (genQuad3 -> empty .)
    ICTE            reduce using rule 118 (genQuad3 -> empty .)
    FCTE            reduce using rule 118 (genQuad3 -> empty .)
    SCTE            reduce using rule 118 (genQuad3 -> empty .)
    TRUE            reduce using rule 118 (genQuad3 -> empty .)
    FALSE           reduce using rule 118 (genQuad3 -> empty .)
    END             reduce using rule 118 (genQuad3 -> empty .)
    RETURN          reduce using rule 118 (genQuad3 -> empty .)
    RPAR            reduce using rule 118 (genQuad3 -> empty .)
    RBRA            reduce using rule 118 (genQuad3 -> empty .)
    ELSE            reduce using rule 118 (genQuad3 -> empty .)
    COMMA           reduce using rule 118 (genQuad3 -> empty .)


state 90

    (69) IMPRIMIR -> PRINT LBRA . EXT RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    empty                          shift and go to state 92
    EXT                            shift and go to state 131
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63

state 91

    (73) FAC -> LBRA EXPRE . RPAR

    RPAR            shift and go to state 132


state 92

    (113) pushExp -> empty .
    (115) genQuad0 -> empty .

    LPAR            reduce using rule 113 (pushExp -> empty .)
    ICTE            reduce using rule 115 (genQuad0 -> empty .)
    FCTE            reduce using rule 115 (genQuad0 -> empty .)
    SCTE            reduce using rule 115 (genQuad0 -> empty .)
    TRUE            reduce using rule 115 (genQuad0 -> empty .)
    FALSE           reduce using rule 115 (genQuad0 -> empty .)


state 93

    (74) FAC -> ID . operandPush FACT
    (111) operandPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    operandPush                    shift and go to state 111
    empty                          shift and go to state 112

state 94

    (21) BLOQUE -> ESTATUTO finishBlock . BLOQUE
    (21) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (22) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (20) ESTATUTO -> . WRITE
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (79) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (69) IMPRIMIR -> . PRINT LBRA EXT RBRA
    (70) IMPRIMIR -> . WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    WRITE           shift and go to state 75
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 67
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 68
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 69
    IMPRIMIR                       shift and go to state 71
    BLOQUE                         shift and go to state 133
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 70

state 95

    (110) finishBlock -> empty .

    WRITE           reduce using rule 110 (finishBlock -> empty .)
    IF              reduce using rule 110 (finishBlock -> empty .)
    ID              reduce using rule 110 (finishBlock -> empty .)
    DRAW            reduce using rule 110 (finishBlock -> empty .)
    PRINT           reduce using rule 110 (finishBlock -> empty .)
    WHILE           reduce using rule 110 (finishBlock -> empty .)
    FOR             reduce using rule 110 (finishBlock -> empty .)
    INT             reduce using rule 110 (finishBlock -> empty .)
    BOOLEAN         reduce using rule 110 (finishBlock -> empty .)
    STRING          reduce using rule 110 (finishBlock -> empty .)
    FLOAT           reduce using rule 110 (finishBlock -> empty .)
    VOID            reduce using rule 110 (finishBlock -> empty .)
    LBRA            reduce using rule 110 (finishBlock -> empty .)
    LPAR            reduce using rule 110 (finishBlock -> empty .)
    ICTE            reduce using rule 110 (finishBlock -> empty .)
    FCTE            reduce using rule 110 (finishBlock -> empty .)
    SCTE            reduce using rule 110 (finishBlock -> empty .)
    TRUE            reduce using rule 110 (finishBlock -> empty .)
    FALSE           reduce using rule 110 (finishBlock -> empty .)
    END             reduce using rule 110 (finishBlock -> empty .)
    RETURN          reduce using rule 110 (finishBlock -> empty .)
    ELSE            reduce using rule 110 (finishBlock -> empty .)


state 96

    (58) EXP -> TERMINO genQuad2 . EXP_W_SIGN
    (59) EXP_W_SIGN -> . ASOP operatorPush EXP
    (60) EXP_W_SIGN -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    ASOP                           shift and go to state 134
    EXP_W_SIGN                     shift and go to state 135
    empty                          shift and go to state 138

state 97

    (117) genQuad2 -> empty .

    PLUS            reduce using rule 117 (genQuad2 -> empty .)
    MINUS           reduce using rule 117 (genQuad2 -> empty .)
    LESSTH          reduce using rule 117 (genQuad2 -> empty .)
    GREATERTH       reduce using rule 117 (genQuad2 -> empty .)
    SEQUAL          reduce using rule 117 (genQuad2 -> empty .)
    NOTEQ           reduce using rule 117 (genQuad2 -> empty .)
    LESSEQTH        reduce using rule 117 (genQuad2 -> empty .)
    GREATEREQTH     reduce using rule 117 (genQuad2 -> empty .)
    EQUAL           reduce using rule 117 (genQuad2 -> empty .)
    WRITE           reduce using rule 117 (genQuad2 -> empty .)
    IF              reduce using rule 117 (genQuad2 -> empty .)
    ID              reduce using rule 117 (genQuad2 -> empty .)
    DRAW            reduce using rule 117 (genQuad2 -> empty .)
    PRINT           reduce using rule 117 (genQuad2 -> empty .)
    WHILE           reduce using rule 117 (genQuad2 -> empty .)
    FOR             reduce using rule 117 (genQuad2 -> empty .)
    INT             reduce using rule 117 (genQuad2 -> empty .)
    BOOLEAN         reduce using rule 117 (genQuad2 -> empty .)
    STRING          reduce using rule 117 (genQuad2 -> empty .)
    FLOAT           reduce using rule 117 (genQuad2 -> empty .)
    VOID            reduce using rule 117 (genQuad2 -> empty .)
    LBRA            reduce using rule 117 (genQuad2 -> empty .)
    LPAR            reduce using rule 117 (genQuad2 -> empty .)
    ICTE            reduce using rule 117 (genQuad2 -> empty .)
    FCTE            reduce using rule 117 (genQuad2 -> empty .)
    SCTE            reduce using rule 117 (genQuad2 -> empty .)
    TRUE            reduce using rule 117 (genQuad2 -> empty .)
    FALSE           reduce using rule 117 (genQuad2 -> empty .)
    END             reduce using rule 117 (genQuad2 -> empty .)
    RETURN          reduce using rule 117 (genQuad2 -> empty .)
    RPAR            reduce using rule 117 (genQuad2 -> empty .)
    RBRA            reduce using rule 117 (genQuad2 -> empty .)
    ELSE            reduce using rule 117 (genQuad2 -> empty .)
    COMMA           reduce using rule 117 (genQuad2 -> empty .)


state 98

    (71) FAC -> pushExp LPAR . EXPRE RPAR popExp
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 139
    empty                          shift and go to state 92
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63

state 99

    (61) TERMINO -> FAC genQuad1 . TERMINO_W_SIGN
    (62) TERMINO_W_SIGN -> . MDOP operatorPush TERMINO
    (63) TERMINO_W_SIGN -> . empty
    (30) MDOP -> . MULT
    (31) MDOP -> . DIVI
    (1) empty -> .

    MULT            shift and go to state 142
    DIVI            shift and go to state 140
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    MDOP                           shift and go to state 141
    empty                          shift and go to state 143
    TERMINO_W_SIGN                 shift and go to state 144

state 100

    (116) genQuad1 -> empty .

    MULT            reduce using rule 116 (genQuad1 -> empty .)
    DIVI            reduce using rule 116 (genQuad1 -> empty .)
    PLUS            reduce using rule 116 (genQuad1 -> empty .)
    MINUS           reduce using rule 116 (genQuad1 -> empty .)
    LESSTH          reduce using rule 116 (genQuad1 -> empty .)
    GREATERTH       reduce using rule 116 (genQuad1 -> empty .)
    SEQUAL          reduce using rule 116 (genQuad1 -> empty .)
    NOTEQ           reduce using rule 116 (genQuad1 -> empty .)
    LESSEQTH        reduce using rule 116 (genQuad1 -> empty .)
    GREATEREQTH     reduce using rule 116 (genQuad1 -> empty .)
    EQUAL           reduce using rule 116 (genQuad1 -> empty .)
    WRITE           reduce using rule 116 (genQuad1 -> empty .)
    IF              reduce using rule 116 (genQuad1 -> empty .)
    ID              reduce using rule 116 (genQuad1 -> empty .)
    DRAW            reduce using rule 116 (genQuad1 -> empty .)
    PRINT           reduce using rule 116 (genQuad1 -> empty .)
    WHILE           reduce using rule 116 (genQuad1 -> empty .)
    FOR             reduce using rule 116 (genQuad1 -> empty .)
    INT             reduce using rule 116 (genQuad1 -> empty .)
    BOOLEAN         reduce using rule 116 (genQuad1 -> empty .)
    STRING          reduce using rule 116 (genQuad1 -> empty .)
    FLOAT           reduce using rule 116 (genQuad1 -> empty .)
    VOID            reduce using rule 116 (genQuad1 -> empty .)
    LBRA            reduce using rule 116 (genQuad1 -> empty .)
    LPAR            reduce using rule 116 (genQuad1 -> empty .)
    ICTE            reduce using rule 116 (genQuad1 -> empty .)
    FCTE            reduce using rule 116 (genQuad1 -> empty .)
    SCTE            reduce using rule 116 (genQuad1 -> empty .)
    TRUE            reduce using rule 116 (genQuad1 -> empty .)
    FALSE           reduce using rule 116 (genQuad1 -> empty .)
    END             reduce using rule 116 (genQuad1 -> empty .)
    RETURN          reduce using rule 116 (genQuad1 -> empty .)
    RPAR            reduce using rule 116 (genQuad1 -> empty .)
    RBRA            reduce using rule 116 (genQuad1 -> empty .)
    ELSE            reduce using rule 116 (genQuad1 -> empty .)
    COMMA           reduce using rule 116 (genQuad1 -> empty .)


state 101

    (68) VAR_CTE -> FALSE . addBooleano
    (109) addBooleano -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addBooleano                    shift and go to state 145
    empty                          shift and go to state 146

state 102

    (72) FAC -> genQuad0 VAR_CTE . operandPush
    (111) operandPush -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    operandPush                    shift and go to state 147
    empty                          shift and go to state 112

state 103

    (65) VAR_CTE -> FCTE . addFloat
    (106) addFloat -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addFloat                       shift and go to state 148
    empty                          shift and go to state 149

state 104

    (64) VAR_CTE -> ICTE . addInt
    (107) addInt -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addInt                         shift and go to state 150
    empty                          shift and go to state 151

state 105

    (66) VAR_CTE -> SCTE . addString
    (108) addString -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addString                      shift and go to state 152
    empty                          shift and go to state 153

state 106

    (67) VAR_CTE -> TRUE . addBooleano
    (109) addBooleano -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    addBooleano                    shift and go to state 154
    empty                          shift and go to state 146

state 107

    (42) FORZ -> FOR LPAR . ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 155


state 108

    (38) PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END .

    $end            reduce using rule 38 (PRINCIPAL -> MAIN changeScope LPAR RPAR BLOQUE END .)


state 109

    (33) LLAMADA_FUNCION -> ID LPAR . LLAMADA_FUNCIONP RPAR
    (34) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (35) LLAMADA_FUNCIONP -> . empty
    (52) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    LBRA            shift and go to state 59
    ID              shift and go to state 93

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 157
    LLAMADA_FUNCIONP               shift and go to state 156
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63
    empty                          shift and go to state 158

state 110

    (79) ACCION -> ID POINT . DIBUJA LPAR VAR_CTE RPAR
    (85) DIBUJA -> . DEFINIRPOSICION
    (86) DIBUJA -> . DEFINIRCOLOR
    (87) DIBUJA -> . DERECHO
    (88) DIBUJA -> . REVERSA
    (89) DIBUJA -> . IZQUIERDA
    (90) DIBUJA -> . DERECHA
    (91) DIBUJA -> . VELOCIDAD
    (92) DIBUJA -> . BORRAR
    (93) DIBUJA -> . MOSTRAR
    (94) DIBUJA -> . OCULTAR
    (95) DIBUJA -> . CIRCULO
    (96) DIBUJA -> . DEFINIRX
    (97) DIBUJA -> . DEFINIRY
    (98) DIBUJA -> . ARCO
    (99) DIBUJA -> . GROSOR

    DEFINIRPOSICION shift and go to state 165
    DEFINIRCOLOR    shift and go to state 174
    DERECHO         shift and go to state 169
    REVERSA         shift and go to state 163
    IZQUIERDA       shift and go to state 167
    DERECHA         shift and go to state 159
    VELOCIDAD       shift and go to state 162
    BORRAR          shift and go to state 172
    MOSTRAR         shift and go to state 166
    OCULTAR         shift and go to state 164
    CIRCULO         shift and go to state 161
    DEFINIRX        shift and go to state 171
    DEFINIRY        shift and go to state 170
    ARCO            shift and go to state 160
    GROSOR          shift and go to state 173

    DIBUJA                         shift and go to state 168

state 111

    (74) FAC -> ID operandPush . FACT
    (75) FACT -> . LBRA EXPRE RBRA
    (76) FACT -> . LPAR EXPRE RPAR
    (77) FACT -> . empty
    (1) empty -> .

  ! shift/reduce conflict for LBRA resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
    LBRA            shift and go to state 176
    LPAR            shift and go to state 175
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

  ! LBRA            [ reduce using rule 1 (empty -> .) ]
  ! LPAR            [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 177
    FACT                           shift and go to state 178

state 112

    (111) operandPush -> empty .

    LBRA            reduce using rule 111 (operandPush -> empty .)
    LPAR            reduce using rule 111 (operandPush -> empty .)
    MULT            reduce using rule 111 (operandPush -> empty .)
    DIVI            reduce using rule 111 (operandPush -> empty .)
    PLUS            reduce using rule 111 (operandPush -> empty .)
    MINUS           reduce using rule 111 (operandPush -> empty .)
    LESSTH          reduce using rule 111 (operandPush -> empty .)
    GREATERTH       reduce using rule 111 (operandPush -> empty .)
    SEQUAL          reduce using rule 111 (operandPush -> empty .)
    NOTEQ           reduce using rule 111 (operandPush -> empty .)
    LESSEQTH        reduce using rule 111 (operandPush -> empty .)
    GREATEREQTH     reduce using rule 111 (operandPush -> empty .)
    EQUAL           reduce using rule 111 (operandPush -> empty .)
    RPAR            reduce using rule 111 (operandPush -> empty .)
    RBRA            reduce using rule 111 (operandPush -> empty .)
    COMMA           reduce using rule 111 (operandPush -> empty .)
    ID              reduce using rule 111 (operandPush -> empty .)
    ICTE            reduce using rule 111 (operandPush -> empty .)
    FCTE            reduce using rule 111 (operandPush -> empty .)
    SCTE            reduce using rule 111 (operandPush -> empty .)
    TRUE            reduce using rule 111 (operandPush -> empty .)
    FALSE           reduce using rule 111 (operandPush -> empty .)
    END             reduce using rule 111 (operandPush -> empty .)
    WRITE           reduce using rule 111 (operandPush -> empty .)
    IF              reduce using rule 111 (operandPush -> empty .)
    DRAW            reduce using rule 111 (operandPush -> empty .)
    PRINT           reduce using rule 111 (operandPush -> empty .)
    WHILE           reduce using rule 111 (operandPush -> empty .)
    FOR             reduce using rule 111 (operandPush -> empty .)
    INT             reduce using rule 111 (operandPush -> empty .)
    BOOLEAN         reduce using rule 111 (operandPush -> empty .)
    STRING          reduce using rule 111 (operandPush -> empty .)
    FLOAT           reduce using rule 111 (operandPush -> empty .)
    VOID            reduce using rule 111 (operandPush -> empty .)
    RETURN          reduce using rule 111 (operandPush -> empty .)
    ELSE            reduce using rule 111 (operandPush -> empty .)


state 113

    (43) CONDICION -> IF LPAR . EXPRE RPAR BLOQUE CONDICIONP END
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 179
    empty                          shift and go to state 92
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63

state 114

    (70) IMPRIMIR -> WRITE LBRA . DATA_TIPOS COMMA ID generateRead RBRA
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11

    DATA_TIPOS                     shift and go to state 180

state 115

    (41) WHILEF -> WHILE LPAR . EXPRE RPAR BLOQUE END
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 181
    empty                          shift and go to state 92
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63

state 116

    (81) VAR_FUNP -> DATA_TIPOS ID . VAR_FUNZ
    (83) VAR_FUNZ -> . COMMA VAR_FUNP
    (84) VAR_FUNZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 183
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 184
    VAR_FUNZ                       shift and go to state 182

state 117

    (80) VAR_FUN -> LPAR VAR_FUNP RPAR .

    WRITE           reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    IF              reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ID              reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    DRAW            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    PRINT           reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    WHILE           reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FOR             reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    INT             reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    BOOLEAN         reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    STRING          reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FLOAT           reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    VOID            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LBRA            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    RETURN          reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    LPAR            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    ICTE            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FCTE            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    SCTE            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    TRUE            reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FALSE           reduce using rule 80 (VAR_FUN -> LPAR VAR_FUNP RPAR .)


state 118

    (78) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN . EXPRE END restoreScope
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    EXPRE                          shift and go to state 185
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    genQuad0                       shift and go to state 66
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 92

state 119

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR . RPAR

    RPAR            shift and go to state 186


state 120

    (53) EXPREZ -> EQUAL operatorPush . EXT
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 62
    empty                          shift and go to state 92
    EXT                            shift and go to state 187
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63
    genQuad0                       shift and go to state 66

state 121

    (112) operatorPush -> empty .

    LBRA            reduce using rule 112 (operatorPush -> empty .)
    ID              reduce using rule 112 (operatorPush -> empty .)
    LPAR            reduce using rule 112 (operatorPush -> empty .)
    ICTE            reduce using rule 112 (operatorPush -> empty .)
    FCTE            reduce using rule 112 (operatorPush -> empty .)
    SCTE            reduce using rule 112 (operatorPush -> empty .)
    TRUE            reduce using rule 112 (operatorPush -> empty .)
    FALSE           reduce using rule 112 (operatorPush -> empty .)


state 122

    (50) RELOP -> LESSEQTH .

    LBRA            reduce using rule 50 (RELOP -> LESSEQTH .)
    ID              reduce using rule 50 (RELOP -> LESSEQTH .)
    LPAR            reduce using rule 50 (RELOP -> LESSEQTH .)
    ICTE            reduce using rule 50 (RELOP -> LESSEQTH .)
    FCTE            reduce using rule 50 (RELOP -> LESSEQTH .)
    SCTE            reduce using rule 50 (RELOP -> LESSEQTH .)
    TRUE            reduce using rule 50 (RELOP -> LESSEQTH .)
    FALSE           reduce using rule 50 (RELOP -> LESSEQTH .)


state 123

    (56) EXT_W_RELOP -> RELOP . operatorPush EXT
    (112) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 188
    empty                          shift and go to state 121

state 124

    (48) RELOP -> SEQUAL .

    LBRA            reduce using rule 48 (RELOP -> SEQUAL .)
    ID              reduce using rule 48 (RELOP -> SEQUAL .)
    LPAR            reduce using rule 48 (RELOP -> SEQUAL .)
    ICTE            reduce using rule 48 (RELOP -> SEQUAL .)
    FCTE            reduce using rule 48 (RELOP -> SEQUAL .)
    SCTE            reduce using rule 48 (RELOP -> SEQUAL .)
    TRUE            reduce using rule 48 (RELOP -> SEQUAL .)
    FALSE           reduce using rule 48 (RELOP -> SEQUAL .)


state 125

    (49) RELOP -> NOTEQ .

    LBRA            reduce using rule 49 (RELOP -> NOTEQ .)
    ID              reduce using rule 49 (RELOP -> NOTEQ .)
    LPAR            reduce using rule 49 (RELOP -> NOTEQ .)
    ICTE            reduce using rule 49 (RELOP -> NOTEQ .)
    FCTE            reduce using rule 49 (RELOP -> NOTEQ .)
    SCTE            reduce using rule 49 (RELOP -> NOTEQ .)
    TRUE            reduce using rule 49 (RELOP -> NOTEQ .)
    FALSE           reduce using rule 49 (RELOP -> NOTEQ .)


state 126

    (55) EXT -> EXP genQuad3 EXT_W_RELOP .

    EQUAL           reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    COMMA           reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    LBRA            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    ID              reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    LPAR            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    ICTE            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    FCTE            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    SCTE            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    TRUE            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    FALSE           reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    RPAR            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    WRITE           reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    IF              reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    DRAW            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    PRINT           reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    WHILE           reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    FOR             reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    INT             reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    BOOLEAN         reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    STRING          reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    FLOAT           reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    VOID            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    ELSE            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    END             reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    RETURN          reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)
    RBRA            reduce using rule 55 (EXT -> EXP genQuad3 EXT_W_RELOP .)


state 127

    (51) RELOP -> GREATEREQTH .

    LBRA            reduce using rule 51 (RELOP -> GREATEREQTH .)
    ID              reduce using rule 51 (RELOP -> GREATEREQTH .)
    LPAR            reduce using rule 51 (RELOP -> GREATEREQTH .)
    ICTE            reduce using rule 51 (RELOP -> GREATEREQTH .)
    FCTE            reduce using rule 51 (RELOP -> GREATEREQTH .)
    SCTE            reduce using rule 51 (RELOP -> GREATEREQTH .)
    TRUE            reduce using rule 51 (RELOP -> GREATEREQTH .)
    FALSE           reduce using rule 51 (RELOP -> GREATEREQTH .)


state 128

    (47) RELOP -> GREATERTH .

    LBRA            reduce using rule 47 (RELOP -> GREATERTH .)
    ID              reduce using rule 47 (RELOP -> GREATERTH .)
    LPAR            reduce using rule 47 (RELOP -> GREATERTH .)
    ICTE            reduce using rule 47 (RELOP -> GREATERTH .)
    FCTE            reduce using rule 47 (RELOP -> GREATERTH .)
    SCTE            reduce using rule 47 (RELOP -> GREATERTH .)
    TRUE            reduce using rule 47 (RELOP -> GREATERTH .)
    FALSE           reduce using rule 47 (RELOP -> GREATERTH .)


state 129

    (46) RELOP -> LESSTH .

    LBRA            reduce using rule 46 (RELOP -> LESSTH .)
    ID              reduce using rule 46 (RELOP -> LESSTH .)
    LPAR            reduce using rule 46 (RELOP -> LESSTH .)
    ICTE            reduce using rule 46 (RELOP -> LESSTH .)
    FCTE            reduce using rule 46 (RELOP -> LESSTH .)
    SCTE            reduce using rule 46 (RELOP -> LESSTH .)
    TRUE            reduce using rule 46 (RELOP -> LESSTH .)
    FALSE           reduce using rule 46 (RELOP -> LESSTH .)


state 130

    (57) EXT_W_RELOP -> empty .

    EQUAL           reduce using rule 57 (EXT_W_RELOP -> empty .)
    WRITE           reduce using rule 57 (EXT_W_RELOP -> empty .)
    IF              reduce using rule 57 (EXT_W_RELOP -> empty .)
    ID              reduce using rule 57 (EXT_W_RELOP -> empty .)
    DRAW            reduce using rule 57 (EXT_W_RELOP -> empty .)
    PRINT           reduce using rule 57 (EXT_W_RELOP -> empty .)
    WHILE           reduce using rule 57 (EXT_W_RELOP -> empty .)
    FOR             reduce using rule 57 (EXT_W_RELOP -> empty .)
    INT             reduce using rule 57 (EXT_W_RELOP -> empty .)
    BOOLEAN         reduce using rule 57 (EXT_W_RELOP -> empty .)
    STRING          reduce using rule 57 (EXT_W_RELOP -> empty .)
    FLOAT           reduce using rule 57 (EXT_W_RELOP -> empty .)
    VOID            reduce using rule 57 (EXT_W_RELOP -> empty .)
    LBRA            reduce using rule 57 (EXT_W_RELOP -> empty .)
    LPAR            reduce using rule 57 (EXT_W_RELOP -> empty .)
    ICTE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    FCTE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    SCTE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    TRUE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    FALSE           reduce using rule 57 (EXT_W_RELOP -> empty .)
    END             reduce using rule 57 (EXT_W_RELOP -> empty .)
    RETURN          reduce using rule 57 (EXT_W_RELOP -> empty .)
    RPAR            reduce using rule 57 (EXT_W_RELOP -> empty .)
    RBRA            reduce using rule 57 (EXT_W_RELOP -> empty .)
    ELSE            reduce using rule 57 (EXT_W_RELOP -> empty .)
    COMMA           reduce using rule 57 (EXT_W_RELOP -> empty .)


state 131

    (69) IMPRIMIR -> PRINT LBRA EXT . RBRA

    RBRA            shift and go to state 189


state 132

    (73) FAC -> LBRA EXPRE RPAR .

    MULT            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    DIVI            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    PLUS            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    MINUS           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    LESSTH          reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    GREATERTH       reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    SEQUAL          reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    NOTEQ           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    LESSEQTH        reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    GREATEREQTH     reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    EQUAL           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    RPAR            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    END             reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    WRITE           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    IF              reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    ID              reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    DRAW            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    PRINT           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    WHILE           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    FOR             reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    INT             reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    BOOLEAN         reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    STRING          reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    FLOAT           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    VOID            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    LBRA            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    LPAR            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    ICTE            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    FCTE            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    SCTE            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    TRUE            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    FALSE           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    RETURN          reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    ELSE            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    RBRA            reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)
    COMMA           reduce using rule 73 (FAC -> LBRA EXPRE RPAR .)


state 133

    (21) BLOQUE -> ESTATUTO finishBlock BLOQUE .

    END             reduce using rule 21 (BLOQUE -> ESTATUTO finishBlock BLOQUE .)
    RETURN          reduce using rule 21 (BLOQUE -> ESTATUTO finishBlock BLOQUE .)
    ELSE            reduce using rule 21 (BLOQUE -> ESTATUTO finishBlock BLOQUE .)


state 134

    (59) EXP_W_SIGN -> ASOP . operatorPush EXP
    (112) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 190
    empty                          shift and go to state 121

state 135

    (58) EXP -> TERMINO genQuad2 EXP_W_SIGN .

    LESSTH          reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    GREATERTH       reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    SEQUAL          reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    NOTEQ           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    LESSEQTH        reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    GREATEREQTH     reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    WRITE           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    IF              reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    ID              reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    DRAW            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    PRINT           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    WHILE           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    FOR             reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    INT             reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    BOOLEAN         reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    STRING          reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    FLOAT           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    VOID            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    LBRA            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    LPAR            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    ICTE            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    FCTE            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    SCTE            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    TRUE            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    FALSE           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    END             reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    RETURN          reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    RPAR            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    ELSE            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    COMMA           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    RBRA            reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)
    EQUAL           reduce using rule 58 (EXP -> TERMINO genQuad2 EXP_W_SIGN .)


state 136

    (28) ASOP -> PLUS .

    LBRA            reduce using rule 28 (ASOP -> PLUS .)
    ID              reduce using rule 28 (ASOP -> PLUS .)
    LPAR            reduce using rule 28 (ASOP -> PLUS .)
    ICTE            reduce using rule 28 (ASOP -> PLUS .)
    FCTE            reduce using rule 28 (ASOP -> PLUS .)
    SCTE            reduce using rule 28 (ASOP -> PLUS .)
    TRUE            reduce using rule 28 (ASOP -> PLUS .)
    FALSE           reduce using rule 28 (ASOP -> PLUS .)


state 137

    (29) ASOP -> MINUS .

    LBRA            reduce using rule 29 (ASOP -> MINUS .)
    ID              reduce using rule 29 (ASOP -> MINUS .)
    LPAR            reduce using rule 29 (ASOP -> MINUS .)
    ICTE            reduce using rule 29 (ASOP -> MINUS .)
    FCTE            reduce using rule 29 (ASOP -> MINUS .)
    SCTE            reduce using rule 29 (ASOP -> MINUS .)
    TRUE            reduce using rule 29 (ASOP -> MINUS .)
    FALSE           reduce using rule 29 (ASOP -> MINUS .)


state 138

    (60) EXP_W_SIGN -> empty .

    LESSTH          reduce using rule 60 (EXP_W_SIGN -> empty .)
    GREATERTH       reduce using rule 60 (EXP_W_SIGN -> empty .)
    SEQUAL          reduce using rule 60 (EXP_W_SIGN -> empty .)
    NOTEQ           reduce using rule 60 (EXP_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 60 (EXP_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 60 (EXP_W_SIGN -> empty .)
    EQUAL           reduce using rule 60 (EXP_W_SIGN -> empty .)
    WRITE           reduce using rule 60 (EXP_W_SIGN -> empty .)
    IF              reduce using rule 60 (EXP_W_SIGN -> empty .)
    ID              reduce using rule 60 (EXP_W_SIGN -> empty .)
    DRAW            reduce using rule 60 (EXP_W_SIGN -> empty .)
    PRINT           reduce using rule 60 (EXP_W_SIGN -> empty .)
    WHILE           reduce using rule 60 (EXP_W_SIGN -> empty .)
    FOR             reduce using rule 60 (EXP_W_SIGN -> empty .)
    INT             reduce using rule 60 (EXP_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 60 (EXP_W_SIGN -> empty .)
    STRING          reduce using rule 60 (EXP_W_SIGN -> empty .)
    FLOAT           reduce using rule 60 (EXP_W_SIGN -> empty .)
    VOID            reduce using rule 60 (EXP_W_SIGN -> empty .)
    LBRA            reduce using rule 60 (EXP_W_SIGN -> empty .)
    LPAR            reduce using rule 60 (EXP_W_SIGN -> empty .)
    ICTE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    FCTE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    SCTE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    TRUE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    FALSE           reduce using rule 60 (EXP_W_SIGN -> empty .)
    END             reduce using rule 60 (EXP_W_SIGN -> empty .)
    RETURN          reduce using rule 60 (EXP_W_SIGN -> empty .)
    RPAR            reduce using rule 60 (EXP_W_SIGN -> empty .)
    RBRA            reduce using rule 60 (EXP_W_SIGN -> empty .)
    ELSE            reduce using rule 60 (EXP_W_SIGN -> empty .)
    COMMA           reduce using rule 60 (EXP_W_SIGN -> empty .)


state 139

    (71) FAC -> pushExp LPAR EXPRE . RPAR popExp

    RPAR            shift and go to state 191


state 140

    (31) MDOP -> DIVI .

    LBRA            reduce using rule 31 (MDOP -> DIVI .)
    ID              reduce using rule 31 (MDOP -> DIVI .)
    LPAR            reduce using rule 31 (MDOP -> DIVI .)
    ICTE            reduce using rule 31 (MDOP -> DIVI .)
    FCTE            reduce using rule 31 (MDOP -> DIVI .)
    SCTE            reduce using rule 31 (MDOP -> DIVI .)
    TRUE            reduce using rule 31 (MDOP -> DIVI .)
    FALSE           reduce using rule 31 (MDOP -> DIVI .)


state 141

    (62) TERMINO_W_SIGN -> MDOP . operatorPush TERMINO
    (112) operatorPush -> . empty
    (1) empty -> .

    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    operatorPush                   shift and go to state 192
    empty                          shift and go to state 121

state 142

    (30) MDOP -> MULT .

    LBRA            reduce using rule 30 (MDOP -> MULT .)
    ID              reduce using rule 30 (MDOP -> MULT .)
    LPAR            reduce using rule 30 (MDOP -> MULT .)
    ICTE            reduce using rule 30 (MDOP -> MULT .)
    FCTE            reduce using rule 30 (MDOP -> MULT .)
    SCTE            reduce using rule 30 (MDOP -> MULT .)
    TRUE            reduce using rule 30 (MDOP -> MULT .)
    FALSE           reduce using rule 30 (MDOP -> MULT .)


state 143

    (63) TERMINO_W_SIGN -> empty .

    PLUS            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    MINUS           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LESSTH          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    GREATERTH       reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    SEQUAL          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    NOTEQ           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    EQUAL           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    WRITE           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    IF              reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    ID              reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    DRAW            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    PRINT           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    WHILE           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    FOR             reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    INT             reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    STRING          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    FLOAT           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    VOID            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LBRA            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    LPAR            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    ICTE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    FCTE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    SCTE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    TRUE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    FALSE           reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    END             reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    RETURN          reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    RPAR            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    RBRA            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    ELSE            reduce using rule 63 (TERMINO_W_SIGN -> empty .)
    COMMA           reduce using rule 63 (TERMINO_W_SIGN -> empty .)


state 144

    (61) TERMINO -> FAC genQuad1 TERMINO_W_SIGN .

    PLUS            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    MINUS           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LESSTH          reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    GREATERTH       reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    SEQUAL          reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    NOTEQ           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LESSEQTH        reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    GREATEREQTH     reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    EQUAL           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    WRITE           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    IF              reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    ID              reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    DRAW            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    PRINT           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    WHILE           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    FOR             reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    INT             reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    BOOLEAN         reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    STRING          reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    FLOAT           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    VOID            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LBRA            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    LPAR            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    ICTE            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    FCTE            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    SCTE            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    TRUE            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    FALSE           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    END             reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    ELSE            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    RETURN          reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    RPAR            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    RBRA            reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)
    COMMA           reduce using rule 61 (TERMINO -> FAC genQuad1 TERMINO_W_SIGN .)


state 145

    (68) VAR_CTE -> FALSE addBooleano .

    RPAR            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    MULT            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    DIVI            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    PLUS            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    MINUS           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    LESSTH          reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    GREATERTH       reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    SEQUAL          reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    NOTEQ           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    LESSEQTH        reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    GREATEREQTH     reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    EQUAL           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    WRITE           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    IF              reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    ID              reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    DRAW            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    PRINT           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    WHILE           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    FOR             reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    INT             reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    BOOLEAN         reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    STRING          reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    FLOAT           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    VOID            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    LBRA            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    LPAR            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    ICTE            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    FCTE            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    SCTE            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    TRUE            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    FALSE           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    END             reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    RETURN          reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    RBRA            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    ELSE            reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)
    COMMA           reduce using rule 68 (VAR_CTE -> FALSE addBooleano .)


state 146

    (109) addBooleano -> empty .

    MULT            reduce using rule 109 (addBooleano -> empty .)
    DIVI            reduce using rule 109 (addBooleano -> empty .)
    PLUS            reduce using rule 109 (addBooleano -> empty .)
    MINUS           reduce using rule 109 (addBooleano -> empty .)
    LESSTH          reduce using rule 109 (addBooleano -> empty .)
    GREATERTH       reduce using rule 109 (addBooleano -> empty .)
    SEQUAL          reduce using rule 109 (addBooleano -> empty .)
    NOTEQ           reduce using rule 109 (addBooleano -> empty .)
    LESSEQTH        reduce using rule 109 (addBooleano -> empty .)
    GREATEREQTH     reduce using rule 109 (addBooleano -> empty .)
    EQUAL           reduce using rule 109 (addBooleano -> empty .)
    WRITE           reduce using rule 109 (addBooleano -> empty .)
    IF              reduce using rule 109 (addBooleano -> empty .)
    ID              reduce using rule 109 (addBooleano -> empty .)
    DRAW            reduce using rule 109 (addBooleano -> empty .)
    PRINT           reduce using rule 109 (addBooleano -> empty .)
    WHILE           reduce using rule 109 (addBooleano -> empty .)
    FOR             reduce using rule 109 (addBooleano -> empty .)
    INT             reduce using rule 109 (addBooleano -> empty .)
    BOOLEAN         reduce using rule 109 (addBooleano -> empty .)
    STRING          reduce using rule 109 (addBooleano -> empty .)
    FLOAT           reduce using rule 109 (addBooleano -> empty .)
    VOID            reduce using rule 109 (addBooleano -> empty .)
    LBRA            reduce using rule 109 (addBooleano -> empty .)
    LPAR            reduce using rule 109 (addBooleano -> empty .)
    ICTE            reduce using rule 109 (addBooleano -> empty .)
    FCTE            reduce using rule 109 (addBooleano -> empty .)
    SCTE            reduce using rule 109 (addBooleano -> empty .)
    TRUE            reduce using rule 109 (addBooleano -> empty .)
    FALSE           reduce using rule 109 (addBooleano -> empty .)
    END             reduce using rule 109 (addBooleano -> empty .)
    RETURN          reduce using rule 109 (addBooleano -> empty .)
    RPAR            reduce using rule 109 (addBooleano -> empty .)
    RBRA            reduce using rule 109 (addBooleano -> empty .)
    ELSE            reduce using rule 109 (addBooleano -> empty .)
    COMMA           reduce using rule 109 (addBooleano -> empty .)


state 147

    (72) FAC -> genQuad0 VAR_CTE operandPush .

    MULT            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    DIVI            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    PLUS            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    MINUS           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    LESSTH          reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    GREATERTH       reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    SEQUAL          reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    NOTEQ           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    LESSEQTH        reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    GREATEREQTH     reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    EQUAL           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    RPAR            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    END             reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    WRITE           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    IF              reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    ID              reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    DRAW            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    PRINT           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    WHILE           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    FOR             reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    INT             reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    BOOLEAN         reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    STRING          reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    FLOAT           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    VOID            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    LBRA            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    LPAR            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    ICTE            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    FCTE            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    SCTE            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    TRUE            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    FALSE           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    RETURN          reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    ELSE            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    RBRA            reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)
    COMMA           reduce using rule 72 (FAC -> genQuad0 VAR_CTE operandPush .)


state 148

    (65) VAR_CTE -> FCTE addFloat .

    RPAR            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    MULT            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    DIVI            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    PLUS            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    MINUS           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    LESSTH          reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    GREATERTH       reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    SEQUAL          reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    NOTEQ           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    LESSEQTH        reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    GREATEREQTH     reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    EQUAL           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    WRITE           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    IF              reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    ID              reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    DRAW            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    PRINT           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    WHILE           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    FOR             reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    INT             reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    BOOLEAN         reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    STRING          reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    FLOAT           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    VOID            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    LBRA            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    LPAR            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    ICTE            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    FCTE            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    SCTE            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    TRUE            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    FALSE           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    END             reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    RETURN          reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    RBRA            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    ELSE            reduce using rule 65 (VAR_CTE -> FCTE addFloat .)
    COMMA           reduce using rule 65 (VAR_CTE -> FCTE addFloat .)


state 149

    (106) addFloat -> empty .

    MULT            reduce using rule 106 (addFloat -> empty .)
    DIVI            reduce using rule 106 (addFloat -> empty .)
    PLUS            reduce using rule 106 (addFloat -> empty .)
    MINUS           reduce using rule 106 (addFloat -> empty .)
    LESSTH          reduce using rule 106 (addFloat -> empty .)
    GREATERTH       reduce using rule 106 (addFloat -> empty .)
    SEQUAL          reduce using rule 106 (addFloat -> empty .)
    NOTEQ           reduce using rule 106 (addFloat -> empty .)
    LESSEQTH        reduce using rule 106 (addFloat -> empty .)
    GREATEREQTH     reduce using rule 106 (addFloat -> empty .)
    EQUAL           reduce using rule 106 (addFloat -> empty .)
    WRITE           reduce using rule 106 (addFloat -> empty .)
    IF              reduce using rule 106 (addFloat -> empty .)
    ID              reduce using rule 106 (addFloat -> empty .)
    DRAW            reduce using rule 106 (addFloat -> empty .)
    PRINT           reduce using rule 106 (addFloat -> empty .)
    WHILE           reduce using rule 106 (addFloat -> empty .)
    FOR             reduce using rule 106 (addFloat -> empty .)
    INT             reduce using rule 106 (addFloat -> empty .)
    BOOLEAN         reduce using rule 106 (addFloat -> empty .)
    STRING          reduce using rule 106 (addFloat -> empty .)
    FLOAT           reduce using rule 106 (addFloat -> empty .)
    VOID            reduce using rule 106 (addFloat -> empty .)
    LBRA            reduce using rule 106 (addFloat -> empty .)
    LPAR            reduce using rule 106 (addFloat -> empty .)
    ICTE            reduce using rule 106 (addFloat -> empty .)
    FCTE            reduce using rule 106 (addFloat -> empty .)
    SCTE            reduce using rule 106 (addFloat -> empty .)
    TRUE            reduce using rule 106 (addFloat -> empty .)
    FALSE           reduce using rule 106 (addFloat -> empty .)
    END             reduce using rule 106 (addFloat -> empty .)
    RETURN          reduce using rule 106 (addFloat -> empty .)
    RPAR            reduce using rule 106 (addFloat -> empty .)
    RBRA            reduce using rule 106 (addFloat -> empty .)
    ELSE            reduce using rule 106 (addFloat -> empty .)
    COMMA           reduce using rule 106 (addFloat -> empty .)


state 150

    (64) VAR_CTE -> ICTE addInt .

    RPAR            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    MULT            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    DIVI            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    PLUS            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    MINUS           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    LESSTH          reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    GREATERTH       reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    SEQUAL          reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    NOTEQ           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    LESSEQTH        reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    GREATEREQTH     reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    EQUAL           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    WRITE           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    IF              reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    ID              reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    DRAW            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    PRINT           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    WHILE           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    FOR             reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    INT             reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    BOOLEAN         reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    STRING          reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    FLOAT           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    VOID            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    LBRA            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    LPAR            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    ICTE            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    FCTE            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    SCTE            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    TRUE            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    FALSE           reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    END             reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    RETURN          reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    RBRA            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    ELSE            reduce using rule 64 (VAR_CTE -> ICTE addInt .)
    COMMA           reduce using rule 64 (VAR_CTE -> ICTE addInt .)


state 151

    (107) addInt -> empty .

    MULT            reduce using rule 107 (addInt -> empty .)
    DIVI            reduce using rule 107 (addInt -> empty .)
    PLUS            reduce using rule 107 (addInt -> empty .)
    MINUS           reduce using rule 107 (addInt -> empty .)
    LESSTH          reduce using rule 107 (addInt -> empty .)
    GREATERTH       reduce using rule 107 (addInt -> empty .)
    SEQUAL          reduce using rule 107 (addInt -> empty .)
    NOTEQ           reduce using rule 107 (addInt -> empty .)
    LESSEQTH        reduce using rule 107 (addInt -> empty .)
    GREATEREQTH     reduce using rule 107 (addInt -> empty .)
    EQUAL           reduce using rule 107 (addInt -> empty .)
    WRITE           reduce using rule 107 (addInt -> empty .)
    IF              reduce using rule 107 (addInt -> empty .)
    ID              reduce using rule 107 (addInt -> empty .)
    DRAW            reduce using rule 107 (addInt -> empty .)
    PRINT           reduce using rule 107 (addInt -> empty .)
    WHILE           reduce using rule 107 (addInt -> empty .)
    FOR             reduce using rule 107 (addInt -> empty .)
    INT             reduce using rule 107 (addInt -> empty .)
    BOOLEAN         reduce using rule 107 (addInt -> empty .)
    STRING          reduce using rule 107 (addInt -> empty .)
    FLOAT           reduce using rule 107 (addInt -> empty .)
    VOID            reduce using rule 107 (addInt -> empty .)
    LBRA            reduce using rule 107 (addInt -> empty .)
    LPAR            reduce using rule 107 (addInt -> empty .)
    ICTE            reduce using rule 107 (addInt -> empty .)
    FCTE            reduce using rule 107 (addInt -> empty .)
    SCTE            reduce using rule 107 (addInt -> empty .)
    TRUE            reduce using rule 107 (addInt -> empty .)
    FALSE           reduce using rule 107 (addInt -> empty .)
    END             reduce using rule 107 (addInt -> empty .)
    RETURN          reduce using rule 107 (addInt -> empty .)
    RPAR            reduce using rule 107 (addInt -> empty .)
    RBRA            reduce using rule 107 (addInt -> empty .)
    ELSE            reduce using rule 107 (addInt -> empty .)
    COMMA           reduce using rule 107 (addInt -> empty .)


state 152

    (66) VAR_CTE -> SCTE addString .

    RPAR            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    MULT            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    DIVI            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    PLUS            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    MINUS           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    LESSTH          reduce using rule 66 (VAR_CTE -> SCTE addString .)
    GREATERTH       reduce using rule 66 (VAR_CTE -> SCTE addString .)
    SEQUAL          reduce using rule 66 (VAR_CTE -> SCTE addString .)
    NOTEQ           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    LESSEQTH        reduce using rule 66 (VAR_CTE -> SCTE addString .)
    GREATEREQTH     reduce using rule 66 (VAR_CTE -> SCTE addString .)
    EQUAL           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    WRITE           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    IF              reduce using rule 66 (VAR_CTE -> SCTE addString .)
    ID              reduce using rule 66 (VAR_CTE -> SCTE addString .)
    DRAW            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    PRINT           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    WHILE           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    FOR             reduce using rule 66 (VAR_CTE -> SCTE addString .)
    INT             reduce using rule 66 (VAR_CTE -> SCTE addString .)
    BOOLEAN         reduce using rule 66 (VAR_CTE -> SCTE addString .)
    STRING          reduce using rule 66 (VAR_CTE -> SCTE addString .)
    FLOAT           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    VOID            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    LBRA            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    LPAR            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    ICTE            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    FCTE            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    SCTE            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    TRUE            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    FALSE           reduce using rule 66 (VAR_CTE -> SCTE addString .)
    END             reduce using rule 66 (VAR_CTE -> SCTE addString .)
    RETURN          reduce using rule 66 (VAR_CTE -> SCTE addString .)
    RBRA            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    ELSE            reduce using rule 66 (VAR_CTE -> SCTE addString .)
    COMMA           reduce using rule 66 (VAR_CTE -> SCTE addString .)


state 153

    (108) addString -> empty .

    MULT            reduce using rule 108 (addString -> empty .)
    DIVI            reduce using rule 108 (addString -> empty .)
    PLUS            reduce using rule 108 (addString -> empty .)
    MINUS           reduce using rule 108 (addString -> empty .)
    LESSTH          reduce using rule 108 (addString -> empty .)
    GREATERTH       reduce using rule 108 (addString -> empty .)
    SEQUAL          reduce using rule 108 (addString -> empty .)
    NOTEQ           reduce using rule 108 (addString -> empty .)
    LESSEQTH        reduce using rule 108 (addString -> empty .)
    GREATEREQTH     reduce using rule 108 (addString -> empty .)
    EQUAL           reduce using rule 108 (addString -> empty .)
    WRITE           reduce using rule 108 (addString -> empty .)
    IF              reduce using rule 108 (addString -> empty .)
    ID              reduce using rule 108 (addString -> empty .)
    DRAW            reduce using rule 108 (addString -> empty .)
    PRINT           reduce using rule 108 (addString -> empty .)
    WHILE           reduce using rule 108 (addString -> empty .)
    FOR             reduce using rule 108 (addString -> empty .)
    INT             reduce using rule 108 (addString -> empty .)
    BOOLEAN         reduce using rule 108 (addString -> empty .)
    STRING          reduce using rule 108 (addString -> empty .)
    FLOAT           reduce using rule 108 (addString -> empty .)
    VOID            reduce using rule 108 (addString -> empty .)
    LBRA            reduce using rule 108 (addString -> empty .)
    LPAR            reduce using rule 108 (addString -> empty .)
    ICTE            reduce using rule 108 (addString -> empty .)
    FCTE            reduce using rule 108 (addString -> empty .)
    SCTE            reduce using rule 108 (addString -> empty .)
    TRUE            reduce using rule 108 (addString -> empty .)
    FALSE           reduce using rule 108 (addString -> empty .)
    END             reduce using rule 108 (addString -> empty .)
    RETURN          reduce using rule 108 (addString -> empty .)
    RPAR            reduce using rule 108 (addString -> empty .)
    RBRA            reduce using rule 108 (addString -> empty .)
    ELSE            reduce using rule 108 (addString -> empty .)
    COMMA           reduce using rule 108 (addString -> empty .)


state 154

    (67) VAR_CTE -> TRUE addBooleano .

    RPAR            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    MULT            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    DIVI            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    PLUS            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    MINUS           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    LESSTH          reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    GREATERTH       reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    SEQUAL          reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    NOTEQ           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    LESSEQTH        reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    GREATEREQTH     reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    EQUAL           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    WRITE           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    IF              reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    ID              reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    DRAW            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    PRINT           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    WHILE           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    FOR             reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    INT             reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    BOOLEAN         reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    STRING          reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    FLOAT           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    VOID            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    LBRA            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    LPAR            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    ICTE            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    FCTE            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    SCTE            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    TRUE            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    FALSE           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    END             reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    RETURN          reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    RBRA            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    ELSE            reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)
    COMMA           reduce using rule 67 (VAR_CTE -> TRUE addBooleano .)


state 155

    (42) FORZ -> FOR LPAR ICTE . COMMA ICTE COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 193


state 156

    (33) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP . RPAR

    RPAR            shift and go to state 194


state 157

    (34) LLAMADA_FUNCIONP -> EXPRE . LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (36) LLAMADA_FUNCIONZ -> . COMMA
    (37) LLAMADA_FUNCIONZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 196
    LBRA            reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)

    LLAMADA_FUNCIONZ               shift and go to state 195
    empty                          shift and go to state 197

state 158

    (35) LLAMADA_FUNCIONP -> empty .
    (113) pushExp -> empty .
    (115) genQuad0 -> empty .

    RPAR            reduce using rule 35 (LLAMADA_FUNCIONP -> empty .)
    LPAR            reduce using rule 113 (pushExp -> empty .)
    ICTE            reduce using rule 115 (genQuad0 -> empty .)
    FCTE            reduce using rule 115 (genQuad0 -> empty .)
    SCTE            reduce using rule 115 (genQuad0 -> empty .)
    TRUE            reduce using rule 115 (genQuad0 -> empty .)
    FALSE           reduce using rule 115 (genQuad0 -> empty .)


state 159

    (90) DIBUJA -> DERECHA .

    LPAR            reduce using rule 90 (DIBUJA -> DERECHA .)


state 160

    (98) DIBUJA -> ARCO .

    LPAR            reduce using rule 98 (DIBUJA -> ARCO .)


state 161

    (95) DIBUJA -> CIRCULO .

    LPAR            reduce using rule 95 (DIBUJA -> CIRCULO .)


state 162

    (91) DIBUJA -> VELOCIDAD .

    LPAR            reduce using rule 91 (DIBUJA -> VELOCIDAD .)


state 163

    (88) DIBUJA -> REVERSA .

    LPAR            reduce using rule 88 (DIBUJA -> REVERSA .)


state 164

    (94) DIBUJA -> OCULTAR .

    LPAR            reduce using rule 94 (DIBUJA -> OCULTAR .)


state 165

    (85) DIBUJA -> DEFINIRPOSICION .

    LPAR            reduce using rule 85 (DIBUJA -> DEFINIRPOSICION .)


state 166

    (93) DIBUJA -> MOSTRAR .

    LPAR            reduce using rule 93 (DIBUJA -> MOSTRAR .)


state 167

    (89) DIBUJA -> IZQUIERDA .

    LPAR            reduce using rule 89 (DIBUJA -> IZQUIERDA .)


state 168

    (79) ACCION -> ID POINT DIBUJA . LPAR VAR_CTE RPAR

    LPAR            shift and go to state 198


state 169

    (87) DIBUJA -> DERECHO .

    LPAR            reduce using rule 87 (DIBUJA -> DERECHO .)


state 170

    (97) DIBUJA -> DEFINIRY .

    LPAR            reduce using rule 97 (DIBUJA -> DEFINIRY .)


state 171

    (96) DIBUJA -> DEFINIRX .

    LPAR            reduce using rule 96 (DIBUJA -> DEFINIRX .)


state 172

    (92) DIBUJA -> BORRAR .

    LPAR            reduce using rule 92 (DIBUJA -> BORRAR .)


state 173

    (99) DIBUJA -> GROSOR .

    LPAR            reduce using rule 99 (DIBUJA -> GROSOR .)


state 174

    (86) DIBUJA -> DEFINIRCOLOR .

    LPAR            reduce using rule 86 (DIBUJA -> DEFINIRCOLOR .)


state 175

    (76) FACT -> LPAR . EXPRE RPAR
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 199
    empty                          shift and go to state 92
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63

state 176

    (75) FACT -> LBRA . EXPRE RBRA
    (52) EXPRE -> . EXT EXPREZ
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 200
    empty                          shift and go to state 92
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63

state 177

    (77) FACT -> empty .

    MULT            reduce using rule 77 (FACT -> empty .)
    DIVI            reduce using rule 77 (FACT -> empty .)
    PLUS            reduce using rule 77 (FACT -> empty .)
    MINUS           reduce using rule 77 (FACT -> empty .)
    LESSTH          reduce using rule 77 (FACT -> empty .)
    GREATERTH       reduce using rule 77 (FACT -> empty .)
    SEQUAL          reduce using rule 77 (FACT -> empty .)
    NOTEQ           reduce using rule 77 (FACT -> empty .)
    LESSEQTH        reduce using rule 77 (FACT -> empty .)
    GREATEREQTH     reduce using rule 77 (FACT -> empty .)
    EQUAL           reduce using rule 77 (FACT -> empty .)
    WRITE           reduce using rule 77 (FACT -> empty .)
    IF              reduce using rule 77 (FACT -> empty .)
    ID              reduce using rule 77 (FACT -> empty .)
    DRAW            reduce using rule 77 (FACT -> empty .)
    PRINT           reduce using rule 77 (FACT -> empty .)
    WHILE           reduce using rule 77 (FACT -> empty .)
    FOR             reduce using rule 77 (FACT -> empty .)
    INT             reduce using rule 77 (FACT -> empty .)
    BOOLEAN         reduce using rule 77 (FACT -> empty .)
    STRING          reduce using rule 77 (FACT -> empty .)
    FLOAT           reduce using rule 77 (FACT -> empty .)
    VOID            reduce using rule 77 (FACT -> empty .)
    LBRA            reduce using rule 77 (FACT -> empty .)
    LPAR            reduce using rule 77 (FACT -> empty .)
    ICTE            reduce using rule 77 (FACT -> empty .)
    FCTE            reduce using rule 77 (FACT -> empty .)
    SCTE            reduce using rule 77 (FACT -> empty .)
    TRUE            reduce using rule 77 (FACT -> empty .)
    FALSE           reduce using rule 77 (FACT -> empty .)
    END             reduce using rule 77 (FACT -> empty .)
    RETURN          reduce using rule 77 (FACT -> empty .)
    RPAR            reduce using rule 77 (FACT -> empty .)
    RBRA            reduce using rule 77 (FACT -> empty .)
    ELSE            reduce using rule 77 (FACT -> empty .)
    COMMA           reduce using rule 77 (FACT -> empty .)


state 178

    (74) FAC -> ID operandPush FACT .

    MULT            reduce using rule 74 (FAC -> ID operandPush FACT .)
    DIVI            reduce using rule 74 (FAC -> ID operandPush FACT .)
    PLUS            reduce using rule 74 (FAC -> ID operandPush FACT .)
    MINUS           reduce using rule 74 (FAC -> ID operandPush FACT .)
    LESSTH          reduce using rule 74 (FAC -> ID operandPush FACT .)
    GREATERTH       reduce using rule 74 (FAC -> ID operandPush FACT .)
    SEQUAL          reduce using rule 74 (FAC -> ID operandPush FACT .)
    NOTEQ           reduce using rule 74 (FAC -> ID operandPush FACT .)
    LESSEQTH        reduce using rule 74 (FAC -> ID operandPush FACT .)
    GREATEREQTH     reduce using rule 74 (FAC -> ID operandPush FACT .)
    EQUAL           reduce using rule 74 (FAC -> ID operandPush FACT .)
    RPAR            reduce using rule 74 (FAC -> ID operandPush FACT .)
    END             reduce using rule 74 (FAC -> ID operandPush FACT .)
    WRITE           reduce using rule 74 (FAC -> ID operandPush FACT .)
    IF              reduce using rule 74 (FAC -> ID operandPush FACT .)
    ID              reduce using rule 74 (FAC -> ID operandPush FACT .)
    DRAW            reduce using rule 74 (FAC -> ID operandPush FACT .)
    PRINT           reduce using rule 74 (FAC -> ID operandPush FACT .)
    WHILE           reduce using rule 74 (FAC -> ID operandPush FACT .)
    FOR             reduce using rule 74 (FAC -> ID operandPush FACT .)
    INT             reduce using rule 74 (FAC -> ID operandPush FACT .)
    BOOLEAN         reduce using rule 74 (FAC -> ID operandPush FACT .)
    STRING          reduce using rule 74 (FAC -> ID operandPush FACT .)
    FLOAT           reduce using rule 74 (FAC -> ID operandPush FACT .)
    VOID            reduce using rule 74 (FAC -> ID operandPush FACT .)
    LBRA            reduce using rule 74 (FAC -> ID operandPush FACT .)
    LPAR            reduce using rule 74 (FAC -> ID operandPush FACT .)
    ICTE            reduce using rule 74 (FAC -> ID operandPush FACT .)
    FCTE            reduce using rule 74 (FAC -> ID operandPush FACT .)
    SCTE            reduce using rule 74 (FAC -> ID operandPush FACT .)
    TRUE            reduce using rule 74 (FAC -> ID operandPush FACT .)
    FALSE           reduce using rule 74 (FAC -> ID operandPush FACT .)
    RETURN          reduce using rule 74 (FAC -> ID operandPush FACT .)
    ELSE            reduce using rule 74 (FAC -> ID operandPush FACT .)
    RBRA            reduce using rule 74 (FAC -> ID operandPush FACT .)
    COMMA           reduce using rule 74 (FAC -> ID operandPush FACT .)


state 179

    (43) CONDICION -> IF LPAR EXPRE . RPAR BLOQUE CONDICIONP END

    RPAR            shift and go to state 201


state 180

    (70) IMPRIMIR -> WRITE LBRA DATA_TIPOS . COMMA ID generateRead RBRA

    COMMA           shift and go to state 202


state 181

    (41) WHILEF -> WHILE LPAR EXPRE . RPAR BLOQUE END

    RPAR            shift and go to state 203


state 182

    (81) VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .

    RPAR            reduce using rule 81 (VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .)


state 183

    (83) VAR_FUNZ -> COMMA . VAR_FUNP
    (81) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (82) VAR_FUNP -> . empty
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (1) empty -> .

    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 80
    DATA_TIPOS                     shift and go to state 78
    VAR_FUNP                       shift and go to state 204

state 184

    (84) VAR_FUNZ -> empty .

    RPAR            reduce using rule 84 (VAR_FUNZ -> empty .)


state 185

    (78) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE . END restoreScope

    END             shift and go to state 205


state 186

    (10) VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .

    WRITE           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    IF              reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ID              reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    DRAW            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    PRINT           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    WHILE           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FOR             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    INT             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    BOOLEAN         reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    STRING          reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FLOAT           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    VOID            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    LBRA            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    LPAR            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ICTE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FCTE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    SCTE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    TRUE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    FALSE           reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    ELSE            reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    END             reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)
    RETURN          reduce using rule 10 (VART -> DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR .)


state 187

    (53) EXPREZ -> EQUAL operatorPush EXT .

    WRITE           reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    IF              reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    ID              reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    DRAW            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    PRINT           reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    WHILE           reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    FOR             reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    INT             reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    BOOLEAN         reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    STRING          reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    FLOAT           reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    VOID            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    LBRA            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    LPAR            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    ICTE            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    FCTE            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    SCTE            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    TRUE            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    FALSE           reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    END             reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    RETURN          reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    RPAR            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    ELSE            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    COMMA           reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)
    RBRA            reduce using rule 53 (EXPREZ -> EQUAL operatorPush EXT .)


state 188

    (56) EXT_W_RELOP -> RELOP operatorPush . EXT
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 62
    empty                          shift and go to state 92
    EXT                            shift and go to state 206
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63
    genQuad0                       shift and go to state 66

state 189

    (69) IMPRIMIR -> PRINT LBRA EXT RBRA .

    WRITE           reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    IF              reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    ID              reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    DRAW            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    PRINT           reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    WHILE           reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    FOR             reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    INT             reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    BOOLEAN         reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    STRING          reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    FLOAT           reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    VOID            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    LBRA            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    LPAR            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    ICTE            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    FCTE            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    SCTE            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    TRUE            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    FALSE           reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    END             reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    RETURN          reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)
    ELSE            reduce using rule 69 (IMPRIMIR -> PRINT LBRA EXT RBRA .)


state 190

    (59) EXP_W_SIGN -> ASOP operatorPush . EXP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    pushExp                        shift and go to state 62
    empty                          shift and go to state 92
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 207
    FAC                            shift and go to state 63
    genQuad0                       shift and go to state 66

state 191

    (71) FAC -> pushExp LPAR EXPRE RPAR . popExp
    (114) popExp -> . empty
    (1) empty -> .

    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)
    WRITE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    VOID            reduce using rule 1 (empty -> .)
    LBRA            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)

    popExp                         shift and go to state 208
    empty                          shift and go to state 209

state 192

    (62) TERMINO_W_SIGN -> MDOP operatorPush . TERMINO
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty
    (1) empty -> .

    LBRA            shift and go to state 59
    ID              shift and go to state 93
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)

    empty                          shift and go to state 92
    TERMINO                        shift and go to state 210
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    genQuad0                       shift and go to state 66

state 193

    (42) FORZ -> FOR LPAR ICTE COMMA . ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 211


state 194

    (33) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .

    WRITE           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    IF              reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ID              reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    DRAW            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    PRINT           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    WHILE           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FOR             reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    INT             reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    BOOLEAN         reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    STRING          reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FLOAT           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    VOID            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LBRA            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LPAR            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ICTE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FCTE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    SCTE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    TRUE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FALSE           reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    RETURN          reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    END             reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ELSE            reduce using rule 33 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)


state 195

    (34) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ . LLAMADA_FUNCIONP
    (34) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP
    (35) LLAMADA_FUNCIONP -> . empty
    (52) EXPRE -> . EXT EXPREZ
    (1) empty -> .
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    RPAR            reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    LBRA            shift and go to state 59
    ID              shift and go to state 93

    genQuad0                       shift and go to state 66
    pushExp                        shift and go to state 62
    EXPRE                          shift and go to state 157
    LLAMADA_FUNCIONP               shift and go to state 212
    EXT                            shift and go to state 55
    TERMINO                        shift and go to state 61
    EXP                            shift and go to state 56
    FAC                            shift and go to state 63
    empty                          shift and go to state 158

state 196

    (36) LLAMADA_FUNCIONZ -> COMMA .

    LBRA            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    ID              reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    LPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    ICTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    FCTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    SCTE            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    TRUE            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    FALSE           reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)
    RPAR            reduce using rule 36 (LLAMADA_FUNCIONZ -> COMMA .)


state 197

    (37) LLAMADA_FUNCIONZ -> empty .

    LBRA            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    ID              reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    LPAR            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    ICTE            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    FCTE            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    SCTE            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    TRUE            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    FALSE           reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)
    RPAR            reduce using rule 37 (LLAMADA_FUNCIONZ -> empty .)


state 198

    (79) ACCION -> ID POINT DIBUJA LPAR . VAR_CTE RPAR
    (64) VAR_CTE -> . ICTE addInt
    (65) VAR_CTE -> . FCTE addFloat
    (66) VAR_CTE -> . SCTE addString
    (67) VAR_CTE -> . TRUE addBooleano
    (68) VAR_CTE -> . FALSE addBooleano

    ICTE            shift and go to state 104
    FCTE            shift and go to state 103
    SCTE            shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 101

    VAR_CTE                        shift and go to state 213

state 199

    (76) FACT -> LPAR EXPRE . RPAR

    RPAR            shift and go to state 214


state 200

    (75) FACT -> LBRA EXPRE . RBRA

    RBRA            shift and go to state 215


state 201

    (43) CONDICION -> IF LPAR EXPRE RPAR . BLOQUE CONDICIONP END
    (21) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (22) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (20) ESTATUTO -> . WRITE
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (79) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (69) IMPRIMIR -> . PRINT LBRA EXT RBRA
    (70) IMPRIMIR -> . WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    WRITE           shift and go to state 75
    ELSE            reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 67
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 68
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 69
    IMPRIMIR                       shift and go to state 71
    BLOQUE                         shift and go to state 216
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 70

state 202

    (70) IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA . ID generateRead RBRA

    ID              shift and go to state 217


state 203

    (41) WHILEF -> WHILE LPAR EXPRE RPAR . BLOQUE END
    (21) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (22) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (20) ESTATUTO -> . WRITE
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (79) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (69) IMPRIMIR -> . PRINT LBRA EXT RBRA
    (70) IMPRIMIR -> . WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    WRITE           shift and go to state 75
    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 67
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 68
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 69
    IMPRIMIR                       shift and go to state 71
    BLOQUE                         shift and go to state 218
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 70

state 204

    (83) VAR_FUNZ -> COMMA VAR_FUNP .

    RPAR            reduce using rule 83 (VAR_FUNZ -> COMMA VAR_FUNP .)


state 205

    (78) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END . restoreScope
    (100) restoreScope -> . empty
    (1) empty -> .

    DEFINE          reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 219
    restoreScope                   shift and go to state 220

state 206

    (56) EXT_W_RELOP -> RELOP operatorPush EXT .

    EQUAL           reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    WRITE           reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    IF              reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    ID              reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    DRAW            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    PRINT           reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    WHILE           reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    FOR             reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    INT             reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    BOOLEAN         reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    STRING          reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    FLOAT           reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    VOID            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    LBRA            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    LPAR            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    ICTE            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    FCTE            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    SCTE            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    TRUE            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    FALSE           reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    END             reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    RETURN          reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    RPAR            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    RBRA            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    ELSE            reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)
    COMMA           reduce using rule 56 (EXT_W_RELOP -> RELOP operatorPush EXT .)


state 207

    (59) EXP_W_SIGN -> ASOP operatorPush EXP .

    LESSTH          reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    GREATERTH       reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    SEQUAL          reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    NOTEQ           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LESSEQTH        reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    GREATEREQTH     reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    EQUAL           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    WRITE           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    IF              reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ID              reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    DRAW            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    PRINT           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    WHILE           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FOR             reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    INT             reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    BOOLEAN         reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    STRING          reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FLOAT           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    VOID            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LBRA            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    LPAR            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ICTE            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FCTE            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    SCTE            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    TRUE            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    FALSE           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    END             reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RETURN          reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RPAR            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    RBRA            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    ELSE            reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)
    COMMA           reduce using rule 59 (EXP_W_SIGN -> ASOP operatorPush EXP .)


state 208

    (71) FAC -> pushExp LPAR EXPRE RPAR popExp .

    MULT            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    DIVI            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    PLUS            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    MINUS           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LESSTH          reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    GREATERTH       reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    SEQUAL          reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    NOTEQ           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LESSEQTH        reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    GREATEREQTH     reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    EQUAL           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RPAR            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    END             reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    WRITE           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    IF              reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ID              reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    DRAW            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    PRINT           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    WHILE           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FOR             reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    INT             reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    BOOLEAN         reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    STRING          reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FLOAT           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    VOID            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LBRA            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    LPAR            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ICTE            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FCTE            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    SCTE            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    TRUE            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    FALSE           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RETURN          reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    ELSE            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    RBRA            reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)
    COMMA           reduce using rule 71 (FAC -> pushExp LPAR EXPRE RPAR popExp .)


state 209

    (114) popExp -> empty .

    MULT            reduce using rule 114 (popExp -> empty .)
    DIVI            reduce using rule 114 (popExp -> empty .)
    PLUS            reduce using rule 114 (popExp -> empty .)
    MINUS           reduce using rule 114 (popExp -> empty .)
    LESSTH          reduce using rule 114 (popExp -> empty .)
    GREATERTH       reduce using rule 114 (popExp -> empty .)
    SEQUAL          reduce using rule 114 (popExp -> empty .)
    NOTEQ           reduce using rule 114 (popExp -> empty .)
    LESSEQTH        reduce using rule 114 (popExp -> empty .)
    GREATEREQTH     reduce using rule 114 (popExp -> empty .)
    EQUAL           reduce using rule 114 (popExp -> empty .)
    WRITE           reduce using rule 114 (popExp -> empty .)
    IF              reduce using rule 114 (popExp -> empty .)
    ID              reduce using rule 114 (popExp -> empty .)
    DRAW            reduce using rule 114 (popExp -> empty .)
    PRINT           reduce using rule 114 (popExp -> empty .)
    WHILE           reduce using rule 114 (popExp -> empty .)
    FOR             reduce using rule 114 (popExp -> empty .)
    INT             reduce using rule 114 (popExp -> empty .)
    BOOLEAN         reduce using rule 114 (popExp -> empty .)
    STRING          reduce using rule 114 (popExp -> empty .)
    FLOAT           reduce using rule 114 (popExp -> empty .)
    VOID            reduce using rule 114 (popExp -> empty .)
    LBRA            reduce using rule 114 (popExp -> empty .)
    LPAR            reduce using rule 114 (popExp -> empty .)
    ICTE            reduce using rule 114 (popExp -> empty .)
    FCTE            reduce using rule 114 (popExp -> empty .)
    SCTE            reduce using rule 114 (popExp -> empty .)
    TRUE            reduce using rule 114 (popExp -> empty .)
    FALSE           reduce using rule 114 (popExp -> empty .)
    END             reduce using rule 114 (popExp -> empty .)
    RETURN          reduce using rule 114 (popExp -> empty .)
    RPAR            reduce using rule 114 (popExp -> empty .)
    RBRA            reduce using rule 114 (popExp -> empty .)
    ELSE            reduce using rule 114 (popExp -> empty .)
    COMMA           reduce using rule 114 (popExp -> empty .)


state 210

    (62) TERMINO_W_SIGN -> MDOP operatorPush TERMINO .

    PLUS            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    MINUS           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LESSTH          reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    GREATERTH       reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    SEQUAL          reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    NOTEQ           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LESSEQTH        reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    GREATEREQTH     reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    EQUAL           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    WRITE           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    IF              reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ID              reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    DRAW            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    PRINT           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    WHILE           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FOR             reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    INT             reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    BOOLEAN         reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    STRING          reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FLOAT           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    VOID            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LBRA            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    LPAR            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ICTE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FCTE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    SCTE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    TRUE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    FALSE           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    END             reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RETURN          reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RPAR            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    RBRA            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    ELSE            reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)
    COMMA           reduce using rule 62 (TERMINO_W_SIGN -> MDOP operatorPush TERMINO .)


state 211

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE . COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 221


state 212

    (34) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .

    RPAR            reduce using rule 34 (LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ LLAMADA_FUNCIONP .)


state 213

    (79) ACCION -> ID POINT DIBUJA LPAR VAR_CTE . RPAR

    RPAR            shift and go to state 222


state 214

    (76) FACT -> LPAR EXPRE RPAR .

    MULT            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    DIVI            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    PLUS            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    MINUS           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    LESSTH          reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    GREATERTH       reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    SEQUAL          reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    NOTEQ           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    LESSEQTH        reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    GREATEREQTH     reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    EQUAL           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    WRITE           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    IF              reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    ID              reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    DRAW            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    PRINT           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    WHILE           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    FOR             reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    INT             reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    BOOLEAN         reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    STRING          reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    FLOAT           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    VOID            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    LBRA            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    LPAR            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    ICTE            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    FCTE            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    SCTE            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    TRUE            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    FALSE           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    END             reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    RETURN          reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    RPAR            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    RBRA            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    ELSE            reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)
    COMMA           reduce using rule 76 (FACT -> LPAR EXPRE RPAR .)


state 215

    (75) FACT -> LBRA EXPRE RBRA .

    MULT            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    DIVI            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    PLUS            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    MINUS           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    LESSTH          reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    GREATERTH       reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    SEQUAL          reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    NOTEQ           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    LESSEQTH        reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    GREATEREQTH     reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    EQUAL           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    WRITE           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    IF              reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    ID              reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    DRAW            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    PRINT           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    WHILE           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    FOR             reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    INT             reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    BOOLEAN         reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    STRING          reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    FLOAT           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    VOID            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    LBRA            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    LPAR            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    ICTE            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    FCTE            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    SCTE            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    TRUE            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    FALSE           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    END             reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    RETURN          reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    RPAR            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    RBRA            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    ELSE            reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)
    COMMA           reduce using rule 75 (FACT -> LBRA EXPRE RBRA .)


state 216

    (43) CONDICION -> IF LPAR EXPRE RPAR BLOQUE . CONDICIONP END
    (44) CONDICIONP -> . ELSE BLOQUE
    (45) CONDICIONP -> . empty
    (1) empty -> .

    ELSE            shift and go to state 224
    END             reduce using rule 1 (empty -> .)

    CONDICIONP                     shift and go to state 223
    empty                          shift and go to state 225

state 217

    (70) IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID . generateRead RBRA
    (102) generateRead -> . empty
    (1) empty -> .

    RBRA            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 227
    generateRead                   shift and go to state 226

state 218

    (41) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE . END

    END             shift and go to state 228


state 219

    (100) restoreScope -> empty .

    DEFINE          reduce using rule 100 (restoreScope -> empty .)
    MAIN            reduce using rule 100 (restoreScope -> empty .)


state 220

    (78) FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .

    DEFINE          reduce using rule 78 (FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .)
    MAIN            reduce using rule 78 (FUNCION -> DEFINE DATA_TIPOS ID changeScope VAR_FUN BLOQUE RETURN EXPRE END restoreScope .)


state 221

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA . ICTE RPAR BLOQUE END

    ICTE            shift and go to state 229


state 222

    (79) ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .

    WRITE           reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    IF              reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ID              reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    DRAW            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    PRINT           reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    WHILE           reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FOR             reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    INT             reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    BOOLEAN         reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    STRING          reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FLOAT           reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    VOID            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LBRA            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    LPAR            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ICTE            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FCTE            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    SCTE            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    TRUE            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FALSE           reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    END             reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    RETURN          reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ELSE            reduce using rule 79 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)


state 223

    (43) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP . END

    END             shift and go to state 230


state 224

    (44) CONDICIONP -> ELSE . BLOQUE
    (21) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (22) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (20) ESTATUTO -> . WRITE
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (79) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (69) IMPRIMIR -> . PRINT LBRA EXT RBRA
    (70) IMPRIMIR -> . WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    WRITE           shift and go to state 75
    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 67
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 68
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 69
    IMPRIMIR                       shift and go to state 71
    BLOQUE                         shift and go to state 231
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 70

state 225

    (45) CONDICIONP -> empty .

    END             reduce using rule 45 (CONDICIONP -> empty .)


state 226

    (70) IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead . RBRA

    RBRA            shift and go to state 232


state 227

    (102) generateRead -> empty .

    RBRA            reduce using rule 102 (generateRead -> empty .)


state 228

    (41) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .

    WRITE           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    IF              reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ID              reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    DRAW            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    PRINT           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    WHILE           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FOR             reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    INT             reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    STRING          reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FLOAT           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    VOID            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LBRA            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    LPAR            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ICTE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FCTE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    SCTE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    TRUE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FALSE           reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ELSE            reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    END             reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    RETURN          reduce using rule 41 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)


state 229

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE . RPAR BLOQUE END

    RPAR            shift and go to state 233


state 230

    (43) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .

    WRITE           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    IF              reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ID              reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    DRAW            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    PRINT           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    WHILE           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FOR             reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    INT             reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    BOOLEAN         reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    STRING          reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FLOAT           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    VOID            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LBRA            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    LPAR            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ICTE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FCTE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    SCTE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    TRUE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FALSE           reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    RETURN          reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    END             reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ELSE            reduce using rule 43 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)


state 231

    (44) CONDICIONP -> ELSE BLOQUE .

    END             reduce using rule 44 (CONDICIONP -> ELSE BLOQUE .)


state 232

    (70) IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .

    WRITE           reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    IF              reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    ID              reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    DRAW            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    PRINT           reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    WHILE           reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    FOR             reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    INT             reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    BOOLEAN         reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    STRING          reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    FLOAT           reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    VOID            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    LBRA            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    LPAR            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    ICTE            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    FCTE            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    SCTE            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    TRUE            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    FALSE           reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    END             reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    RETURN          reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)
    ELSE            reduce using rule 70 (IMPRIMIR -> WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA .)


state 233

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR . BLOQUE END
    (21) BLOQUE -> . ESTATUTO finishBlock BLOQUE
    (22) BLOQUE -> . empty
    (13) ESTATUTO -> . EXPRE genQuad5
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (20) ESTATUTO -> . WRITE
    (1) empty -> .
    (52) EXPRE -> . EXT EXPREZ
    (43) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (39) CICLO -> . WHILEF
    (40) CICLO -> . FORZ
    (79) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (10) VART -> . DRAW ID addVariable EQUAL NEW DRAWI LPAR RPAR
    (11) VART -> . DATA_TIPOS ID addVariable
    (12) VART -> . ARR ID addVariable
    (33) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (69) IMPRIMIR -> . PRINT LBRA EXT RBRA
    (70) IMPRIMIR -> . WRITE LBRA DATA_TIPOS COMMA ID generateRead RBRA
    (55) EXT -> . EXP genQuad3 EXT_W_RELOP
    (41) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (42) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT addDataType
    (24) DATA_TIPOS -> . BOOLEAN addDataType
    (25) DATA_TIPOS -> . STRING addDataType
    (26) DATA_TIPOS -> . FLOAT addDataType
    (27) DATA_TIPOS -> . VOID addDataType
    (32) ARR -> . DATA_TIPOS LBRA ICTE RBRA
    (58) EXP -> . TERMINO genQuad2 EXP_W_SIGN
    (61) TERMINO -> . FAC genQuad1 TERMINO_W_SIGN
    (71) FAC -> . pushExp LPAR EXPRE RPAR popExp
    (72) FAC -> . genQuad0 VAR_CTE operandPush
    (73) FAC -> . LBRA EXPRE RPAR
    (74) FAC -> . ID operandPush FACT
    (113) pushExp -> . empty
    (115) genQuad0 -> . empty

    WRITE           shift and go to state 75
    END             reduce using rule 1 (empty -> .)
    LPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    SCTE            reduce using rule 1 (empty -> .)
    TRUE            reduce using rule 1 (empty -> .)
    FALSE           reduce using rule 1 (empty -> .)
    IF              shift and go to state 74
    ID              shift and go to state 73
    DRAW            shift and go to state 14
    PRINT           shift and go to state 57
    WHILE           shift and go to state 77
    FOR             shift and go to state 67
    INT             shift and go to state 18
    BOOLEAN         shift and go to state 20
    STRING          shift and go to state 15
    FLOAT           shift and go to state 19
    VOID            shift and go to state 11
    LBRA            shift and go to state 59

    VART                           shift and go to state 68
    CICLO                          shift and go to state 53
    EXPRE                          shift and go to state 54
    EXT                            shift and go to state 55
    EXP                            shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 58
    genQuad0                       shift and go to state 66
    ESTATUTO                       shift and go to state 60
    TERMINO                        shift and go to state 61
    pushExp                        shift and go to state 62
    FAC                            shift and go to state 63
    empty                          shift and go to state 64
    WHILEF                         shift and go to state 65
    DATA_TIPOS                     shift and go to state 16
    FORZ                           shift and go to state 69
    IMPRIMIR                       shift and go to state 71
    BLOQUE                         shift and go to state 234
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 76
    CONDICION                      shift and go to state 70

state 234

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE . END

    END             shift and go to state 235


state 235

    (42) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .

    WRITE           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    IF              reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ID              reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    DRAW            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    PRINT           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    WHILE           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FOR             reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    INT             reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    STRING          reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FLOAT           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    VOID            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LBRA            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    LPAR            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ICTE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FCTE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    SCTE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    TRUE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FALSE           reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    END             reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    RETURN          reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ELSE            reduce using rule 42 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAR in state 73 resolved as shift
WARNING: shift/reduce conflict for LBRA in state 75 resolved as shift
WARNING: shift/reduce conflict for LBRA in state 111 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 111 resolved as shift
