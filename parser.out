Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    AND
    FALSE
    NOT
    OR

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     empty -> <empty>
Rule 2     PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL
Rule 3     PROGRAMAB -> FUNCION PROGRAMAB
Rule 4     PROGRAMAB -> empty
Rule 5     PROGRAMAZ -> GLOBALES
Rule 6     PROGRAMAZ -> empty
Rule 7     GLOBALES -> GLOBAL VART
Rule 8     VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR
Rule 9     VART -> DATA_TIPOS ID VARZ
Rule 10    VART -> ARR ID
Rule 11    VARZ -> empty
Rule 12    VARZ -> EQUAL EXP
Rule 13    ESTATUTO -> ASIGNACION
Rule 14    ESTATUTO -> CONDICION
Rule 15    ESTATUTO -> CICLO
Rule 16    ESTATUTO -> ACCION
Rule 17    ESTATUTO -> VART
Rule 18    ESTATUTO -> LLAMADA_FUNCION
Rule 19    ESTATUTO -> IMPRIMIR
Rule 20    BLOQUE -> ESTATUTO BLOQUEP
Rule 21    BLOQUEP -> BLOQUE
Rule 22    BLOQUEP -> empty
Rule 23    DATA_TIPOS -> INT
Rule 24    DATA_TIPOS -> BOOLEAN
Rule 25    DATA_TIPOS -> CHAR
Rule 26    DATA_TIPOS -> STRING
Rule 27    DATA_TIPOS -> FLOAT
Rule 28    ASOP -> PLUS
Rule 29    ASOP -> MINUS
Rule 30    MDOP -> MULT
Rule 31    MDOP -> DIVI
Rule 32    ASIGNACION -> ID ASIGNACIONP
Rule 33    ASIGNACIONP -> EQUAL EXPRE
Rule 34    ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA
Rule 35    ASIGNACIONZ -> COMMA ICTE
Rule 36    ASIGNACIONZ -> empty
Rule 37    ARR -> DATA_TIPOS LBRA ICTE ARRZ RBRA
Rule 38    ARRZ -> COMMA ICTE
Rule 39    ARRZ -> empty
Rule 40    LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR
Rule 41    LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ
Rule 42    LLAMADA_FUNCIONP -> empty
Rule 43    LLAMADA_FUNCIONZ -> COMMA LLAMADA_FUNCIONP
Rule 44    LLAMADA_FUNCIONZ -> empty
Rule 45    PRINCIPAL -> DEFINE VOID MAIN LPAR RPAR BLOQUE END
Rule 46    CICLO -> WHILEF
Rule 47    CICLO -> FORZ
Rule 48    WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END
Rule 49    FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
Rule 50    CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
Rule 51    CONDICIONP -> ELSE CONDICIONZ
Rule 52    CONDICIONP -> empty
Rule 53    CONDICIONZ -> BLOQUE empty
Rule 54    CONDICIONZ -> CONDICION
Rule 55    RELOP -> LESSTH
Rule 56    RELOP -> GREATERTH
Rule 57    RELOP -> SEQUAL
Rule 58    RELOP -> NOTEQ
Rule 59    RELOP -> LESSEQTH
Rule 60    RELOP -> GREATEREQTH
Rule 61    EXPRE -> EXP EXPREZ
Rule 62    EXPREZ -> RELOP EXP
Rule 63    EXPREZ -> empty
Rule 64    EXP -> TERMINO EXP_W_SIGN
Rule 65    EXP_W_SIGN -> ASOP EXP
Rule 66    EXP_W_SIGN -> empty
Rule 67    TERMINO -> FAC TERMINO_W_SIGN
Rule 68    TERMINO_W_SIGN -> MDOP TERMINO
Rule 69    TERMINO_W_SIGN -> empty
Rule 70    VAR_CTE -> ICTE
Rule 71    VAR_CTE -> FCTE
Rule 72    VAR_CTE -> LLAMADA_FUNCION
Rule 73    IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA
Rule 74    IMPRIMIRZ -> EXPRE
Rule 75    IMPRIMIRZ -> SCTE
Rule 76    FAC -> LPAR EXPRE RPAR
Rule 77    FAC -> FACS VAR_CTE
Rule 78    FAC -> ID FACT
Rule 79    FACT -> LBRA EXP FACZ RBRA
Rule 80    FACT -> empty
Rule 81    FACS -> ASOP
Rule 82    FACS -> empty
Rule 83    FACZ -> COMMA EXP
Rule 84    FACZ -> empty
Rule 85    FUNCION -> DEFINE DATA_TIPOS ID VAR_FUN BLOQUE RETURN EXP END
Rule 86    ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR
Rule 87    VAR_FUN -> LPAR VAR_FUNP RPAR
Rule 88    VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ
Rule 89    VAR_FUNZ -> COMMA VAR_FUNP
Rule 90    VAR_FUNZ -> empty
Rule 91    DIBUJA -> DEFINIRPOSICION
Rule 92    DIBUJA -> DEFINIRCOLOR
Rule 93    DIBUJA -> DERECHO
Rule 94    DIBUJA -> REVERSA
Rule 95    DIBUJA -> IZQUIERDA
Rule 96    DIBUJA -> DERECHA
Rule 97    DIBUJA -> VELOCIDAD
Rule 98    DIBUJA -> BORRAR
Rule 99    DIBUJA -> MOSTRAR
Rule 100   DIBUJA -> OCULTAR
Rule 101   DIBUJA -> CIRCULO
Rule 102   DIBUJA -> DEFINIRX
Rule 103   DIBUJA -> DEFINIRY
Rule 104   DIBUJA -> ARCO
Rule 105   DIBUJA -> GROSOR

Terminals, with rules where they appear

AND                  : 
ARCO                 : 104
BOOLEAN              : 24
BORRAR               : 98
CHAR                 : 25
CIRCULO              : 101
COMMA                : 35 38 43 49 49 83 89
DEFINE               : 45 85
DEFINIRCOLOR         : 92
DEFINIRPOSICION      : 91
DEFINIRX             : 102
DEFINIRY             : 103
DERECHA              : 96
DERECHO              : 93
DIVI                 : 31
DRAW                 : 8
DRAWI                : 8
ELSE                 : 51
END                  : 45 48 49 50 85
EQUAL                : 8 12 33
FALSE                : 
FCTE                 : 71
FLOAT                : 27
FOR                  : 49
GLOBAL               : 7
GREATEREQTH          : 60
GREATERTH            : 56
GROSOR               : 105
ICTE                 : 34 35 37 38 49 49 49 70
ID                   : 8 9 10 32 40 78 85 86 88
IF                   : 50
INT                  : 23
IZQUIERDA            : 95
LBRA                 : 34 37 73 79
LESSEQTH             : 59
LESSTH               : 55
LPAR                 : 8 40 45 48 49 50 76 86 87
MAIN                 : 45
MINUS                : 29
MOSTRAR              : 99
MULT                 : 30
NEW                  : 8
NOT                  : 
NOTEQ                : 58
OCULTAR              : 100
OR                   : 
PLUS                 : 28
POINT                : 86
PRINT                : 73
RBRA                 : 34 37 73 79
RETURN               : 85
REVERSA              : 94
RPAR                 : 8 40 45 48 49 50 76 86 87
SCTE                 : 75
SEQUAL               : 57
STRING               : 26
TRUE                 : 
VELOCIDAD            : 97
VOID                 : 45
WHILE                : 48
error                : 

Nonterminals, with rules where they appear

ACCION               : 16
ARR                  : 10
ARRZ                 : 37
ASIGNACION           : 13
ASIGNACIONP          : 32
ASIGNACIONZ          : 34
ASOP                 : 65 81
BLOQUE               : 21 45 48 49 50 53 85
BLOQUEP              : 20
CICLO                : 15
CONDICION            : 14 54
CONDICIONP           : 50
CONDICIONZ           : 51
DATA_TIPOS           : 9 37 85 88
DIBUJA               : 86
ESTATUTO             : 20
EXP                  : 12 61 62 65 79 83 85
EXPRE                : 33 41 48 50 74 76
EXPREZ               : 61
EXP_W_SIGN           : 64
FAC                  : 67
FACS                 : 77
FACT                 : 78
FACZ                 : 79
FORZ                 : 47
FUNCION              : 3
GLOBALES             : 5
IMPRIMIR             : 19
IMPRIMIRZ            : 73
LLAMADA_FUNCION      : 18 72
LLAMADA_FUNCIONP     : 40 43
LLAMADA_FUNCIONZ     : 41
MDOP                 : 68
PRINCIPAL            : 2
PROGRAMA             : 0
PROGRAMAB            : 2 3
PROGRAMAZ            : 2
RELOP                : 62
TERMINO              : 64 68
TERMINO_W_SIGN       : 67
VART                 : 7 17
VARZ                 : 9
VAR_CTE              : 77 86
VAR_FUN              : 85
VAR_FUNP             : 87 89
VAR_FUNZ             : 88
WHILEF               : 46
empty                : 4 6 11 22 36 39 42 44 52 53 63 66 69 80 82 84 90

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (2) PROGRAMA -> . PROGRAMAZ PROGRAMAB PRINCIPAL
    (5) PROGRAMAZ -> . GLOBALES
    (6) PROGRAMAZ -> . empty
    (7) GLOBALES -> . GLOBAL VART
    (1) empty -> .

    GLOBAL          shift and go to state 2
    DEFINE          reduce using rule 1 (empty -> .)

    PROGRAMAZ                      shift and go to state 1
    PROGRAMA                       shift and go to state 3
    GLOBALES                       shift and go to state 4
    empty                          shift and go to state 5

state 1

    (2) PROGRAMA -> PROGRAMAZ . PROGRAMAB PRINCIPAL
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (85) FUNCION -> . DEFINE DATA_TIPOS ID VAR_FUN BLOQUE RETURN EXP END
    (1) empty -> .

  ! shift/reduce conflict for DEFINE resolved as shift
    DEFINE          shift and go to state 9

  ! DEFINE          [ reduce using rule 1 (empty -> .) ]

    PROGRAMAB                      shift and go to state 7
    empty                          shift and go to state 8
    FUNCION                        shift and go to state 6

state 2

    (7) GLOBALES -> GLOBAL . VART
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    DRAW            shift and go to state 11
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 10
    ARR                            shift and go to state 17
    DATA_TIPOS                     shift and go to state 14

state 3

    (0) S' -> PROGRAMA .



state 4

    (5) PROGRAMAZ -> GLOBALES .

    DEFINE          reduce using rule 5 (PROGRAMAZ -> GLOBALES .)


state 5

    (6) PROGRAMAZ -> empty .

    DEFINE          reduce using rule 6 (PROGRAMAZ -> empty .)


state 6

    (3) PROGRAMAB -> FUNCION . PROGRAMAB
    (3) PROGRAMAB -> . FUNCION PROGRAMAB
    (4) PROGRAMAB -> . empty
    (85) FUNCION -> . DEFINE DATA_TIPOS ID VAR_FUN BLOQUE RETURN EXP END
    (1) empty -> .

  ! shift/reduce conflict for DEFINE resolved as shift
    DEFINE          shift and go to state 9

  ! DEFINE          [ reduce using rule 1 (empty -> .) ]

    PROGRAMAB                      shift and go to state 19
    empty                          shift and go to state 8
    FUNCION                        shift and go to state 6

state 7

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB . PRINCIPAL
    (45) PRINCIPAL -> . DEFINE VOID MAIN LPAR RPAR BLOQUE END

    DEFINE          shift and go to state 21

    PRINCIPAL                      shift and go to state 20

state 8

    (4) PROGRAMAB -> empty .

    DEFINE          reduce using rule 4 (PROGRAMAB -> empty .)


state 9

    (85) FUNCION -> DEFINE . DATA_TIPOS ID VAR_FUN BLOQUE RETURN EXP END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT

    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    DATA_TIPOS                     shift and go to state 22

state 10

    (7) GLOBALES -> GLOBAL VART .

    DEFINE          reduce using rule 7 (GLOBALES -> GLOBAL VART .)


state 11

    (8) VART -> DRAW . ID EQUAL NEW DRAWI LPAR RPAR

    ID              shift and go to state 23


state 12

    (27) DATA_TIPOS -> FLOAT .

    ID              reduce using rule 27 (DATA_TIPOS -> FLOAT .)
    LBRA            reduce using rule 27 (DATA_TIPOS -> FLOAT .)


state 13

    (26) DATA_TIPOS -> STRING .

    ID              reduce using rule 26 (DATA_TIPOS -> STRING .)
    LBRA            reduce using rule 26 (DATA_TIPOS -> STRING .)


state 14

    (9) VART -> DATA_TIPOS . ID VARZ
    (37) ARR -> DATA_TIPOS . LBRA ICTE ARRZ RBRA

    ID              shift and go to state 25
    LBRA            shift and go to state 24


state 15

    (23) DATA_TIPOS -> INT .

    ID              reduce using rule 23 (DATA_TIPOS -> INT .)
    LBRA            reduce using rule 23 (DATA_TIPOS -> INT .)


state 16

    (25) DATA_TIPOS -> CHAR .

    ID              reduce using rule 25 (DATA_TIPOS -> CHAR .)
    LBRA            reduce using rule 25 (DATA_TIPOS -> CHAR .)


state 17

    (10) VART -> ARR . ID

    ID              shift and go to state 26


state 18

    (24) DATA_TIPOS -> BOOLEAN .

    ID              reduce using rule 24 (DATA_TIPOS -> BOOLEAN .)
    LBRA            reduce using rule 24 (DATA_TIPOS -> BOOLEAN .)


state 19

    (3) PROGRAMAB -> FUNCION PROGRAMAB .

    DEFINE          reduce using rule 3 (PROGRAMAB -> FUNCION PROGRAMAB .)


state 20

    (2) PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> PROGRAMAZ PROGRAMAB PRINCIPAL .)


state 21

    (45) PRINCIPAL -> DEFINE . VOID MAIN LPAR RPAR BLOQUE END

    VOID            shift and go to state 27


state 22

    (85) FUNCION -> DEFINE DATA_TIPOS . ID VAR_FUN BLOQUE RETURN EXP END

    ID              shift and go to state 28


state 23

    (8) VART -> DRAW ID . EQUAL NEW DRAWI LPAR RPAR

    EQUAL           shift and go to state 29


state 24

    (37) ARR -> DATA_TIPOS LBRA . ICTE ARRZ RBRA

    ICTE            shift and go to state 30


state 25

    (9) VART -> DATA_TIPOS ID . VARZ
    (11) VARZ -> . empty
    (12) VARZ -> . EQUAL EXP
    (1) empty -> .

    EQUAL           shift and go to state 31
    DEFINE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 33
    VARZ                           shift and go to state 32

state 26

    (10) VART -> ARR ID .

    ID              reduce using rule 10 (VART -> ARR ID .)
    IF              reduce using rule 10 (VART -> ARR ID .)
    DRAW            reduce using rule 10 (VART -> ARR ID .)
    PRINT           reduce using rule 10 (VART -> ARR ID .)
    WHILE           reduce using rule 10 (VART -> ARR ID .)
    FOR             reduce using rule 10 (VART -> ARR ID .)
    INT             reduce using rule 10 (VART -> ARR ID .)
    BOOLEAN         reduce using rule 10 (VART -> ARR ID .)
    CHAR            reduce using rule 10 (VART -> ARR ID .)
    STRING          reduce using rule 10 (VART -> ARR ID .)
    FLOAT           reduce using rule 10 (VART -> ARR ID .)
    END             reduce using rule 10 (VART -> ARR ID .)
    ELSE            reduce using rule 10 (VART -> ARR ID .)
    RETURN          reduce using rule 10 (VART -> ARR ID .)
    DEFINE          reduce using rule 10 (VART -> ARR ID .)


state 27

    (45) PRINCIPAL -> DEFINE VOID . MAIN LPAR RPAR BLOQUE END

    MAIN            shift and go to state 34


state 28

    (85) FUNCION -> DEFINE DATA_TIPOS ID . VAR_FUN BLOQUE RETURN EXP END
    (87) VAR_FUN -> . LPAR VAR_FUNP RPAR

    LPAR            shift and go to state 35

    VAR_FUN                        shift and go to state 36

state 29

    (8) VART -> DRAW ID EQUAL . NEW DRAWI LPAR RPAR

    NEW             shift and go to state 37


state 30

    (37) ARR -> DATA_TIPOS LBRA ICTE . ARRZ RBRA
    (38) ARRZ -> . COMMA ICTE
    (39) ARRZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 38
    RBRA            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 40
    ARRZ                           shift and go to state 39

state 31

    (12) VARZ -> EQUAL . EXP
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 46
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 32

    (9) VART -> DATA_TIPOS ID VARZ .

    ID              reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    IF              reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    DRAW            reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    PRINT           reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    WHILE           reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    FOR             reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    INT             reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    BOOLEAN         reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    CHAR            reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    STRING          reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    FLOAT           reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    END             reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    ELSE            reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    RETURN          reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)
    DEFINE          reduce using rule 9 (VART -> DATA_TIPOS ID VARZ .)


state 33

    (11) VARZ -> empty .

    DEFINE          reduce using rule 11 (VARZ -> empty .)
    ID              reduce using rule 11 (VARZ -> empty .)
    IF              reduce using rule 11 (VARZ -> empty .)
    DRAW            reduce using rule 11 (VARZ -> empty .)
    PRINT           reduce using rule 11 (VARZ -> empty .)
    WHILE           reduce using rule 11 (VARZ -> empty .)
    FOR             reduce using rule 11 (VARZ -> empty .)
    INT             reduce using rule 11 (VARZ -> empty .)
    BOOLEAN         reduce using rule 11 (VARZ -> empty .)
    CHAR            reduce using rule 11 (VARZ -> empty .)
    STRING          reduce using rule 11 (VARZ -> empty .)
    FLOAT           reduce using rule 11 (VARZ -> empty .)
    RETURN          reduce using rule 11 (VARZ -> empty .)
    END             reduce using rule 11 (VARZ -> empty .)
    ELSE            reduce using rule 11 (VARZ -> empty .)


state 34

    (45) PRINCIPAL -> DEFINE VOID MAIN . LPAR RPAR BLOQUE END

    LPAR            shift and go to state 51


state 35

    (87) VAR_FUN -> LPAR . VAR_FUNP RPAR
    (88) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT

    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    DATA_TIPOS                     shift and go to state 52
    VAR_FUNP                       shift and go to state 53

state 36

    (85) FUNCION -> DEFINE DATA_TIPOS ID VAR_FUN . BLOQUE RETURN EXP END
    (20) BLOQUE -> . ESTATUTO BLOQUEP
    (13) ESTATUTO -> . ASIGNACION
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (32) ASIGNACION -> . ID ASIGNACIONP
    (50) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (46) CICLO -> . WHILEF
    (47) CICLO -> . FORZ
    (86) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (73) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (48) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (49) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    ID              shift and go to state 67
    IF              shift and go to state 68
    DRAW            shift and go to state 11
    PRINT           shift and go to state 58
    WHILE           shift and go to state 57
    FOR             shift and go to state 61
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 54
    CICLO                          shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 59
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 55
    WHILEF                         shift and go to state 62
    DATA_TIPOS                     shift and go to state 14
    FORZ                           shift and go to state 63
    IMPRIMIR                       shift and go to state 65
    BLOQUE                         shift and go to state 66
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 69
    CONDICION                      shift and go to state 64

state 37

    (8) VART -> DRAW ID EQUAL NEW . DRAWI LPAR RPAR

    DRAWI           shift and go to state 70


state 38

    (38) ARRZ -> COMMA . ICTE

    ICTE            shift and go to state 71


state 39

    (37) ARR -> DATA_TIPOS LBRA ICTE ARRZ . RBRA

    RBRA            shift and go to state 72


state 40

    (39) ARRZ -> empty .

    RBRA            reduce using rule 39 (ARRZ -> empty .)


state 41

    (76) FAC -> LPAR . EXPRE RPAR
    (61) EXPRE -> . EXP EXPREZ
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    EXPRE                          shift and go to state 73
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 74
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 42

    (82) FACS -> empty .

    ICTE            reduce using rule 82 (FACS -> empty .)
    FCTE            reduce using rule 82 (FACS -> empty .)
    ID              reduce using rule 82 (FACS -> empty .)


state 43

    (81) FACS -> ASOP .

    ICTE            reduce using rule 81 (FACS -> ASOP .)
    FCTE            reduce using rule 81 (FACS -> ASOP .)
    ID              reduce using rule 81 (FACS -> ASOP .)


state 44

    (28) ASOP -> PLUS .

    ICTE            reduce using rule 28 (ASOP -> PLUS .)
    FCTE            reduce using rule 28 (ASOP -> PLUS .)
    ID              reduce using rule 28 (ASOP -> PLUS .)
    LPAR            reduce using rule 28 (ASOP -> PLUS .)
    PLUS            reduce using rule 28 (ASOP -> PLUS .)
    MINUS           reduce using rule 28 (ASOP -> PLUS .)


state 45

    (64) EXP -> TERMINO . EXP_W_SIGN
    (65) EXP_W_SIGN -> . ASOP EXP
    (66) EXP_W_SIGN -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    DEFINE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)

    ASOP                           shift and go to state 75
    empty                          shift and go to state 77
    EXP_W_SIGN                     shift and go to state 76

state 46

    (12) VARZ -> EQUAL EXP .

    DEFINE          reduce using rule 12 (VARZ -> EQUAL EXP .)
    ID              reduce using rule 12 (VARZ -> EQUAL EXP .)
    IF              reduce using rule 12 (VARZ -> EQUAL EXP .)
    DRAW            reduce using rule 12 (VARZ -> EQUAL EXP .)
    PRINT           reduce using rule 12 (VARZ -> EQUAL EXP .)
    WHILE           reduce using rule 12 (VARZ -> EQUAL EXP .)
    FOR             reduce using rule 12 (VARZ -> EQUAL EXP .)
    INT             reduce using rule 12 (VARZ -> EQUAL EXP .)
    BOOLEAN         reduce using rule 12 (VARZ -> EQUAL EXP .)
    CHAR            reduce using rule 12 (VARZ -> EQUAL EXP .)
    STRING          reduce using rule 12 (VARZ -> EQUAL EXP .)
    FLOAT           reduce using rule 12 (VARZ -> EQUAL EXP .)
    RETURN          reduce using rule 12 (VARZ -> EQUAL EXP .)
    END             reduce using rule 12 (VARZ -> EQUAL EXP .)
    ELSE            reduce using rule 12 (VARZ -> EQUAL EXP .)


state 47

    (77) FAC -> FACS . VAR_CTE
    (70) VAR_CTE -> . ICTE
    (71) VAR_CTE -> . FCTE
    (72) VAR_CTE -> . LLAMADA_FUNCION
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR

    ICTE            shift and go to state 81
    FCTE            shift and go to state 80
    ID              shift and go to state 82

    LLAMADA_FUNCION                shift and go to state 78
    VAR_CTE                        shift and go to state 79

state 48

    (67) TERMINO -> FAC . TERMINO_W_SIGN
    (68) TERMINO_W_SIGN -> . MDOP TERMINO
    (69) TERMINO_W_SIGN -> . empty
    (30) MDOP -> . MULT
    (31) MDOP -> . DIVI
    (1) empty -> .

    MULT            shift and go to state 86
    DIVI            shift and go to state 83
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    DEFINE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 87
    MDOP                           shift and go to state 84
    TERMINO_W_SIGN                 shift and go to state 85

state 49

    (29) ASOP -> MINUS .

    ICTE            reduce using rule 29 (ASOP -> MINUS .)
    FCTE            reduce using rule 29 (ASOP -> MINUS .)
    ID              reduce using rule 29 (ASOP -> MINUS .)
    LPAR            reduce using rule 29 (ASOP -> MINUS .)
    PLUS            reduce using rule 29 (ASOP -> MINUS .)
    MINUS           reduce using rule 29 (ASOP -> MINUS .)


state 50

    (78) FAC -> ID . FACT
    (79) FACT -> . LBRA EXP FACZ RBRA
    (80) FACT -> . empty
    (1) empty -> .

    LBRA            shift and go to state 88
    MULT            reduce using rule 1 (empty -> .)
    DIVI            reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    DEFINE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    LESSTH          reduce using rule 1 (empty -> .)
    GREATERTH       reduce using rule 1 (empty -> .)
    SEQUAL          reduce using rule 1 (empty -> .)
    NOTEQ           reduce using rule 1 (empty -> .)
    LESSEQTH        reduce using rule 1 (empty -> .)
    GREATEREQTH     reduce using rule 1 (empty -> .)
    RPAR            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 89
    FACT                           shift and go to state 90

state 51

    (45) PRINCIPAL -> DEFINE VOID MAIN LPAR . RPAR BLOQUE END

    RPAR            shift and go to state 91


state 52

    (88) VAR_FUNP -> DATA_TIPOS . ID VAR_FUNZ

    ID              shift and go to state 92


state 53

    (87) VAR_FUN -> LPAR VAR_FUNP . RPAR

    RPAR            shift and go to state 93


state 54

    (17) ESTATUTO -> VART .

    ID              reduce using rule 17 (ESTATUTO -> VART .)
    IF              reduce using rule 17 (ESTATUTO -> VART .)
    DRAW            reduce using rule 17 (ESTATUTO -> VART .)
    PRINT           reduce using rule 17 (ESTATUTO -> VART .)
    WHILE           reduce using rule 17 (ESTATUTO -> VART .)
    FOR             reduce using rule 17 (ESTATUTO -> VART .)
    INT             reduce using rule 17 (ESTATUTO -> VART .)
    BOOLEAN         reduce using rule 17 (ESTATUTO -> VART .)
    CHAR            reduce using rule 17 (ESTATUTO -> VART .)
    STRING          reduce using rule 17 (ESTATUTO -> VART .)
    FLOAT           reduce using rule 17 (ESTATUTO -> VART .)
    END             reduce using rule 17 (ESTATUTO -> VART .)
    ELSE            reduce using rule 17 (ESTATUTO -> VART .)
    RETURN          reduce using rule 17 (ESTATUTO -> VART .)


state 55

    (20) BLOQUE -> ESTATUTO . BLOQUEP
    (21) BLOQUEP -> . BLOQUE
    (22) BLOQUEP -> . empty
    (20) BLOQUE -> . ESTATUTO BLOQUEP
    (1) empty -> .
    (13) ESTATUTO -> . ASIGNACION
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (32) ASIGNACION -> . ID ASIGNACIONP
    (50) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (46) CICLO -> . WHILEF
    (47) CICLO -> . FORZ
    (86) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (73) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (48) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (49) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    RETURN          reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    ID              shift and go to state 67
    IF              shift and go to state 68
    DRAW            shift and go to state 11
    PRINT           shift and go to state 58
    WHILE           shift and go to state 57
    FOR             shift and go to state 61
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 54
    CICLO                          shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 59
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 55
    empty                          shift and go to state 94
    BLOQUEP                        shift and go to state 95
    WHILEF                         shift and go to state 62
    DATA_TIPOS                     shift and go to state 14
    FORZ                           shift and go to state 63
    IMPRIMIR                       shift and go to state 65
    BLOQUE                         shift and go to state 96
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 69
    CONDICION                      shift and go to state 64

state 56

    (15) ESTATUTO -> CICLO .

    ID              reduce using rule 15 (ESTATUTO -> CICLO .)
    IF              reduce using rule 15 (ESTATUTO -> CICLO .)
    DRAW            reduce using rule 15 (ESTATUTO -> CICLO .)
    PRINT           reduce using rule 15 (ESTATUTO -> CICLO .)
    WHILE           reduce using rule 15 (ESTATUTO -> CICLO .)
    FOR             reduce using rule 15 (ESTATUTO -> CICLO .)
    INT             reduce using rule 15 (ESTATUTO -> CICLO .)
    BOOLEAN         reduce using rule 15 (ESTATUTO -> CICLO .)
    CHAR            reduce using rule 15 (ESTATUTO -> CICLO .)
    STRING          reduce using rule 15 (ESTATUTO -> CICLO .)
    FLOAT           reduce using rule 15 (ESTATUTO -> CICLO .)
    END             reduce using rule 15 (ESTATUTO -> CICLO .)
    ELSE            reduce using rule 15 (ESTATUTO -> CICLO .)
    RETURN          reduce using rule 15 (ESTATUTO -> CICLO .)


state 57

    (48) WHILEF -> WHILE . LPAR EXPRE RPAR BLOQUE END

    LPAR            shift and go to state 97


state 58

    (73) IMPRIMIR -> PRINT . LBRA IMPRIMIRZ RBRA

    LBRA            shift and go to state 98


state 59

    (18) ESTATUTO -> LLAMADA_FUNCION .

    ID              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    IF              reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    DRAW            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    PRINT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    WHILE           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FOR             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    INT             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    BOOLEAN         reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    CHAR            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    STRING          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    FLOAT           reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    END             reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    ELSE            reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)
    RETURN          reduce using rule 18 (ESTATUTO -> LLAMADA_FUNCION .)


state 60

    (13) ESTATUTO -> ASIGNACION .

    ID              reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    IF              reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    DRAW            reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    PRINT           reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    WHILE           reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    FOR             reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    INT             reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    BOOLEAN         reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    CHAR            reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    STRING          reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    FLOAT           reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    END             reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    ELSE            reduce using rule 13 (ESTATUTO -> ASIGNACION .)
    RETURN          reduce using rule 13 (ESTATUTO -> ASIGNACION .)


state 61

    (49) FORZ -> FOR . LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    LPAR            shift and go to state 99


state 62

    (46) CICLO -> WHILEF .

    ID              reduce using rule 46 (CICLO -> WHILEF .)
    IF              reduce using rule 46 (CICLO -> WHILEF .)
    DRAW            reduce using rule 46 (CICLO -> WHILEF .)
    PRINT           reduce using rule 46 (CICLO -> WHILEF .)
    WHILE           reduce using rule 46 (CICLO -> WHILEF .)
    FOR             reduce using rule 46 (CICLO -> WHILEF .)
    INT             reduce using rule 46 (CICLO -> WHILEF .)
    BOOLEAN         reduce using rule 46 (CICLO -> WHILEF .)
    CHAR            reduce using rule 46 (CICLO -> WHILEF .)
    STRING          reduce using rule 46 (CICLO -> WHILEF .)
    FLOAT           reduce using rule 46 (CICLO -> WHILEF .)
    RETURN          reduce using rule 46 (CICLO -> WHILEF .)
    END             reduce using rule 46 (CICLO -> WHILEF .)
    ELSE            reduce using rule 46 (CICLO -> WHILEF .)


state 63

    (47) CICLO -> FORZ .

    ID              reduce using rule 47 (CICLO -> FORZ .)
    IF              reduce using rule 47 (CICLO -> FORZ .)
    DRAW            reduce using rule 47 (CICLO -> FORZ .)
    PRINT           reduce using rule 47 (CICLO -> FORZ .)
    WHILE           reduce using rule 47 (CICLO -> FORZ .)
    FOR             reduce using rule 47 (CICLO -> FORZ .)
    INT             reduce using rule 47 (CICLO -> FORZ .)
    BOOLEAN         reduce using rule 47 (CICLO -> FORZ .)
    CHAR            reduce using rule 47 (CICLO -> FORZ .)
    STRING          reduce using rule 47 (CICLO -> FORZ .)
    FLOAT           reduce using rule 47 (CICLO -> FORZ .)
    RETURN          reduce using rule 47 (CICLO -> FORZ .)
    END             reduce using rule 47 (CICLO -> FORZ .)
    ELSE            reduce using rule 47 (CICLO -> FORZ .)


state 64

    (14) ESTATUTO -> CONDICION .

    ID              reduce using rule 14 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 14 (ESTATUTO -> CONDICION .)
    DRAW            reduce using rule 14 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 14 (ESTATUTO -> CONDICION .)
    INT             reduce using rule 14 (ESTATUTO -> CONDICION .)
    BOOLEAN         reduce using rule 14 (ESTATUTO -> CONDICION .)
    CHAR            reduce using rule 14 (ESTATUTO -> CONDICION .)
    STRING          reduce using rule 14 (ESTATUTO -> CONDICION .)
    FLOAT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    END             reduce using rule 14 (ESTATUTO -> CONDICION .)
    ELSE            reduce using rule 14 (ESTATUTO -> CONDICION .)
    RETURN          reduce using rule 14 (ESTATUTO -> CONDICION .)


state 65

    (19) ESTATUTO -> IMPRIMIR .

    ID              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    IF              reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    DRAW            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    PRINT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    WHILE           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FOR             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    INT             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    BOOLEAN         reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    CHAR            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    STRING          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    FLOAT           reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    END             reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    ELSE            reduce using rule 19 (ESTATUTO -> IMPRIMIR .)
    RETURN          reduce using rule 19 (ESTATUTO -> IMPRIMIR .)


state 66

    (85) FUNCION -> DEFINE DATA_TIPOS ID VAR_FUN BLOQUE . RETURN EXP END

    RETURN          shift and go to state 100


state 67

    (32) ASIGNACION -> ID . ASIGNACIONP
    (86) ACCION -> ID . POINT DIBUJA LPAR VAR_CTE RPAR
    (40) LLAMADA_FUNCION -> ID . LPAR LLAMADA_FUNCIONP RPAR
    (33) ASIGNACIONP -> . EQUAL EXPRE
    (34) ASIGNACIONP -> . LBRA ICTE ASIGNACIONZ RBRA

    POINT           shift and go to state 103
    LPAR            shift and go to state 101
    EQUAL           shift and go to state 104
    LBRA            shift and go to state 102

    ASIGNACIONP                    shift and go to state 105

state 68

    (50) CONDICION -> IF . LPAR EXPRE RPAR BLOQUE CONDICIONP END

    LPAR            shift and go to state 106


state 69

    (16) ESTATUTO -> ACCION .

    ID              reduce using rule 16 (ESTATUTO -> ACCION .)
    IF              reduce using rule 16 (ESTATUTO -> ACCION .)
    DRAW            reduce using rule 16 (ESTATUTO -> ACCION .)
    PRINT           reduce using rule 16 (ESTATUTO -> ACCION .)
    WHILE           reduce using rule 16 (ESTATUTO -> ACCION .)
    FOR             reduce using rule 16 (ESTATUTO -> ACCION .)
    INT             reduce using rule 16 (ESTATUTO -> ACCION .)
    BOOLEAN         reduce using rule 16 (ESTATUTO -> ACCION .)
    CHAR            reduce using rule 16 (ESTATUTO -> ACCION .)
    STRING          reduce using rule 16 (ESTATUTO -> ACCION .)
    FLOAT           reduce using rule 16 (ESTATUTO -> ACCION .)
    END             reduce using rule 16 (ESTATUTO -> ACCION .)
    ELSE            reduce using rule 16 (ESTATUTO -> ACCION .)
    RETURN          reduce using rule 16 (ESTATUTO -> ACCION .)


state 70

    (8) VART -> DRAW ID EQUAL NEW DRAWI . LPAR RPAR

    LPAR            shift and go to state 107


state 71

    (38) ARRZ -> COMMA ICTE .

    RBRA            reduce using rule 38 (ARRZ -> COMMA ICTE .)


state 72

    (37) ARR -> DATA_TIPOS LBRA ICTE ARRZ RBRA .

    ID              reduce using rule 37 (ARR -> DATA_TIPOS LBRA ICTE ARRZ RBRA .)


state 73

    (76) FAC -> LPAR EXPRE . RPAR

    RPAR            shift and go to state 108


state 74

    (61) EXPRE -> EXP . EXPREZ
    (62) EXPREZ -> . RELOP EXP
    (63) EXPREZ -> . empty
    (55) RELOP -> . LESSTH
    (56) RELOP -> . GREATERTH
    (57) RELOP -> . SEQUAL
    (58) RELOP -> . NOTEQ
    (59) RELOP -> . LESSEQTH
    (60) RELOP -> . GREATEREQTH
    (1) empty -> .

    LESSTH          shift and go to state 115
    GREATERTH       shift and go to state 114
    SEQUAL          shift and go to state 111
    NOTEQ           shift and go to state 112
    LESSEQTH        shift and go to state 109
    GREATEREQTH     shift and go to state 113
    RPAR            reduce using rule 1 (empty -> .)
    RBRA            reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    DRAW            reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    INT             reduce using rule 1 (empty -> .)
    BOOLEAN         reduce using rule 1 (empty -> .)
    CHAR            reduce using rule 1 (empty -> .)
    STRING          reduce using rule 1 (empty -> .)
    FLOAT           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    EXPREZ                         shift and go to state 116
    empty                          shift and go to state 117
    RELOP                          shift and go to state 110

state 75

    (65) EXP_W_SIGN -> ASOP . EXP
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    ASOP                           shift and go to state 43
    empty                          shift and go to state 42
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 118
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 76

    (64) EXP -> TERMINO EXP_W_SIGN .

    RBRA            reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    DEFINE          reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    ID              reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    IF              reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    DRAW            reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    PRINT           reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    WHILE           reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    FOR             reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    INT             reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    BOOLEAN         reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    CHAR            reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    STRING          reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    FLOAT           reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    RETURN          reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    END             reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    ELSE            reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    LESSTH          reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    GREATERTH       reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    SEQUAL          reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    NOTEQ           reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    LESSEQTH        reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    GREATEREQTH     reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    COMMA           reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)
    RPAR            reduce using rule 64 (EXP -> TERMINO EXP_W_SIGN .)


state 77

    (66) EXP_W_SIGN -> empty .

    DEFINE          reduce using rule 66 (EXP_W_SIGN -> empty .)
    ID              reduce using rule 66 (EXP_W_SIGN -> empty .)
    IF              reduce using rule 66 (EXP_W_SIGN -> empty .)
    DRAW            reduce using rule 66 (EXP_W_SIGN -> empty .)
    PRINT           reduce using rule 66 (EXP_W_SIGN -> empty .)
    WHILE           reduce using rule 66 (EXP_W_SIGN -> empty .)
    FOR             reduce using rule 66 (EXP_W_SIGN -> empty .)
    INT             reduce using rule 66 (EXP_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 66 (EXP_W_SIGN -> empty .)
    CHAR            reduce using rule 66 (EXP_W_SIGN -> empty .)
    STRING          reduce using rule 66 (EXP_W_SIGN -> empty .)
    FLOAT           reduce using rule 66 (EXP_W_SIGN -> empty .)
    RETURN          reduce using rule 66 (EXP_W_SIGN -> empty .)
    END             reduce using rule 66 (EXP_W_SIGN -> empty .)
    ELSE            reduce using rule 66 (EXP_W_SIGN -> empty .)
    LESSTH          reduce using rule 66 (EXP_W_SIGN -> empty .)
    GREATERTH       reduce using rule 66 (EXP_W_SIGN -> empty .)
    SEQUAL          reduce using rule 66 (EXP_W_SIGN -> empty .)
    NOTEQ           reduce using rule 66 (EXP_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 66 (EXP_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 66 (EXP_W_SIGN -> empty .)
    RPAR            reduce using rule 66 (EXP_W_SIGN -> empty .)
    COMMA           reduce using rule 66 (EXP_W_SIGN -> empty .)
    RBRA            reduce using rule 66 (EXP_W_SIGN -> empty .)


state 78

    (72) VAR_CTE -> LLAMADA_FUNCION .

    RPAR            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    MULT            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    DIVI            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    PLUS            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    MINUS           reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    DEFINE          reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    ID              reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    IF              reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    DRAW            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    PRINT           reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    WHILE           reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    FOR             reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    INT             reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    BOOLEAN         reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    CHAR            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    STRING          reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    FLOAT           reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    RETURN          reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    END             reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    ELSE            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    LESSTH          reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    GREATERTH       reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    SEQUAL          reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    NOTEQ           reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    LESSEQTH        reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    GREATEREQTH     reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    COMMA           reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)
    RBRA            reduce using rule 72 (VAR_CTE -> LLAMADA_FUNCION .)


state 79

    (77) FAC -> FACS VAR_CTE .

    MULT            reduce using rule 77 (FAC -> FACS VAR_CTE .)
    DIVI            reduce using rule 77 (FAC -> FACS VAR_CTE .)
    PLUS            reduce using rule 77 (FAC -> FACS VAR_CTE .)
    MINUS           reduce using rule 77 (FAC -> FACS VAR_CTE .)
    LESSTH          reduce using rule 77 (FAC -> FACS VAR_CTE .)
    GREATERTH       reduce using rule 77 (FAC -> FACS VAR_CTE .)
    SEQUAL          reduce using rule 77 (FAC -> FACS VAR_CTE .)
    NOTEQ           reduce using rule 77 (FAC -> FACS VAR_CTE .)
    LESSEQTH        reduce using rule 77 (FAC -> FACS VAR_CTE .)
    GREATEREQTH     reduce using rule 77 (FAC -> FACS VAR_CTE .)
    ID              reduce using rule 77 (FAC -> FACS VAR_CTE .)
    IF              reduce using rule 77 (FAC -> FACS VAR_CTE .)
    DRAW            reduce using rule 77 (FAC -> FACS VAR_CTE .)
    PRINT           reduce using rule 77 (FAC -> FACS VAR_CTE .)
    WHILE           reduce using rule 77 (FAC -> FACS VAR_CTE .)
    FOR             reduce using rule 77 (FAC -> FACS VAR_CTE .)
    INT             reduce using rule 77 (FAC -> FACS VAR_CTE .)
    BOOLEAN         reduce using rule 77 (FAC -> FACS VAR_CTE .)
    CHAR            reduce using rule 77 (FAC -> FACS VAR_CTE .)
    STRING          reduce using rule 77 (FAC -> FACS VAR_CTE .)
    FLOAT           reduce using rule 77 (FAC -> FACS VAR_CTE .)
    RETURN          reduce using rule 77 (FAC -> FACS VAR_CTE .)
    END             reduce using rule 77 (FAC -> FACS VAR_CTE .)
    ELSE            reduce using rule 77 (FAC -> FACS VAR_CTE .)
    DEFINE          reduce using rule 77 (FAC -> FACS VAR_CTE .)
    RPAR            reduce using rule 77 (FAC -> FACS VAR_CTE .)
    COMMA           reduce using rule 77 (FAC -> FACS VAR_CTE .)
    RBRA            reduce using rule 77 (FAC -> FACS VAR_CTE .)


state 80

    (71) VAR_CTE -> FCTE .

    RPAR            reduce using rule 71 (VAR_CTE -> FCTE .)
    MULT            reduce using rule 71 (VAR_CTE -> FCTE .)
    DIVI            reduce using rule 71 (VAR_CTE -> FCTE .)
    PLUS            reduce using rule 71 (VAR_CTE -> FCTE .)
    MINUS           reduce using rule 71 (VAR_CTE -> FCTE .)
    DEFINE          reduce using rule 71 (VAR_CTE -> FCTE .)
    ID              reduce using rule 71 (VAR_CTE -> FCTE .)
    IF              reduce using rule 71 (VAR_CTE -> FCTE .)
    DRAW            reduce using rule 71 (VAR_CTE -> FCTE .)
    PRINT           reduce using rule 71 (VAR_CTE -> FCTE .)
    WHILE           reduce using rule 71 (VAR_CTE -> FCTE .)
    FOR             reduce using rule 71 (VAR_CTE -> FCTE .)
    INT             reduce using rule 71 (VAR_CTE -> FCTE .)
    BOOLEAN         reduce using rule 71 (VAR_CTE -> FCTE .)
    CHAR            reduce using rule 71 (VAR_CTE -> FCTE .)
    STRING          reduce using rule 71 (VAR_CTE -> FCTE .)
    FLOAT           reduce using rule 71 (VAR_CTE -> FCTE .)
    RETURN          reduce using rule 71 (VAR_CTE -> FCTE .)
    END             reduce using rule 71 (VAR_CTE -> FCTE .)
    ELSE            reduce using rule 71 (VAR_CTE -> FCTE .)
    LESSTH          reduce using rule 71 (VAR_CTE -> FCTE .)
    GREATERTH       reduce using rule 71 (VAR_CTE -> FCTE .)
    SEQUAL          reduce using rule 71 (VAR_CTE -> FCTE .)
    NOTEQ           reduce using rule 71 (VAR_CTE -> FCTE .)
    LESSEQTH        reduce using rule 71 (VAR_CTE -> FCTE .)
    GREATEREQTH     reduce using rule 71 (VAR_CTE -> FCTE .)
    COMMA           reduce using rule 71 (VAR_CTE -> FCTE .)
    RBRA            reduce using rule 71 (VAR_CTE -> FCTE .)


state 81

    (70) VAR_CTE -> ICTE .

    RPAR            reduce using rule 70 (VAR_CTE -> ICTE .)
    MULT            reduce using rule 70 (VAR_CTE -> ICTE .)
    DIVI            reduce using rule 70 (VAR_CTE -> ICTE .)
    PLUS            reduce using rule 70 (VAR_CTE -> ICTE .)
    MINUS           reduce using rule 70 (VAR_CTE -> ICTE .)
    DEFINE          reduce using rule 70 (VAR_CTE -> ICTE .)
    ID              reduce using rule 70 (VAR_CTE -> ICTE .)
    IF              reduce using rule 70 (VAR_CTE -> ICTE .)
    DRAW            reduce using rule 70 (VAR_CTE -> ICTE .)
    PRINT           reduce using rule 70 (VAR_CTE -> ICTE .)
    WHILE           reduce using rule 70 (VAR_CTE -> ICTE .)
    FOR             reduce using rule 70 (VAR_CTE -> ICTE .)
    INT             reduce using rule 70 (VAR_CTE -> ICTE .)
    BOOLEAN         reduce using rule 70 (VAR_CTE -> ICTE .)
    CHAR            reduce using rule 70 (VAR_CTE -> ICTE .)
    STRING          reduce using rule 70 (VAR_CTE -> ICTE .)
    FLOAT           reduce using rule 70 (VAR_CTE -> ICTE .)
    RETURN          reduce using rule 70 (VAR_CTE -> ICTE .)
    END             reduce using rule 70 (VAR_CTE -> ICTE .)
    ELSE            reduce using rule 70 (VAR_CTE -> ICTE .)
    LESSTH          reduce using rule 70 (VAR_CTE -> ICTE .)
    GREATERTH       reduce using rule 70 (VAR_CTE -> ICTE .)
    SEQUAL          reduce using rule 70 (VAR_CTE -> ICTE .)
    NOTEQ           reduce using rule 70 (VAR_CTE -> ICTE .)
    LESSEQTH        reduce using rule 70 (VAR_CTE -> ICTE .)
    GREATEREQTH     reduce using rule 70 (VAR_CTE -> ICTE .)
    COMMA           reduce using rule 70 (VAR_CTE -> ICTE .)
    RBRA            reduce using rule 70 (VAR_CTE -> ICTE .)


state 82

    (40) LLAMADA_FUNCION -> ID . LPAR LLAMADA_FUNCIONP RPAR

    LPAR            shift and go to state 101


state 83

    (31) MDOP -> DIVI .

    LPAR            reduce using rule 31 (MDOP -> DIVI .)
    ID              reduce using rule 31 (MDOP -> DIVI .)
    PLUS            reduce using rule 31 (MDOP -> DIVI .)
    MINUS           reduce using rule 31 (MDOP -> DIVI .)
    ICTE            reduce using rule 31 (MDOP -> DIVI .)
    FCTE            reduce using rule 31 (MDOP -> DIVI .)


state 84

    (68) TERMINO_W_SIGN -> MDOP . TERMINO
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    ASOP                           shift and go to state 43
    empty                          shift and go to state 42
    TERMINO                        shift and go to state 119
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 85

    (67) TERMINO -> FAC TERMINO_W_SIGN .

    PLUS            reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    MINUS           reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    LESSTH          reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    GREATERTH       reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    SEQUAL          reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    NOTEQ           reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    LESSEQTH        reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    GREATEREQTH     reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    RPAR            reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    COMMA           reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    RBRA            reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    ID              reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    IF              reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    DRAW            reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    PRINT           reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    WHILE           reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    FOR             reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    INT             reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    BOOLEAN         reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    CHAR            reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    STRING          reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    FLOAT           reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    RETURN          reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    END             reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    ELSE            reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)
    DEFINE          reduce using rule 67 (TERMINO -> FAC TERMINO_W_SIGN .)


state 86

    (30) MDOP -> MULT .

    LPAR            reduce using rule 30 (MDOP -> MULT .)
    ID              reduce using rule 30 (MDOP -> MULT .)
    PLUS            reduce using rule 30 (MDOP -> MULT .)
    MINUS           reduce using rule 30 (MDOP -> MULT .)
    ICTE            reduce using rule 30 (MDOP -> MULT .)
    FCTE            reduce using rule 30 (MDOP -> MULT .)


state 87

    (69) TERMINO_W_SIGN -> empty .

    PLUS            reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    MINUS           reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    DEFINE          reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    ID              reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    IF              reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    DRAW            reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    PRINT           reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    WHILE           reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    FOR             reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    INT             reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    BOOLEAN         reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    CHAR            reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    STRING          reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    FLOAT           reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    RETURN          reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    END             reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    ELSE            reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    LESSTH          reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    GREATERTH       reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    SEQUAL          reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    NOTEQ           reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    LESSEQTH        reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    GREATEREQTH     reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    RPAR            reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    COMMA           reduce using rule 69 (TERMINO_W_SIGN -> empty .)
    RBRA            reduce using rule 69 (TERMINO_W_SIGN -> empty .)


state 88

    (79) FACT -> LBRA . EXP FACZ RBRA
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 120
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 89

    (80) FACT -> empty .

    MULT            reduce using rule 80 (FACT -> empty .)
    DIVI            reduce using rule 80 (FACT -> empty .)
    PLUS            reduce using rule 80 (FACT -> empty .)
    MINUS           reduce using rule 80 (FACT -> empty .)
    DEFINE          reduce using rule 80 (FACT -> empty .)
    ID              reduce using rule 80 (FACT -> empty .)
    IF              reduce using rule 80 (FACT -> empty .)
    DRAW            reduce using rule 80 (FACT -> empty .)
    PRINT           reduce using rule 80 (FACT -> empty .)
    WHILE           reduce using rule 80 (FACT -> empty .)
    FOR             reduce using rule 80 (FACT -> empty .)
    INT             reduce using rule 80 (FACT -> empty .)
    BOOLEAN         reduce using rule 80 (FACT -> empty .)
    CHAR            reduce using rule 80 (FACT -> empty .)
    STRING          reduce using rule 80 (FACT -> empty .)
    FLOAT           reduce using rule 80 (FACT -> empty .)
    RETURN          reduce using rule 80 (FACT -> empty .)
    END             reduce using rule 80 (FACT -> empty .)
    ELSE            reduce using rule 80 (FACT -> empty .)
    LESSTH          reduce using rule 80 (FACT -> empty .)
    GREATERTH       reduce using rule 80 (FACT -> empty .)
    SEQUAL          reduce using rule 80 (FACT -> empty .)
    NOTEQ           reduce using rule 80 (FACT -> empty .)
    LESSEQTH        reduce using rule 80 (FACT -> empty .)
    GREATEREQTH     reduce using rule 80 (FACT -> empty .)
    RPAR            reduce using rule 80 (FACT -> empty .)
    COMMA           reduce using rule 80 (FACT -> empty .)
    RBRA            reduce using rule 80 (FACT -> empty .)


state 90

    (78) FAC -> ID FACT .

    MULT            reduce using rule 78 (FAC -> ID FACT .)
    DIVI            reduce using rule 78 (FAC -> ID FACT .)
    PLUS            reduce using rule 78 (FAC -> ID FACT .)
    MINUS           reduce using rule 78 (FAC -> ID FACT .)
    LESSTH          reduce using rule 78 (FAC -> ID FACT .)
    GREATERTH       reduce using rule 78 (FAC -> ID FACT .)
    SEQUAL          reduce using rule 78 (FAC -> ID FACT .)
    NOTEQ           reduce using rule 78 (FAC -> ID FACT .)
    LESSEQTH        reduce using rule 78 (FAC -> ID FACT .)
    GREATEREQTH     reduce using rule 78 (FAC -> ID FACT .)
    ID              reduce using rule 78 (FAC -> ID FACT .)
    IF              reduce using rule 78 (FAC -> ID FACT .)
    DRAW            reduce using rule 78 (FAC -> ID FACT .)
    PRINT           reduce using rule 78 (FAC -> ID FACT .)
    WHILE           reduce using rule 78 (FAC -> ID FACT .)
    FOR             reduce using rule 78 (FAC -> ID FACT .)
    INT             reduce using rule 78 (FAC -> ID FACT .)
    BOOLEAN         reduce using rule 78 (FAC -> ID FACT .)
    CHAR            reduce using rule 78 (FAC -> ID FACT .)
    STRING          reduce using rule 78 (FAC -> ID FACT .)
    FLOAT           reduce using rule 78 (FAC -> ID FACT .)
    RETURN          reduce using rule 78 (FAC -> ID FACT .)
    END             reduce using rule 78 (FAC -> ID FACT .)
    ELSE            reduce using rule 78 (FAC -> ID FACT .)
    DEFINE          reduce using rule 78 (FAC -> ID FACT .)
    RPAR            reduce using rule 78 (FAC -> ID FACT .)
    COMMA           reduce using rule 78 (FAC -> ID FACT .)
    RBRA            reduce using rule 78 (FAC -> ID FACT .)


state 91

    (45) PRINCIPAL -> DEFINE VOID MAIN LPAR RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUEP
    (13) ESTATUTO -> . ASIGNACION
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (32) ASIGNACION -> . ID ASIGNACIONP
    (50) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (46) CICLO -> . WHILEF
    (47) CICLO -> . FORZ
    (86) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (73) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (48) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (49) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    ID              shift and go to state 67
    IF              shift and go to state 68
    DRAW            shift and go to state 11
    PRINT           shift and go to state 58
    WHILE           shift and go to state 57
    FOR             shift and go to state 61
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 54
    CICLO                          shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 59
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 55
    WHILEF                         shift and go to state 62
    DATA_TIPOS                     shift and go to state 14
    FORZ                           shift and go to state 63
    IMPRIMIR                       shift and go to state 65
    BLOQUE                         shift and go to state 121
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 69
    CONDICION                      shift and go to state 64

state 92

    (88) VAR_FUNP -> DATA_TIPOS ID . VAR_FUNZ
    (89) VAR_FUNZ -> . COMMA VAR_FUNP
    (90) VAR_FUNZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 123
    RPAR            reduce using rule 1 (empty -> .)

    empty                          shift and go to state 124
    VAR_FUNZ                       shift and go to state 122

state 93

    (87) VAR_FUN -> LPAR VAR_FUNP RPAR .

    ID              reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    IF              reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    DRAW            reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    PRINT           reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    WHILE           reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FOR             reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    INT             reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    BOOLEAN         reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    CHAR            reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    STRING          reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)
    FLOAT           reduce using rule 87 (VAR_FUN -> LPAR VAR_FUNP RPAR .)


state 94

    (22) BLOQUEP -> empty .

    RETURN          reduce using rule 22 (BLOQUEP -> empty .)
    END             reduce using rule 22 (BLOQUEP -> empty .)
    ELSE            reduce using rule 22 (BLOQUEP -> empty .)


state 95

    (20) BLOQUE -> ESTATUTO BLOQUEP .

    END             reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUEP .)
    ELSE            reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUEP .)
    RETURN          reduce using rule 20 (BLOQUE -> ESTATUTO BLOQUEP .)


state 96

    (21) BLOQUEP -> BLOQUE .

    RETURN          reduce using rule 21 (BLOQUEP -> BLOQUE .)
    END             reduce using rule 21 (BLOQUEP -> BLOQUE .)
    ELSE            reduce using rule 21 (BLOQUEP -> BLOQUE .)


state 97

    (48) WHILEF -> WHILE LPAR . EXPRE RPAR BLOQUE END
    (61) EXPRE -> . EXP EXPREZ
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    EXPRE                          shift and go to state 125
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 74
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 98

    (73) IMPRIMIR -> PRINT LBRA . IMPRIMIRZ RBRA
    (74) IMPRIMIRZ -> . EXPRE
    (75) IMPRIMIRZ -> . SCTE
    (61) EXPRE -> . EXP EXPREZ
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    SCTE            shift and go to state 128
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    EXPRE                          shift and go to state 126
    ASOP                           shift and go to state 43
    IMPRIMIRZ                      shift and go to state 127
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 74
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 99

    (49) FORZ -> FOR LPAR . ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 129


state 100

    (85) FUNCION -> DEFINE DATA_TIPOS ID VAR_FUN BLOQUE RETURN . EXP END
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 130
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 101

    (40) LLAMADA_FUNCION -> ID LPAR . LLAMADA_FUNCIONP RPAR
    (41) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ
    (42) LLAMADA_FUNCIONP -> . empty
    (61) EXPRE -> . EXP EXPREZ
    (1) empty -> .
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS

  ! shift/reduce conflict for ID resolved as shift
    RPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49

  ! ID              [ reduce using rule 1 (empty -> .) ]

    EXPRE                          shift and go to state 131
    LLAMADA_FUNCIONP               shift and go to state 132
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 74
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48
    empty                          shift and go to state 133

state 102

    (34) ASIGNACIONP -> LBRA . ICTE ASIGNACIONZ RBRA

    ICTE            shift and go to state 134


state 103

    (86) ACCION -> ID POINT . DIBUJA LPAR VAR_CTE RPAR
    (91) DIBUJA -> . DEFINIRPOSICION
    (92) DIBUJA -> . DEFINIRCOLOR
    (93) DIBUJA -> . DERECHO
    (94) DIBUJA -> . REVERSA
    (95) DIBUJA -> . IZQUIERDA
    (96) DIBUJA -> . DERECHA
    (97) DIBUJA -> . VELOCIDAD
    (98) DIBUJA -> . BORRAR
    (99) DIBUJA -> . MOSTRAR
    (100) DIBUJA -> . OCULTAR
    (101) DIBUJA -> . CIRCULO
    (102) DIBUJA -> . DEFINIRX
    (103) DIBUJA -> . DEFINIRY
    (104) DIBUJA -> . ARCO
    (105) DIBUJA -> . GROSOR

    DEFINIRPOSICION shift and go to state 141
    DEFINIRCOLOR    shift and go to state 150
    DERECHO         shift and go to state 145
    REVERSA         shift and go to state 139
    IZQUIERDA       shift and go to state 143
    DERECHA         shift and go to state 135
    VELOCIDAD       shift and go to state 138
    BORRAR          shift and go to state 148
    MOSTRAR         shift and go to state 142
    OCULTAR         shift and go to state 140
    CIRCULO         shift and go to state 137
    DEFINIRX        shift and go to state 147
    DEFINIRY        shift and go to state 146
    ARCO            shift and go to state 136
    GROSOR          shift and go to state 149

    DIBUJA                         shift and go to state 144

state 104

    (33) ASIGNACIONP -> EQUAL . EXPRE
    (61) EXPRE -> . EXP EXPREZ
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    EXPRE                          shift and go to state 151
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 74
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 105

    (32) ASIGNACION -> ID ASIGNACIONP .

    ID              reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    IF              reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    DRAW            reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    PRINT           reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    WHILE           reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    FOR             reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    INT             reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    BOOLEAN         reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    CHAR            reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    STRING          reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    FLOAT           reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    RETURN          reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    END             reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)
    ELSE            reduce using rule 32 (ASIGNACION -> ID ASIGNACIONP .)


state 106

    (50) CONDICION -> IF LPAR . EXPRE RPAR BLOQUE CONDICIONP END
    (61) EXPRE -> . EXP EXPREZ
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    EXPRE                          shift and go to state 152
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 74
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 107

    (8) VART -> DRAW ID EQUAL NEW DRAWI LPAR . RPAR

    RPAR            shift and go to state 153


state 108

    (76) FAC -> LPAR EXPRE RPAR .

    MULT            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    DIVI            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    PLUS            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    MINUS           reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    LESSTH          reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    GREATERTH       reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    SEQUAL          reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    NOTEQ           reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    LESSEQTH        reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    GREATEREQTH     reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    ID              reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    IF              reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    DRAW            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    PRINT           reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    WHILE           reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    FOR             reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    INT             reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    BOOLEAN         reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    CHAR            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    STRING          reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    FLOAT           reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    RETURN          reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    END             reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    ELSE            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    DEFINE          reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    RPAR            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    COMMA           reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)
    RBRA            reduce using rule 76 (FAC -> LPAR EXPRE RPAR .)


state 109

    (59) RELOP -> LESSEQTH .

    LPAR            reduce using rule 59 (RELOP -> LESSEQTH .)
    ID              reduce using rule 59 (RELOP -> LESSEQTH .)
    PLUS            reduce using rule 59 (RELOP -> LESSEQTH .)
    MINUS           reduce using rule 59 (RELOP -> LESSEQTH .)
    ICTE            reduce using rule 59 (RELOP -> LESSEQTH .)
    FCTE            reduce using rule 59 (RELOP -> LESSEQTH .)


state 110

    (62) EXPREZ -> RELOP . EXP
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 154
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 111

    (57) RELOP -> SEQUAL .

    LPAR            reduce using rule 57 (RELOP -> SEQUAL .)
    ID              reduce using rule 57 (RELOP -> SEQUAL .)
    PLUS            reduce using rule 57 (RELOP -> SEQUAL .)
    MINUS           reduce using rule 57 (RELOP -> SEQUAL .)
    ICTE            reduce using rule 57 (RELOP -> SEQUAL .)
    FCTE            reduce using rule 57 (RELOP -> SEQUAL .)


state 112

    (58) RELOP -> NOTEQ .

    LPAR            reduce using rule 58 (RELOP -> NOTEQ .)
    ID              reduce using rule 58 (RELOP -> NOTEQ .)
    PLUS            reduce using rule 58 (RELOP -> NOTEQ .)
    MINUS           reduce using rule 58 (RELOP -> NOTEQ .)
    ICTE            reduce using rule 58 (RELOP -> NOTEQ .)
    FCTE            reduce using rule 58 (RELOP -> NOTEQ .)


state 113

    (60) RELOP -> GREATEREQTH .

    LPAR            reduce using rule 60 (RELOP -> GREATEREQTH .)
    ID              reduce using rule 60 (RELOP -> GREATEREQTH .)
    PLUS            reduce using rule 60 (RELOP -> GREATEREQTH .)
    MINUS           reduce using rule 60 (RELOP -> GREATEREQTH .)
    ICTE            reduce using rule 60 (RELOP -> GREATEREQTH .)
    FCTE            reduce using rule 60 (RELOP -> GREATEREQTH .)


state 114

    (56) RELOP -> GREATERTH .

    LPAR            reduce using rule 56 (RELOP -> GREATERTH .)
    ID              reduce using rule 56 (RELOP -> GREATERTH .)
    PLUS            reduce using rule 56 (RELOP -> GREATERTH .)
    MINUS           reduce using rule 56 (RELOP -> GREATERTH .)
    ICTE            reduce using rule 56 (RELOP -> GREATERTH .)
    FCTE            reduce using rule 56 (RELOP -> GREATERTH .)


state 115

    (55) RELOP -> LESSTH .

    LPAR            reduce using rule 55 (RELOP -> LESSTH .)
    ID              reduce using rule 55 (RELOP -> LESSTH .)
    PLUS            reduce using rule 55 (RELOP -> LESSTH .)
    MINUS           reduce using rule 55 (RELOP -> LESSTH .)
    ICTE            reduce using rule 55 (RELOP -> LESSTH .)
    FCTE            reduce using rule 55 (RELOP -> LESSTH .)


state 116

    (61) EXPRE -> EXP EXPREZ .

    RPAR            reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    COMMA           reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    ID              reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    IF              reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    DRAW            reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    PRINT           reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    WHILE           reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    FOR             reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    INT             reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    BOOLEAN         reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    CHAR            reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    STRING          reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    FLOAT           reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    RETURN          reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    END             reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    ELSE            reduce using rule 61 (EXPRE -> EXP EXPREZ .)
    RBRA            reduce using rule 61 (EXPRE -> EXP EXPREZ .)


state 117

    (63) EXPREZ -> empty .

    RPAR            reduce using rule 63 (EXPREZ -> empty .)
    RBRA            reduce using rule 63 (EXPREZ -> empty .)
    COMMA           reduce using rule 63 (EXPREZ -> empty .)
    ID              reduce using rule 63 (EXPREZ -> empty .)
    IF              reduce using rule 63 (EXPREZ -> empty .)
    DRAW            reduce using rule 63 (EXPREZ -> empty .)
    PRINT           reduce using rule 63 (EXPREZ -> empty .)
    WHILE           reduce using rule 63 (EXPREZ -> empty .)
    FOR             reduce using rule 63 (EXPREZ -> empty .)
    INT             reduce using rule 63 (EXPREZ -> empty .)
    BOOLEAN         reduce using rule 63 (EXPREZ -> empty .)
    CHAR            reduce using rule 63 (EXPREZ -> empty .)
    STRING          reduce using rule 63 (EXPREZ -> empty .)
    FLOAT           reduce using rule 63 (EXPREZ -> empty .)
    RETURN          reduce using rule 63 (EXPREZ -> empty .)
    END             reduce using rule 63 (EXPREZ -> empty .)
    ELSE            reduce using rule 63 (EXPREZ -> empty .)


state 118

    (65) EXP_W_SIGN -> ASOP EXP .

    DEFINE          reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    ID              reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    IF              reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    DRAW            reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    PRINT           reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    WHILE           reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    FOR             reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    INT             reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    BOOLEAN         reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    CHAR            reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    STRING          reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    FLOAT           reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    RETURN          reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    END             reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    ELSE            reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    LESSTH          reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    GREATERTH       reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    SEQUAL          reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    NOTEQ           reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    LESSEQTH        reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    GREATEREQTH     reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    RPAR            reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    COMMA           reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)
    RBRA            reduce using rule 65 (EXP_W_SIGN -> ASOP EXP .)


state 119

    (68) TERMINO_W_SIGN -> MDOP TERMINO .

    PLUS            reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    MINUS           reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    DEFINE          reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    ID              reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    IF              reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    DRAW            reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    PRINT           reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    WHILE           reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    FOR             reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    INT             reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    BOOLEAN         reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    CHAR            reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    STRING          reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    FLOAT           reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    RETURN          reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    END             reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    ELSE            reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    LESSTH          reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    GREATERTH       reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    SEQUAL          reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    NOTEQ           reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    LESSEQTH        reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    GREATEREQTH     reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    RPAR            reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    COMMA           reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)
    RBRA            reduce using rule 68 (TERMINO_W_SIGN -> MDOP TERMINO .)


state 120

    (79) FACT -> LBRA EXP . FACZ RBRA
    (83) FACZ -> . COMMA EXP
    (84) FACZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 156
    RBRA            reduce using rule 1 (empty -> .)

    FACZ                           shift and go to state 155
    empty                          shift and go to state 157

state 121

    (45) PRINCIPAL -> DEFINE VOID MAIN LPAR RPAR BLOQUE . END

    END             shift and go to state 158


state 122

    (88) VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .

    RPAR            reduce using rule 88 (VAR_FUNP -> DATA_TIPOS ID VAR_FUNZ .)


state 123

    (89) VAR_FUNZ -> COMMA . VAR_FUNP
    (88) VAR_FUNP -> . DATA_TIPOS ID VAR_FUNZ
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT

    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    DATA_TIPOS                     shift and go to state 52
    VAR_FUNP                       shift and go to state 159

state 124

    (90) VAR_FUNZ -> empty .

    RPAR            reduce using rule 90 (VAR_FUNZ -> empty .)


state 125

    (48) WHILEF -> WHILE LPAR EXPRE . RPAR BLOQUE END

    RPAR            shift and go to state 160


state 126

    (74) IMPRIMIRZ -> EXPRE .

    RBRA            reduce using rule 74 (IMPRIMIRZ -> EXPRE .)


state 127

    (73) IMPRIMIR -> PRINT LBRA IMPRIMIRZ . RBRA

    RBRA            shift and go to state 161


state 128

    (75) IMPRIMIRZ -> SCTE .

    RBRA            reduce using rule 75 (IMPRIMIRZ -> SCTE .)


state 129

    (49) FORZ -> FOR LPAR ICTE . COMMA ICTE COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 162


state 130

    (85) FUNCION -> DEFINE DATA_TIPOS ID VAR_FUN BLOQUE RETURN EXP . END

    END             shift and go to state 163


state 131

    (41) LLAMADA_FUNCIONP -> EXPRE . LLAMADA_FUNCIONZ
    (43) LLAMADA_FUNCIONZ -> . COMMA LLAMADA_FUNCIONP
    (44) LLAMADA_FUNCIONZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 165
    RPAR            reduce using rule 1 (empty -> .)

    LLAMADA_FUNCIONZ               shift and go to state 164
    empty                          shift and go to state 166

state 132

    (40) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP . RPAR

    RPAR            shift and go to state 167


state 133

    (42) LLAMADA_FUNCIONP -> empty .
    (82) FACS -> empty .

    RPAR            reduce using rule 42 (LLAMADA_FUNCIONP -> empty .)
    ICTE            reduce using rule 82 (FACS -> empty .)
    FCTE            reduce using rule 82 (FACS -> empty .)
    ID              reduce using rule 82 (FACS -> empty .)


state 134

    (34) ASIGNACIONP -> LBRA ICTE . ASIGNACIONZ RBRA
    (35) ASIGNACIONZ -> . COMMA ICTE
    (36) ASIGNACIONZ -> . empty
    (1) empty -> .

    COMMA           shift and go to state 168
    RBRA            reduce using rule 1 (empty -> .)

    ASIGNACIONZ                    shift and go to state 169
    empty                          shift and go to state 170

state 135

    (96) DIBUJA -> DERECHA .

    LPAR            reduce using rule 96 (DIBUJA -> DERECHA .)


state 136

    (104) DIBUJA -> ARCO .

    LPAR            reduce using rule 104 (DIBUJA -> ARCO .)


state 137

    (101) DIBUJA -> CIRCULO .

    LPAR            reduce using rule 101 (DIBUJA -> CIRCULO .)


state 138

    (97) DIBUJA -> VELOCIDAD .

    LPAR            reduce using rule 97 (DIBUJA -> VELOCIDAD .)


state 139

    (94) DIBUJA -> REVERSA .

    LPAR            reduce using rule 94 (DIBUJA -> REVERSA .)


state 140

    (100) DIBUJA -> OCULTAR .

    LPAR            reduce using rule 100 (DIBUJA -> OCULTAR .)


state 141

    (91) DIBUJA -> DEFINIRPOSICION .

    LPAR            reduce using rule 91 (DIBUJA -> DEFINIRPOSICION .)


state 142

    (99) DIBUJA -> MOSTRAR .

    LPAR            reduce using rule 99 (DIBUJA -> MOSTRAR .)


state 143

    (95) DIBUJA -> IZQUIERDA .

    LPAR            reduce using rule 95 (DIBUJA -> IZQUIERDA .)


state 144

    (86) ACCION -> ID POINT DIBUJA . LPAR VAR_CTE RPAR

    LPAR            shift and go to state 171


state 145

    (93) DIBUJA -> DERECHO .

    LPAR            reduce using rule 93 (DIBUJA -> DERECHO .)


state 146

    (103) DIBUJA -> DEFINIRY .

    LPAR            reduce using rule 103 (DIBUJA -> DEFINIRY .)


state 147

    (102) DIBUJA -> DEFINIRX .

    LPAR            reduce using rule 102 (DIBUJA -> DEFINIRX .)


state 148

    (98) DIBUJA -> BORRAR .

    LPAR            reduce using rule 98 (DIBUJA -> BORRAR .)


state 149

    (105) DIBUJA -> GROSOR .

    LPAR            reduce using rule 105 (DIBUJA -> GROSOR .)


state 150

    (92) DIBUJA -> DEFINIRCOLOR .

    LPAR            reduce using rule 92 (DIBUJA -> DEFINIRCOLOR .)


state 151

    (33) ASIGNACIONP -> EQUAL EXPRE .

    ID              reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    IF              reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    DRAW            reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    PRINT           reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    WHILE           reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    FOR             reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    INT             reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    BOOLEAN         reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    CHAR            reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    STRING          reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    FLOAT           reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    RETURN          reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    END             reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)
    ELSE            reduce using rule 33 (ASIGNACIONP -> EQUAL EXPRE .)


state 152

    (50) CONDICION -> IF LPAR EXPRE . RPAR BLOQUE CONDICIONP END

    RPAR            shift and go to state 172


state 153

    (8) VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .

    ID              reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    IF              reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    DRAW            reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    PRINT           reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    WHILE           reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    FOR             reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    INT             reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    BOOLEAN         reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    CHAR            reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    STRING          reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    FLOAT           reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    END             reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    ELSE            reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    RETURN          reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)
    DEFINE          reduce using rule 8 (VART -> DRAW ID EQUAL NEW DRAWI LPAR RPAR .)


state 154

    (62) EXPREZ -> RELOP EXP .

    RPAR            reduce using rule 62 (EXPREZ -> RELOP EXP .)
    RBRA            reduce using rule 62 (EXPREZ -> RELOP EXP .)
    COMMA           reduce using rule 62 (EXPREZ -> RELOP EXP .)
    ID              reduce using rule 62 (EXPREZ -> RELOP EXP .)
    IF              reduce using rule 62 (EXPREZ -> RELOP EXP .)
    DRAW            reduce using rule 62 (EXPREZ -> RELOP EXP .)
    PRINT           reduce using rule 62 (EXPREZ -> RELOP EXP .)
    WHILE           reduce using rule 62 (EXPREZ -> RELOP EXP .)
    FOR             reduce using rule 62 (EXPREZ -> RELOP EXP .)
    INT             reduce using rule 62 (EXPREZ -> RELOP EXP .)
    BOOLEAN         reduce using rule 62 (EXPREZ -> RELOP EXP .)
    CHAR            reduce using rule 62 (EXPREZ -> RELOP EXP .)
    STRING          reduce using rule 62 (EXPREZ -> RELOP EXP .)
    FLOAT           reduce using rule 62 (EXPREZ -> RELOP EXP .)
    RETURN          reduce using rule 62 (EXPREZ -> RELOP EXP .)
    END             reduce using rule 62 (EXPREZ -> RELOP EXP .)
    ELSE            reduce using rule 62 (EXPREZ -> RELOP EXP .)


state 155

    (79) FACT -> LBRA EXP FACZ . RBRA

    RBRA            shift and go to state 173


state 156

    (83) FACZ -> COMMA . EXP
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS
    (1) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)

  ! ID              [ reduce using rule 1 (empty -> .) ]

    empty                          shift and go to state 42
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 174
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48

state 157

    (84) FACZ -> empty .

    RBRA            reduce using rule 84 (FACZ -> empty .)


state 158

    (45) PRINCIPAL -> DEFINE VOID MAIN LPAR RPAR BLOQUE END .

    $end            reduce using rule 45 (PRINCIPAL -> DEFINE VOID MAIN LPAR RPAR BLOQUE END .)


state 159

    (89) VAR_FUNZ -> COMMA VAR_FUNP .

    RPAR            reduce using rule 89 (VAR_FUNZ -> COMMA VAR_FUNP .)


state 160

    (48) WHILEF -> WHILE LPAR EXPRE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUEP
    (13) ESTATUTO -> . ASIGNACION
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (32) ASIGNACION -> . ID ASIGNACIONP
    (50) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (46) CICLO -> . WHILEF
    (47) CICLO -> . FORZ
    (86) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (73) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (48) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (49) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    ID              shift and go to state 67
    IF              shift and go to state 68
    DRAW            shift and go to state 11
    PRINT           shift and go to state 58
    WHILE           shift and go to state 57
    FOR             shift and go to state 61
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 54
    CICLO                          shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 59
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 55
    WHILEF                         shift and go to state 62
    DATA_TIPOS                     shift and go to state 14
    FORZ                           shift and go to state 63
    IMPRIMIR                       shift and go to state 65
    BLOQUE                         shift and go to state 175
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 69
    CONDICION                      shift and go to state 64

state 161

    (73) IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .

    ID              reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    IF              reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    DRAW            reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    PRINT           reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    WHILE           reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FOR             reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    INT             reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    BOOLEAN         reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    CHAR            reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    STRING          reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    FLOAT           reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    RETURN          reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    END             reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)
    ELSE            reduce using rule 73 (IMPRIMIR -> PRINT LBRA IMPRIMIRZ RBRA .)


state 162

    (49) FORZ -> FOR LPAR ICTE COMMA . ICTE COMMA ICTE RPAR BLOQUE END

    ICTE            shift and go to state 176


state 163

    (85) FUNCION -> DEFINE DATA_TIPOS ID VAR_FUN BLOQUE RETURN EXP END .

    DEFINE          reduce using rule 85 (FUNCION -> DEFINE DATA_TIPOS ID VAR_FUN BLOQUE RETURN EXP END .)


state 164

    (41) LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ .

    RPAR            reduce using rule 41 (LLAMADA_FUNCIONP -> EXPRE LLAMADA_FUNCIONZ .)


state 165

    (43) LLAMADA_FUNCIONZ -> COMMA . LLAMADA_FUNCIONP
    (41) LLAMADA_FUNCIONP -> . EXPRE LLAMADA_FUNCIONZ
    (42) LLAMADA_FUNCIONP -> . empty
    (61) EXPRE -> . EXP EXPREZ
    (1) empty -> .
    (64) EXP -> . TERMINO EXP_W_SIGN
    (67) TERMINO -> . FAC TERMINO_W_SIGN
    (76) FAC -> . LPAR EXPRE RPAR
    (77) FAC -> . FACS VAR_CTE
    (78) FAC -> . ID FACT
    (81) FACS -> . ASOP
    (82) FACS -> . empty
    (28) ASOP -> . PLUS
    (29) ASOP -> . MINUS

  ! shift/reduce conflict for ID resolved as shift
    RPAR            reduce using rule 1 (empty -> .)
    ICTE            reduce using rule 1 (empty -> .)
    FCTE            reduce using rule 1 (empty -> .)
    LPAR            shift and go to state 41
    ID              shift and go to state 50
    PLUS            shift and go to state 44
    MINUS           shift and go to state 49

  ! ID              [ reduce using rule 1 (empty -> .) ]

    EXPRE                          shift and go to state 131
    LLAMADA_FUNCIONP               shift and go to state 177
    ASOP                           shift and go to state 43
    TERMINO                        shift and go to state 45
    EXP                            shift and go to state 74
    FACS                           shift and go to state 47
    FAC                            shift and go to state 48
    empty                          shift and go to state 133

state 166

    (44) LLAMADA_FUNCIONZ -> empty .

    RPAR            reduce using rule 44 (LLAMADA_FUNCIONZ -> empty .)


state 167

    (40) LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .

    ID              reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    IF              reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    DRAW            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    PRINT           reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    WHILE           reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FOR             reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    INT             reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    BOOLEAN         reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    CHAR            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    STRING          reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    FLOAT           reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    END             reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    RPAR            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    MULT            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    DIVI            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    PLUS            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    MINUS           reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    DEFINE          reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    RETURN          reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    ELSE            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LESSTH          reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    GREATERTH       reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    SEQUAL          reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    NOTEQ           reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    LESSEQTH        reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    GREATEREQTH     reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    COMMA           reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)
    RBRA            reduce using rule 40 (LLAMADA_FUNCION -> ID LPAR LLAMADA_FUNCIONP RPAR .)


state 168

    (35) ASIGNACIONZ -> COMMA . ICTE

    ICTE            shift and go to state 178


state 169

    (34) ASIGNACIONP -> LBRA ICTE ASIGNACIONZ . RBRA

    RBRA            shift and go to state 179


state 170

    (36) ASIGNACIONZ -> empty .

    RBRA            reduce using rule 36 (ASIGNACIONZ -> empty .)


state 171

    (86) ACCION -> ID POINT DIBUJA LPAR . VAR_CTE RPAR
    (70) VAR_CTE -> . ICTE
    (71) VAR_CTE -> . FCTE
    (72) VAR_CTE -> . LLAMADA_FUNCION
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR

    ICTE            shift and go to state 81
    FCTE            shift and go to state 80
    ID              shift and go to state 82

    LLAMADA_FUNCION                shift and go to state 78
    VAR_CTE                        shift and go to state 180

state 172

    (50) CONDICION -> IF LPAR EXPRE RPAR . BLOQUE CONDICIONP END
    (20) BLOQUE -> . ESTATUTO BLOQUEP
    (13) ESTATUTO -> . ASIGNACION
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (32) ASIGNACION -> . ID ASIGNACIONP
    (50) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (46) CICLO -> . WHILEF
    (47) CICLO -> . FORZ
    (86) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (73) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (48) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (49) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    ID              shift and go to state 67
    IF              shift and go to state 68
    DRAW            shift and go to state 11
    PRINT           shift and go to state 58
    WHILE           shift and go to state 57
    FOR             shift and go to state 61
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 54
    CICLO                          shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 59
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 55
    WHILEF                         shift and go to state 62
    DATA_TIPOS                     shift and go to state 14
    FORZ                           shift and go to state 63
    IMPRIMIR                       shift and go to state 65
    BLOQUE                         shift and go to state 181
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 69
    CONDICION                      shift and go to state 64

state 173

    (79) FACT -> LBRA EXP FACZ RBRA .

    MULT            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    DIVI            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    PLUS            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    MINUS           reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    DEFINE          reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    ID              reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    IF              reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    DRAW            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    PRINT           reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    WHILE           reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    FOR             reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    INT             reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    BOOLEAN         reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    CHAR            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    STRING          reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    FLOAT           reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    RETURN          reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    END             reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    ELSE            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    LESSTH          reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    GREATERTH       reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    SEQUAL          reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    NOTEQ           reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    LESSEQTH        reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    GREATEREQTH     reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    RPAR            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    COMMA           reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)
    RBRA            reduce using rule 79 (FACT -> LBRA EXP FACZ RBRA .)


state 174

    (83) FACZ -> COMMA EXP .

    RBRA            reduce using rule 83 (FACZ -> COMMA EXP .)


state 175

    (48) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE . END

    END             shift and go to state 182


state 176

    (49) FORZ -> FOR LPAR ICTE COMMA ICTE . COMMA ICTE RPAR BLOQUE END

    COMMA           shift and go to state 183


state 177

    (43) LLAMADA_FUNCIONZ -> COMMA LLAMADA_FUNCIONP .

    RPAR            reduce using rule 43 (LLAMADA_FUNCIONZ -> COMMA LLAMADA_FUNCIONP .)


state 178

    (35) ASIGNACIONZ -> COMMA ICTE .

    RBRA            reduce using rule 35 (ASIGNACIONZ -> COMMA ICTE .)


state 179

    (34) ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .

    ID              reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    IF              reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    DRAW            reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    PRINT           reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    WHILE           reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    FOR             reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    INT             reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    BOOLEAN         reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    CHAR            reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    STRING          reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    FLOAT           reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    RETURN          reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    END             reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)
    ELSE            reduce using rule 34 (ASIGNACIONP -> LBRA ICTE ASIGNACIONZ RBRA .)


state 180

    (86) ACCION -> ID POINT DIBUJA LPAR VAR_CTE . RPAR

    RPAR            shift and go to state 184


state 181

    (50) CONDICION -> IF LPAR EXPRE RPAR BLOQUE . CONDICIONP END
    (51) CONDICIONP -> . ELSE CONDICIONZ
    (52) CONDICIONP -> . empty
    (1) empty -> .

    ELSE            shift and go to state 187
    END             reduce using rule 1 (empty -> .)

    CONDICIONP                     shift and go to state 185
    empty                          shift and go to state 186

state 182

    (48) WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .

    ID              reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    IF              reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    DRAW            reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    PRINT           reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    WHILE           reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FOR             reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    INT             reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    CHAR            reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    STRING          reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    FLOAT           reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    END             reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    RETURN          reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)
    ELSE            reduce using rule 48 (WHILEF -> WHILE LPAR EXPRE RPAR BLOQUE END .)


state 183

    (49) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA . ICTE RPAR BLOQUE END

    ICTE            shift and go to state 188


state 184

    (86) ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .

    ID              reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    IF              reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    DRAW            reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    PRINT           reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    WHILE           reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FOR             reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    INT             reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    BOOLEAN         reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    CHAR            reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    STRING          reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    FLOAT           reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    END             reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    RETURN          reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)
    ELSE            reduce using rule 86 (ACCION -> ID POINT DIBUJA LPAR VAR_CTE RPAR .)


state 185

    (50) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP . END

    END             shift and go to state 189


state 186

    (52) CONDICIONP -> empty .

    END             reduce using rule 52 (CONDICIONP -> empty .)


state 187

    (51) CONDICIONP -> ELSE . CONDICIONZ
    (53) CONDICIONZ -> . BLOQUE empty
    (54) CONDICIONZ -> . CONDICION
    (20) BLOQUE -> . ESTATUTO BLOQUEP
    (50) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (13) ESTATUTO -> . ASIGNACION
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (32) ASIGNACION -> . ID ASIGNACIONP
    (46) CICLO -> . WHILEF
    (47) CICLO -> . FORZ
    (86) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (73) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (48) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (49) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    IF              shift and go to state 68
    ID              shift and go to state 67
    DRAW            shift and go to state 11
    PRINT           shift and go to state 58
    WHILE           shift and go to state 57
    FOR             shift and go to state 61
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 54
    CICLO                          shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 59
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 55
    WHILEF                         shift and go to state 62
    DATA_TIPOS                     shift and go to state 14
    FORZ                           shift and go to state 63
    IMPRIMIR                       shift and go to state 65
    BLOQUE                         shift and go to state 191
    CONDICIONZ                     shift and go to state 192
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 69
    CONDICION                      shift and go to state 190

state 188

    (49) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE . RPAR BLOQUE END

    RPAR            shift and go to state 193


state 189

    (50) CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .

    ID              reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    IF              reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    DRAW            reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    PRINT           reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    WHILE           reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FOR             reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    INT             reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    BOOLEAN         reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    CHAR            reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    STRING          reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    FLOAT           reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    RETURN          reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    END             reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)
    ELSE            reduce using rule 50 (CONDICION -> IF LPAR EXPRE RPAR BLOQUE CONDICIONP END .)


state 190

    (54) CONDICIONZ -> CONDICION .
    (14) ESTATUTO -> CONDICION .

  ! reduce/reduce conflict for END resolved using rule 14 (ESTATUTO -> CONDICION .)
    ID              reduce using rule 14 (ESTATUTO -> CONDICION .)
    IF              reduce using rule 14 (ESTATUTO -> CONDICION .)
    DRAW            reduce using rule 14 (ESTATUTO -> CONDICION .)
    PRINT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    WHILE           reduce using rule 14 (ESTATUTO -> CONDICION .)
    FOR             reduce using rule 14 (ESTATUTO -> CONDICION .)
    INT             reduce using rule 14 (ESTATUTO -> CONDICION .)
    BOOLEAN         reduce using rule 14 (ESTATUTO -> CONDICION .)
    CHAR            reduce using rule 14 (ESTATUTO -> CONDICION .)
    STRING          reduce using rule 14 (ESTATUTO -> CONDICION .)
    FLOAT           reduce using rule 14 (ESTATUTO -> CONDICION .)
    END             reduce using rule 14 (ESTATUTO -> CONDICION .)

  ! END             [ reduce using rule 54 (CONDICIONZ -> CONDICION .) ]


state 191

    (53) CONDICIONZ -> BLOQUE . empty
    (1) empty -> .

    END             reduce using rule 1 (empty -> .)

    empty                          shift and go to state 194

state 192

    (51) CONDICIONP -> ELSE CONDICIONZ .

    END             reduce using rule 51 (CONDICIONP -> ELSE CONDICIONZ .)


state 193

    (49) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR . BLOQUE END
    (20) BLOQUE -> . ESTATUTO BLOQUEP
    (13) ESTATUTO -> . ASIGNACION
    (14) ESTATUTO -> . CONDICION
    (15) ESTATUTO -> . CICLO
    (16) ESTATUTO -> . ACCION
    (17) ESTATUTO -> . VART
    (18) ESTATUTO -> . LLAMADA_FUNCION
    (19) ESTATUTO -> . IMPRIMIR
    (32) ASIGNACION -> . ID ASIGNACIONP
    (50) CONDICION -> . IF LPAR EXPRE RPAR BLOQUE CONDICIONP END
    (46) CICLO -> . WHILEF
    (47) CICLO -> . FORZ
    (86) ACCION -> . ID POINT DIBUJA LPAR VAR_CTE RPAR
    (8) VART -> . DRAW ID EQUAL NEW DRAWI LPAR RPAR
    (9) VART -> . DATA_TIPOS ID VARZ
    (10) VART -> . ARR ID
    (40) LLAMADA_FUNCION -> . ID LPAR LLAMADA_FUNCIONP RPAR
    (73) IMPRIMIR -> . PRINT LBRA IMPRIMIRZ RBRA
    (48) WHILEF -> . WHILE LPAR EXPRE RPAR BLOQUE END
    (49) FORZ -> . FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END
    (23) DATA_TIPOS -> . INT
    (24) DATA_TIPOS -> . BOOLEAN
    (25) DATA_TIPOS -> . CHAR
    (26) DATA_TIPOS -> . STRING
    (27) DATA_TIPOS -> . FLOAT
    (37) ARR -> . DATA_TIPOS LBRA ICTE ARRZ RBRA

    ID              shift and go to state 67
    IF              shift and go to state 68
    DRAW            shift and go to state 11
    PRINT           shift and go to state 58
    WHILE           shift and go to state 57
    FOR             shift and go to state 61
    INT             shift and go to state 15
    BOOLEAN         shift and go to state 18
    CHAR            shift and go to state 16
    STRING          shift and go to state 13
    FLOAT           shift and go to state 12

    VART                           shift and go to state 54
    CICLO                          shift and go to state 56
    LLAMADA_FUNCION                shift and go to state 59
    ASIGNACION                     shift and go to state 60
    ESTATUTO                       shift and go to state 55
    WHILEF                         shift and go to state 62
    DATA_TIPOS                     shift and go to state 14
    FORZ                           shift and go to state 63
    IMPRIMIR                       shift and go to state 65
    BLOQUE                         shift and go to state 195
    ARR                            shift and go to state 17
    ACCION                         shift and go to state 69
    CONDICION                      shift and go to state 64

state 194

    (53) CONDICIONZ -> BLOQUE empty .

    END             reduce using rule 53 (CONDICIONZ -> BLOQUE empty .)


state 195

    (49) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE . END

    END             shift and go to state 196


state 196

    (49) FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .

    ID              reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    IF              reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    DRAW            reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    PRINT           reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    WHILE           reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FOR             reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    INT             reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    BOOLEAN         reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    CHAR            reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    STRING          reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    FLOAT           reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    RETURN          reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    END             reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)
    ELSE            reduce using rule 49 (FORZ -> FOR LPAR ICTE COMMA ICTE COMMA ICTE RPAR BLOQUE END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DEFINE in state 1 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 6 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 165 resolved as shift
WARNING: reduce/reduce conflict in state 190 resolved using rule (ESTATUTO -> CONDICION)
WARNING: rejected rule (CONDICIONZ -> CONDICION) in state 190
WARNING: Rule (CONDICIONZ -> CONDICION) is never reduced
